/*
* generated by Xtext
*/
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.xtext.example.mydsl.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {
 
 	private MyDslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getGreetingsAssignment()); }
(rule__Model__GreetingsAssignment)
{ after(grammarAccess.getModelAccess().getGreetingsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRulenew_line
entryRulenew_line 
:
{ before(grammarAccess.getNew_lineRule()); }
	 rulenew_line
{ after(grammarAccess.getNew_lineRule()); } 
	 EOF 
;

// Rule new_line
rulenew_line
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNew_lineAccess().getAlternatives()); }
(rule__New_line__Alternatives)
{ after(grammarAccess.getNew_lineAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRulegroup
entryRulegroup 
:
{ before(grammarAccess.getGroupRule()); }
	 rulegroup
{ after(grammarAccess.getGroupRule()); } 
	 EOF 
;

// Rule group
rulegroup
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getGroupAccess().getGroup_partParserRuleCall()); }
(	rulegroup_part)
{ after(grammarAccess.getGroupAccess().getGroup_partParserRuleCall()); }
)
(
{ before(grammarAccess.getGroupAccess().getGroup_partParserRuleCall()); }
(	rulegroup_part)*
{ after(grammarAccess.getGroupAccess().getGroup_partParserRuleCall()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulegroup_part
entryRulegroup_part 
:
{ before(grammarAccess.getGroup_partRule()); }
	 rulegroup_part
{ after(grammarAccess.getGroup_partRule()); } 
	 EOF 
;

// Rule group_part
rulegroup_part
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGroup_partAccess().getAlternatives()); }
(rule__Group_part__Alternatives)
{ after(grammarAccess.getGroup_partAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleif_action
entryRuleif_action 
:
{ before(grammarAccess.getIf_actionRule()); }
	 ruleif_action
{ after(grammarAccess.getIf_actionRule()); } 
	 EOF 
;

// Rule if_action
ruleif_action
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIf_actionAccess().getGroup()); }
(rule__If_action__Group__0)
{ after(grammarAccess.getIf_actionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleif_group
entryRuleif_group 
:
{ before(grammarAccess.getIf_groupRule()); }
	 ruleif_group
{ after(grammarAccess.getIf_groupRule()); } 
	 EOF 
;

// Rule if_group
ruleif_group
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIf_groupAccess().getAlternatives()); }
(rule__If_group__Alternatives)
{ after(grammarAccess.getIf_groupAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleelif_groups
entryRuleelif_groups 
:
{ before(grammarAccess.getElif_groupsRule()); }
	 ruleelif_groups
{ after(grammarAccess.getElif_groupsRule()); } 
	 EOF 
;

// Rule elif_groups
ruleelif_groups
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getElif_groupsAccess().getElif_groupParserRuleCall()); }
(	ruleelif_group)
{ after(grammarAccess.getElif_groupsAccess().getElif_groupParserRuleCall()); }
)
(
{ before(grammarAccess.getElif_groupsAccess().getElif_groupParserRuleCall()); }
(	ruleelif_group)*
{ after(grammarAccess.getElif_groupsAccess().getElif_groupParserRuleCall()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleelif_group
entryRuleelif_group 
:
{ before(grammarAccess.getElif_groupRule()); }
	 ruleelif_group
{ after(grammarAccess.getElif_groupRule()); } 
	 EOF 
;

// Rule elif_group
ruleelif_group
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElif_groupAccess().getGroup()); }
(rule__Elif_group__Group__0)
{ after(grammarAccess.getElif_groupAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulestatement
entryRulestatement 
:
{ before(grammarAccess.getStatementRule()); }
	 rulestatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule statement
rulestatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatementAccess().getAlternatives()); }
(rule__Statement__Alternatives)
{ after(grammarAccess.getStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRulefor_init_statement
entryRulefor_init_statement 
:
{ before(grammarAccess.getFor_init_statementRule()); }
	 rulefor_init_statement
{ after(grammarAccess.getFor_init_statementRule()); } 
	 EOF 
;

// Rule for_init_statement
rulefor_init_statement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFor_init_statementAccess().getAlternatives()); }
(rule__For_init_statement__Alternatives)
{ after(grammarAccess.getFor_init_statementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulesimple_declaration
entryRulesimple_declaration 
:
{ before(grammarAccess.getSimple_declarationRule()); }
	 rulesimple_declaration
{ after(grammarAccess.getSimple_declarationRule()); } 
	 EOF 
;

// Rule simple_declaration
rulesimple_declaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimple_declarationAccess().getIntA1Keyword()); }

	'int a = 1;' 

{ after(grammarAccess.getSimple_declarationAccess().getIntA1Keyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleexpression_statement
entryRuleexpression_statement 
:
{ before(grammarAccess.getExpression_statementRule()); }
	 ruleexpression_statement
{ after(grammarAccess.getExpression_statementRule()); } 
	 EOF 
;

// Rule expression_statement
ruleexpression_statement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpression_statementAccess().getExpressionParserRuleCall()); }
(	ruleexpression)?
{ after(grammarAccess.getExpression_statementAccess().getExpressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulecompound_statement
entryRulecompound_statement 
:
{ before(grammarAccess.getCompound_statementRule()); }
	 rulecompound_statement
{ after(grammarAccess.getCompound_statementRule()); } 
	 EOF 
;

// Rule compound_statement
rulecompound_statement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompound_statementAccess().getGroup()); }
(rule__Compound_statement__Group__0)
{ after(grammarAccess.getCompound_statementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulestatement_seq
entryRulestatement_seq 
:
{ before(grammarAccess.getStatement_seqRule()); }
	 rulestatement_seq
{ after(grammarAccess.getStatement_seqRule()); } 
	 EOF 
;

// Rule statement_seq
rulestatement_seq
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getStatement_seqAccess().getStatementParserRuleCall()); }
(	rulestatement)
{ after(grammarAccess.getStatement_seqAccess().getStatementParserRuleCall()); }
)
(
{ before(grammarAccess.getStatement_seqAccess().getStatementParserRuleCall()); }
(	rulestatement)*
{ after(grammarAccess.getStatement_seqAccess().getStatementParserRuleCall()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleselection_statement
entryRuleselection_statement 
:
{ before(grammarAccess.getSelection_statementRule()); }
	 ruleselection_statement
{ after(grammarAccess.getSelection_statementRule()); } 
	 EOF 
;

// Rule selection_statement
ruleselection_statement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSelection_statementAccess().getAlternatives()); }
(rule__Selection_statement__Alternatives)
{ after(grammarAccess.getSelection_statementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulecondition
entryRulecondition 
:
{ before(grammarAccess.getConditionRule()); }
	 rulecondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule condition
rulecondition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConditionAccess().getExpressionParserRuleCall()); }
	ruleexpression
{ after(grammarAccess.getConditionAccess().getExpressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulejump_statement
entryRulejump_statement 
:
{ before(grammarAccess.getJump_statementRule()); }
	 rulejump_statement
{ after(grammarAccess.getJump_statementRule()); } 
	 EOF 
;

// Rule jump_statement
rulejump_statement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getJump_statementAccess().getAlternatives()); }
(rule__Jump_statement__Alternatives)
{ after(grammarAccess.getJump_statementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuledeclaration_statement
entryRuledeclaration_statement 
:
{ before(grammarAccess.getDeclaration_statementRule()); }
	 ruledeclaration_statement
{ after(grammarAccess.getDeclaration_statementRule()); } 
	 EOF 
;

// Rule declaration_statement
ruledeclaration_statement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclaration_statementAccess().getBlock_declarationParserRuleCall()); }
	ruleblock_declaration
{ after(grammarAccess.getDeclaration_statementAccess().getBlock_declarationParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleblock_declaration
entryRuleblock_declaration 
:
{ before(grammarAccess.getBlock_declarationRule()); }
	 ruleblock_declaration
{ after(grammarAccess.getBlock_declarationRule()); } 
	 EOF 
;

// Rule block_declaration
ruleblock_declaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBlock_declarationAccess().getBlock_declarationKeyword()); }

	'==block_declaration==' 

{ after(grammarAccess.getBlock_declarationAccess().getBlock_declarationKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleconstant_expression
entryRuleconstant_expression 
:
{ before(grammarAccess.getConstant_expressionRule()); }
	 ruleconstant_expression
{ after(grammarAccess.getConstant_expressionRule()); } 
	 EOF 
;

// Rule constant_expression
ruleconstant_expression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstant_expressionAccess().getConditional_expressionParserRuleCall()); }
	ruleconditional_expression
{ after(grammarAccess.getConstant_expressionAccess().getConditional_expressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleconditional_expression
entryRuleconditional_expression 
:
{ before(grammarAccess.getConditional_expressionRule()); }
	 ruleconditional_expression
{ after(grammarAccess.getConditional_expressionRule()); } 
	 EOF 
;

// Rule conditional_expression
ruleconditional_expression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConditional_expressionAccess().getAlternatives()); }
(rule__Conditional_expression__Alternatives)
{ after(grammarAccess.getConditional_expressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulelogical_or_expression
entryRulelogical_or_expression 
:
{ before(grammarAccess.getLogical_or_expressionRule()); }
	 rulelogical_or_expression
{ after(grammarAccess.getLogical_or_expressionRule()); } 
	 EOF 
;

// Rule logical_or_expression
rulelogical_or_expression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogical_or_expressionAccess().getGroup()); }
(rule__Logical_or_expression__Group__0)
{ after(grammarAccess.getLogical_or_expressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulelogical_and_expression
entryRulelogical_and_expression 
:
{ before(grammarAccess.getLogical_and_expressionRule()); }
	 rulelogical_and_expression
{ after(grammarAccess.getLogical_and_expressionRule()); } 
	 EOF 
;

// Rule logical_and_expression
rulelogical_and_expression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLogical_and_expressionAccess().getGroup()); }
(rule__Logical_and_expression__Group__0)
{ after(grammarAccess.getLogical_and_expressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleinclusive_or_expression
entryRuleinclusive_or_expression 
:
{ before(grammarAccess.getInclusive_or_expressionRule()); }
	 ruleinclusive_or_expression
{ after(grammarAccess.getInclusive_or_expressionRule()); } 
	 EOF 
;

// Rule inclusive_or_expression
ruleinclusive_or_expression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInclusive_or_expressionAccess().getGroup()); }
(rule__Inclusive_or_expression__Group__0)
{ after(grammarAccess.getInclusive_or_expressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleexclusive_or_expression
entryRuleexclusive_or_expression 
:
{ before(grammarAccess.getExclusive_or_expressionRule()); }
	 ruleexclusive_or_expression
{ after(grammarAccess.getExclusive_or_expressionRule()); } 
	 EOF 
;

// Rule exclusive_or_expression
ruleexclusive_or_expression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExclusive_or_expressionAccess().getGroup()); }
(rule__Exclusive_or_expression__Group__0)
{ after(grammarAccess.getExclusive_or_expressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleand_expression
entryRuleand_expression 
:
{ before(grammarAccess.getAnd_expressionRule()); }
	 ruleand_expression
{ after(grammarAccess.getAnd_expressionRule()); } 
	 EOF 
;

// Rule and_expression
ruleand_expression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAnd_expressionAccess().getGroup()); }
(rule__And_expression__Group__0)
{ after(grammarAccess.getAnd_expressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleequality_expression
entryRuleequality_expression 
:
{ before(grammarAccess.getEquality_expressionRule()); }
	 ruleequality_expression
{ after(grammarAccess.getEquality_expressionRule()); } 
	 EOF 
;

// Rule equality_expression
ruleequality_expression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEquality_expressionAccess().getGroup()); }
(rule__Equality_expression__Group__0)
{ after(grammarAccess.getEquality_expressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulerelational_expression
entryRulerelational_expression 
:
{ before(grammarAccess.getRelational_expressionRule()); }
	 rulerelational_expression
{ after(grammarAccess.getRelational_expressionRule()); } 
	 EOF 
;

// Rule relational_expression
rulerelational_expression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRelational_expressionAccess().getRelKeyword()); }

	'==rel==' 

{ after(grammarAccess.getRelational_expressionAccess().getRelKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleexpression
entryRuleexpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleexpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule expression
ruleexpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getExpressionKeyword()); }

	'==expression==' 

{ after(grammarAccess.getExpressionAccess().getExpressionKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleassignment_expression
entryRuleassignment_expression 
:
{ before(grammarAccess.getAssignment_expressionRule()); }
	 ruleassignment_expression
{ after(grammarAccess.getAssignment_expressionRule()); } 
	 EOF 
;

// Rule assignment_expression
ruleassignment_expression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignment_expressionAccess().getAssignmentKeyword()); }

	'==assignment==' 

{ after(grammarAccess.getAssignment_expressionAccess().getAssignmentKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulepreprocessing_token
entryRulepreprocessing_token 
:
{ before(grammarAccess.getPreprocessing_tokenRule()); }
	 rulepreprocessing_token
{ after(grammarAccess.getPreprocessing_tokenRule()); } 
	 EOF 
;

// Rule preprocessing_token
rulepreprocessing_token
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPreprocessing_tokenAccess().getAlternatives()); }
(rule__Preprocessing_token__Alternatives)
{ after(grammarAccess.getPreprocessing_tokenAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleelse_group
entryRuleelse_group 
:
{ before(grammarAccess.getElse_groupRule()); }
	 ruleelse_group
{ after(grammarAccess.getElse_groupRule()); } 
	 EOF 
;

// Rule else_group
ruleelse_group
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElse_groupAccess().getGroup()); }
(rule__Else_group__Group__0)
{ after(grammarAccess.getElse_groupAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleendif_line
entryRuleendif_line 
:
{ before(grammarAccess.getEndif_lineRule()); }
	 ruleendif_line
{ after(grammarAccess.getEndif_lineRule()); } 
	 EOF 
;

// Rule endif_line
ruleendif_line
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEndif_lineAccess().getGroup()); }
(rule__Endif_line__Group__0)
{ after(grammarAccess.getEndif_lineAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulecontrol_line
entryRulecontrol_line 
:
{ before(grammarAccess.getControl_lineRule()); }
	 rulecontrol_line
{ after(grammarAccess.getControl_lineRule()); } 
	 EOF 
;

// Rule control_line
rulecontrol_line
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getControl_lineAccess().getAlternatives()); }
(rule__Control_line__Alternatives)
{ after(grammarAccess.getControl_lineAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulelparen
entryRulelparen 
:
{ before(grammarAccess.getLparenRule()); }
	 rulelparen
{ after(grammarAccess.getLparenRule()); } 
	 EOF 
;

// Rule lparen
rulelparen
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLparenAccess().getLeftParenthesisKeyword()); }

	'(' 

{ after(grammarAccess.getLparenAccess().getLeftParenthesisKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulereplacement_list
entryRulereplacement_list 
:
{ before(grammarAccess.getReplacement_listRule()); }
	 rulereplacement_list
{ after(grammarAccess.getReplacement_listRule()); } 
	 EOF 
;

// Rule replacement_list
rulereplacement_list
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReplacement_listAccess().getPp_tokensParserRuleCall()); }
(	rulepp_tokens)?
{ after(grammarAccess.getReplacement_listAccess().getPp_tokensParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulepp_tokens
entryRulepp_tokens 
:
{ before(grammarAccess.getPp_tokensRule()); }
	 rulepp_tokens
{ after(grammarAccess.getPp_tokensRule()); } 
	 EOF 
;

// Rule pp_tokens
rulepp_tokens
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getPp_tokensAccess().getPreprocessing_tokenParserRuleCall()); }
(	rulepreprocessing_token)
{ after(grammarAccess.getPp_tokensAccess().getPreprocessing_tokenParserRuleCall()); }
)
(
{ before(grammarAccess.getPp_tokensAccess().getPreprocessing_tokenParserRuleCall()); }
(	rulepreprocessing_token)*
{ after(grammarAccess.getPp_tokensAccess().getPreprocessing_tokenParserRuleCall()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}








rule__New_line__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNew_lineAccess().getControl000aKeyword_0()); }

	'\n' 

{ after(grammarAccess.getNew_lineAccess().getControl000aKeyword_0()); }
)

    |(
{ before(grammarAccess.getNew_lineAccess().getControl000dControl000aKeyword_1()); }

	'\r\n' 

{ after(grammarAccess.getNew_lineAccess().getControl000dControl000aKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Group_part__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroup_partAccess().getGroup_0()); }
(rule__Group_part__Group_0__0)
{ after(grammarAccess.getGroup_partAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getGroup_partAccess().getIf_actionParserRuleCall_1()); }
	ruleif_action
{ after(grammarAccess.getGroup_partAccess().getIf_actionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getGroup_partAccess().getControl_lineParserRuleCall_2()); }
	rulecontrol_line
{ after(grammarAccess.getGroup_partAccess().getControl_lineParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__If_group__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_groupAccess().getGroup_0()); }
(rule__If_group__Group_0__0)
{ after(grammarAccess.getIf_groupAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getIf_groupAccess().getGroup_1()); }
(rule__If_group__Group_1__0)
{ after(grammarAccess.getIf_groupAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getIf_groupAccess().getGroup_2()); }
(rule__If_group__Group_2__0)
{ after(grammarAccess.getIf_groupAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getExpression_statementParserRuleCall_0()); }
	ruleexpression_statement
{ after(grammarAccess.getStatementAccess().getExpression_statementParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getCompound_statementParserRuleCall_1()); }
	rulecompound_statement
{ after(grammarAccess.getStatementAccess().getCompound_statementParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getJump_statementParserRuleCall_2()); }
	rulejump_statement
{ after(grammarAccess.getStatementAccess().getJump_statementParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getDeclaration_statementParserRuleCall_3()); }
	ruledeclaration_statement
{ after(grammarAccess.getStatementAccess().getDeclaration_statementParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getSelection_statementParserRuleCall_4()); }
	ruleselection_statement
{ after(grammarAccess.getStatementAccess().getSelection_statementParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__For_init_statement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFor_init_statementAccess().getExpression_statementParserRuleCall_0()); }
	ruleexpression_statement
{ after(grammarAccess.getFor_init_statementAccess().getExpression_statementParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getFor_init_statementAccess().getSimple_declarationParserRuleCall_1()); }
	rulesimple_declaration
{ after(grammarAccess.getFor_init_statementAccess().getSimple_declarationParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Selection_statement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelection_statementAccess().getGroup_0()); }
(rule__Selection_statement__Group_0__0)
{ after(grammarAccess.getSelection_statementAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getSelection_statementAccess().getGroup_1()); }
(rule__Selection_statement__Group_1__0)
{ after(grammarAccess.getSelection_statementAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getSelection_statementAccess().getGroup_2()); }
(rule__Selection_statement__Group_2__0)
{ after(grammarAccess.getSelection_statementAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Jump_statement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJump_statementAccess().getBreakKeyword_0()); }

	'break;' 

{ after(grammarAccess.getJump_statementAccess().getBreakKeyword_0()); }
)

    |(
{ before(grammarAccess.getJump_statementAccess().getContinueKeyword_1()); }

	'continue;' 

{ after(grammarAccess.getJump_statementAccess().getContinueKeyword_1()); }
)

    |(
{ before(grammarAccess.getJump_statementAccess().getGroup_2()); }
(rule__Jump_statement__Group_2__0)
{ after(grammarAccess.getJump_statementAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getJump_statementAccess().getGroup_3()); }
(rule__Jump_statement__Group_3__0)
{ after(grammarAccess.getJump_statementAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional_expression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditional_expressionAccess().getLogical_or_expressionParserRuleCall_0()); }
	rulelogical_or_expression
{ after(grammarAccess.getConditional_expressionAccess().getLogical_or_expressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getConditional_expressionAccess().getGroup_1()); }
(rule__Conditional_expression__Group_1__0)
{ after(grammarAccess.getConditional_expressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Equality_expression__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEquality_expressionAccess().getEqualsSignEqualsSignKeyword_1_0_0()); }

	'==' 

{ after(grammarAccess.getEquality_expressionAccess().getEqualsSignEqualsSignKeyword_1_0_0()); }
)

    |(
{ before(grammarAccess.getEquality_expressionAccess().getExclamationMarkEqualsSignKeyword_1_0_1()); }

	'!=' 

{ after(grammarAccess.getEquality_expressionAccess().getExclamationMarkEqualsSignKeyword_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Preprocessing_token__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPreprocessing_tokenAccess().getIDENTIFIERTerminalRuleCall_0()); }
	RULE_IDENTIFIER
{ after(grammarAccess.getPreprocessing_tokenAccess().getIDENTIFIERTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPreprocessing_tokenAccess().getHEADERNAMETerminalRuleCall_1()); }
	RULE_HEADERNAME
{ after(grammarAccess.getPreprocessing_tokenAccess().getHEADERNAMETerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPreprocessing_tokenAccess().getPPNUMBERTerminalRuleCall_2()); }
	RULE_PPNUMBER
{ after(grammarAccess.getPreprocessing_tokenAccess().getPPNUMBERTerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getPreprocessing_tokenAccess().getPPOPorPUNCTerminalRuleCall_3()); }
	RULE_PPOPORPUNC
{ after(grammarAccess.getPreprocessing_tokenAccess().getPPOPorPUNCTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getGroup_0()); }
(rule__Control_line__Group_0__0)
{ after(grammarAccess.getControl_lineAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getControl_lineAccess().getGroup_1()); }
(rule__Control_line__Group_1__0)
{ after(grammarAccess.getControl_lineAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getControl_lineAccess().getGroup_2()); }
(rule__Control_line__Group_2__0)
{ after(grammarAccess.getControl_lineAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getControl_lineAccess().getGroup_3()); }
(rule__Control_line__Group_3__0)
{ after(grammarAccess.getControl_lineAccess().getGroup_3()); }
)

    |(
{ before(grammarAccess.getControl_lineAccess().getGroup_4()); }
(rule__Control_line__Group_4__0)
{ after(grammarAccess.getControl_lineAccess().getGroup_4()); }
)

    |(
{ before(grammarAccess.getControl_lineAccess().getGroup_5()); }
(rule__Control_line__Group_5__0)
{ after(grammarAccess.getControl_lineAccess().getGroup_5()); }
)

    |(
{ before(grammarAccess.getControl_lineAccess().getGroup_6()); }
(rule__Control_line__Group_6__0)
{ after(grammarAccess.getControl_lineAccess().getGroup_6()); }
)

    |(
{ before(grammarAccess.getControl_lineAccess().getGroup_7()); }
(rule__Control_line__Group_7__0)
{ after(grammarAccess.getControl_lineAccess().getGroup_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Group_part__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Group_part__Group_0__0__Impl
	rule__Group_part__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_part__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroup_partAccess().getPp_tokensParserRuleCall_0_0()); }
(	rulepp_tokens)?
{ after(grammarAccess.getGroup_partAccess().getPp_tokensParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Group_part__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Group_part__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Group_part__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroup_partAccess().getNew_lineParserRuleCall_0_1()); }
	rulenew_line
{ after(grammarAccess.getGroup_partAccess().getNew_lineParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__If_action__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If_action__Group__0__Impl
	rule__If_action__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If_action__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_actionAccess().getIf_groupParserRuleCall_0()); }
	ruleif_group
{ after(grammarAccess.getIf_actionAccess().getIf_groupParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If_action__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If_action__Group__1__Impl
	rule__If_action__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If_action__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_actionAccess().getElif_groupsParserRuleCall_1()); }
(	ruleelif_groups)?
{ after(grammarAccess.getIf_actionAccess().getElif_groupsParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If_action__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If_action__Group__2__Impl
	rule__If_action__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__If_action__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_actionAccess().getElse_groupParserRuleCall_2()); }
(	ruleelse_group)?
{ after(grammarAccess.getIf_actionAccess().getElse_groupParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If_action__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If_action__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If_action__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_actionAccess().getEndif_lineParserRuleCall_3()); }
	ruleendif_line
{ after(grammarAccess.getIf_actionAccess().getEndif_lineParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__If_group__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If_group__Group_0__0__Impl
	rule__If_group__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If_group__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_groupAccess().getIfKeyword_0_0()); }

	'#if' 

{ after(grammarAccess.getIf_groupAccess().getIfKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If_group__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If_group__Group_0__1__Impl
	rule__If_group__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If_group__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_groupAccess().getConstant_expressionParserRuleCall_0_1()); }
	ruleconstant_expression
{ after(grammarAccess.getIf_groupAccess().getConstant_expressionParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If_group__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If_group__Group_0__2__Impl
	rule__If_group__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__If_group__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_groupAccess().getNew_lineParserRuleCall_0_2()); }
	rulenew_line
{ after(grammarAccess.getIf_groupAccess().getNew_lineParserRuleCall_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If_group__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If_group__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If_group__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_groupAccess().getGroupParserRuleCall_0_3()); }
(	rulegroup)?
{ after(grammarAccess.getIf_groupAccess().getGroupParserRuleCall_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__If_group__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If_group__Group_1__0__Impl
	rule__If_group__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If_group__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_groupAccess().getIfdefKeyword_1_0()); }

	'#ifdef' 

{ after(grammarAccess.getIf_groupAccess().getIfdefKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If_group__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If_group__Group_1__1__Impl
	rule__If_group__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If_group__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_groupAccess().getIDENTIFIERTerminalRuleCall_1_1()); }
	RULE_IDENTIFIER
{ after(grammarAccess.getIf_groupAccess().getIDENTIFIERTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If_group__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If_group__Group_1__2__Impl
	rule__If_group__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__If_group__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_groupAccess().getNew_lineParserRuleCall_1_2()); }
	rulenew_line
{ after(grammarAccess.getIf_groupAccess().getNew_lineParserRuleCall_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If_group__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If_group__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If_group__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_groupAccess().getGroupParserRuleCall_1_3()); }
(	rulegroup)?
{ after(grammarAccess.getIf_groupAccess().getGroupParserRuleCall_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__If_group__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If_group__Group_2__0__Impl
	rule__If_group__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If_group__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_groupAccess().getIfndefKeyword_2_0()); }

	'#ifndef' 

{ after(grammarAccess.getIf_groupAccess().getIfndefKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If_group__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If_group__Group_2__1__Impl
	rule__If_group__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If_group__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_groupAccess().getIDENTIFIERTerminalRuleCall_2_1()); }
	RULE_IDENTIFIER
{ after(grammarAccess.getIf_groupAccess().getIDENTIFIERTerminalRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If_group__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If_group__Group_2__2__Impl
	rule__If_group__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__If_group__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_groupAccess().getNew_lineParserRuleCall_2_2()); }
	rulenew_line
{ after(grammarAccess.getIf_groupAccess().getNew_lineParserRuleCall_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If_group__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If_group__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If_group__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_groupAccess().getGroupParserRuleCall_2_3()); }
(	rulegroup)?
{ after(grammarAccess.getIf_groupAccess().getGroupParserRuleCall_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Elif_group__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Elif_group__Group__0__Impl
	rule__Elif_group__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Elif_group__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElif_groupAccess().getElifKeyword_0()); }

	'#elif' 

{ after(grammarAccess.getElif_groupAccess().getElifKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Elif_group__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Elif_group__Group__1__Impl
	rule__Elif_group__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Elif_group__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElif_groupAccess().getConstant_expressionParserRuleCall_1()); }
	ruleconstant_expression
{ after(grammarAccess.getElif_groupAccess().getConstant_expressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Elif_group__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Elif_group__Group__2__Impl
	rule__Elif_group__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Elif_group__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElif_groupAccess().getNew_lineParserRuleCall_2()); }
	rulenew_line
{ after(grammarAccess.getElif_groupAccess().getNew_lineParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Elif_group__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Elif_group__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Elif_group__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElif_groupAccess().getGroupParserRuleCall_3()); }
(	rulegroup)?
{ after(grammarAccess.getElif_groupAccess().getGroupParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}













rule__Compound_statement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Compound_statement__Group__0__Impl
	rule__Compound_statement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Compound_statement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompound_statementAccess().getLeftCurlyBracketKeyword_0()); }

	'{' 

{ after(grammarAccess.getCompound_statementAccess().getLeftCurlyBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Compound_statement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Compound_statement__Group__1__Impl
	rule__Compound_statement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Compound_statement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompound_statementAccess().getStatement_seqParserRuleCall_1()); }
(	rulestatement_seq)?
{ after(grammarAccess.getCompound_statementAccess().getStatement_seqParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Compound_statement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Compound_statement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Compound_statement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompound_statementAccess().getRightCurlyBracketKeyword_2()); }

	'}' 

{ after(grammarAccess.getCompound_statementAccess().getRightCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Selection_statement__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Selection_statement__Group_0__0__Impl
	rule__Selection_statement__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection_statement__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelection_statementAccess().getIfKeyword_0_0()); }

	'if (' 

{ after(grammarAccess.getSelection_statementAccess().getIfKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Selection_statement__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Selection_statement__Group_0__1__Impl
	rule__Selection_statement__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection_statement__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelection_statementAccess().getConditionParserRuleCall_0_1()); }
	rulecondition
{ after(grammarAccess.getSelection_statementAccess().getConditionParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Selection_statement__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Selection_statement__Group_0__2__Impl
	rule__Selection_statement__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection_statement__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelection_statementAccess().getRightParenthesisKeyword_0_2()); }

	')' 

{ after(grammarAccess.getSelection_statementAccess().getRightParenthesisKeyword_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Selection_statement__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Selection_statement__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection_statement__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelection_statementAccess().getStatementParserRuleCall_0_3()); }
	rulestatement
{ after(grammarAccess.getSelection_statementAccess().getStatementParserRuleCall_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Selection_statement__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Selection_statement__Group_1__0__Impl
	rule__Selection_statement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection_statement__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelection_statementAccess().getIfKeyword_1_0()); }

	'if (' 

{ after(grammarAccess.getSelection_statementAccess().getIfKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Selection_statement__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Selection_statement__Group_1__1__Impl
	rule__Selection_statement__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection_statement__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelection_statementAccess().getConditionParserRuleCall_1_1()); }
	rulecondition
{ after(grammarAccess.getSelection_statementAccess().getConditionParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Selection_statement__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Selection_statement__Group_1__2__Impl
	rule__Selection_statement__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection_statement__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelection_statementAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getSelection_statementAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Selection_statement__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Selection_statement__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection_statement__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelection_statementAccess().getStatementParserRuleCall_1_3()); }
	rulestatement
{ after(grammarAccess.getSelection_statementAccess().getStatementParserRuleCall_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Selection_statement__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Selection_statement__Group_2__0__Impl
	rule__Selection_statement__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection_statement__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelection_statementAccess().getSwitchKeyword_2_0()); }

	'switch (' 

{ after(grammarAccess.getSelection_statementAccess().getSwitchKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Selection_statement__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Selection_statement__Group_2__1__Impl
	rule__Selection_statement__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection_statement__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelection_statementAccess().getConditionParserRuleCall_2_1()); }
	rulecondition
{ after(grammarAccess.getSelection_statementAccess().getConditionParserRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Selection_statement__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Selection_statement__Group_2__2__Impl
	rule__Selection_statement__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection_statement__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelection_statementAccess().getRightParenthesisKeyword_2_2()); }

	')' 

{ after(grammarAccess.getSelection_statementAccess().getRightParenthesisKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Selection_statement__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Selection_statement__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Selection_statement__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelection_statementAccess().getStatementParserRuleCall_2_3()); }
	rulestatement
{ after(grammarAccess.getSelection_statementAccess().getStatementParserRuleCall_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Jump_statement__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Jump_statement__Group_2__0__Impl
	rule__Jump_statement__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Jump_statement__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJump_statementAccess().getReturnKeyword_2_0()); }

	'return' 

{ after(grammarAccess.getJump_statementAccess().getReturnKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Jump_statement__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Jump_statement__Group_2__1__Impl
	rule__Jump_statement__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Jump_statement__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJump_statementAccess().getExpressionParserRuleCall_2_1()); }
(	ruleexpression)?
{ after(grammarAccess.getJump_statementAccess().getExpressionParserRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Jump_statement__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Jump_statement__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Jump_statement__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJump_statementAccess().getSemicolonKeyword_2_2()); }

	';' 

{ after(grammarAccess.getJump_statementAccess().getSemicolonKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Jump_statement__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Jump_statement__Group_3__0__Impl
	rule__Jump_statement__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Jump_statement__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJump_statementAccess().getGotoKeyword_3_0()); }

	'goto' 

{ after(grammarAccess.getJump_statementAccess().getGotoKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Jump_statement__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Jump_statement__Group_3__1__Impl
	rule__Jump_statement__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Jump_statement__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJump_statementAccess().getIDENTIFIERTerminalRuleCall_3_1()); }
	RULE_IDENTIFIER
{ after(grammarAccess.getJump_statementAccess().getIDENTIFIERTerminalRuleCall_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Jump_statement__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Jump_statement__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Jump_statement__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJump_statementAccess().getSemicolonKeyword_3_2()); }

	';' 

{ after(grammarAccess.getJump_statementAccess().getSemicolonKeyword_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Conditional_expression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conditional_expression__Group_1__0__Impl
	rule__Conditional_expression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional_expression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditional_expressionAccess().getLogical_or_expressionParserRuleCall_1_0()); }
	rulelogical_or_expression
{ after(grammarAccess.getConditional_expressionAccess().getLogical_or_expressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conditional_expression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conditional_expression__Group_1__1__Impl
	rule__Conditional_expression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional_expression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditional_expressionAccess().getQuestionMarkKeyword_1_1()); }

	'?' 

{ after(grammarAccess.getConditional_expressionAccess().getQuestionMarkKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conditional_expression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conditional_expression__Group_1__2__Impl
	rule__Conditional_expression__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional_expression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditional_expressionAccess().getExpressionParserRuleCall_1_2()); }
	ruleexpression
{ after(grammarAccess.getConditional_expressionAccess().getExpressionParserRuleCall_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conditional_expression__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conditional_expression__Group_1__3__Impl
	rule__Conditional_expression__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional_expression__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditional_expressionAccess().getColonKeyword_1_3()); }

	':' 

{ after(grammarAccess.getConditional_expressionAccess().getColonKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Conditional_expression__Group_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Conditional_expression__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional_expression__Group_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditional_expressionAccess().getAssignment_expressionParserRuleCall_1_4()); }
	ruleassignment_expression
{ after(grammarAccess.getConditional_expressionAccess().getAssignment_expressionParserRuleCall_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Logical_or_expression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Logical_or_expression__Group__0__Impl
	rule__Logical_or_expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Logical_or_expression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogical_or_expressionAccess().getLogical_and_expressionParserRuleCall_0()); }
	rulelogical_and_expression
{ after(grammarAccess.getLogical_or_expressionAccess().getLogical_and_expressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Logical_or_expression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Logical_or_expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Logical_or_expression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogical_or_expressionAccess().getGroup_1()); }
(rule__Logical_or_expression__Group_1__0)*
{ after(grammarAccess.getLogical_or_expressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Logical_or_expression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Logical_or_expression__Group_1__0__Impl
	rule__Logical_or_expression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Logical_or_expression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogical_or_expressionAccess().getVerticalLineVerticalLineKeyword_1_0()); }

	'||' 

{ after(grammarAccess.getLogical_or_expressionAccess().getVerticalLineVerticalLineKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Logical_or_expression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Logical_or_expression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Logical_or_expression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogical_or_expressionAccess().getLogical_and_expressionParserRuleCall_1_1()); }
	rulelogical_and_expression
{ after(grammarAccess.getLogical_or_expressionAccess().getLogical_and_expressionParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Logical_and_expression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Logical_and_expression__Group__0__Impl
	rule__Logical_and_expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Logical_and_expression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogical_and_expressionAccess().getInclusive_or_expressionParserRuleCall_0()); }
	ruleinclusive_or_expression
{ after(grammarAccess.getLogical_and_expressionAccess().getInclusive_or_expressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Logical_and_expression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Logical_and_expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Logical_and_expression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogical_and_expressionAccess().getGroup_1()); }
(rule__Logical_and_expression__Group_1__0)*
{ after(grammarAccess.getLogical_and_expressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Logical_and_expression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Logical_and_expression__Group_1__0__Impl
	rule__Logical_and_expression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Logical_and_expression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogical_and_expressionAccess().getAmpersandAmpersandKeyword_1_0()); }

	'&&' 

{ after(grammarAccess.getLogical_and_expressionAccess().getAmpersandAmpersandKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Logical_and_expression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Logical_and_expression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Logical_and_expression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLogical_and_expressionAccess().getInclusive_or_expressionParserRuleCall_1_1()); }
	ruleinclusive_or_expression
{ after(grammarAccess.getLogical_and_expressionAccess().getInclusive_or_expressionParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Inclusive_or_expression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Inclusive_or_expression__Group__0__Impl
	rule__Inclusive_or_expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Inclusive_or_expression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInclusive_or_expressionAccess().getExclusive_or_expressionParserRuleCall_0()); }
	ruleexclusive_or_expression
{ after(grammarAccess.getInclusive_or_expressionAccess().getExclusive_or_expressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Inclusive_or_expression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Inclusive_or_expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Inclusive_or_expression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInclusive_or_expressionAccess().getGroup_1()); }
(rule__Inclusive_or_expression__Group_1__0)*
{ after(grammarAccess.getInclusive_or_expressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Inclusive_or_expression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Inclusive_or_expression__Group_1__0__Impl
	rule__Inclusive_or_expression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Inclusive_or_expression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInclusive_or_expressionAccess().getVerticalLineKeyword_1_0()); }

	'|' 

{ after(grammarAccess.getInclusive_or_expressionAccess().getVerticalLineKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Inclusive_or_expression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Inclusive_or_expression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Inclusive_or_expression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInclusive_or_expressionAccess().getExclusive_or_expressionParserRuleCall_1_1()); }
	ruleexclusive_or_expression
{ after(grammarAccess.getInclusive_or_expressionAccess().getExclusive_or_expressionParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Exclusive_or_expression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exclusive_or_expression__Group__0__Impl
	rule__Exclusive_or_expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exclusive_or_expression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExclusive_or_expressionAccess().getAnd_expressionParserRuleCall_0()); }
	ruleand_expression
{ after(grammarAccess.getExclusive_or_expressionAccess().getAnd_expressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Exclusive_or_expression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exclusive_or_expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exclusive_or_expression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExclusive_or_expressionAccess().getGroup_1()); }
(rule__Exclusive_or_expression__Group_1__0)*
{ after(grammarAccess.getExclusive_or_expressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Exclusive_or_expression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exclusive_or_expression__Group_1__0__Impl
	rule__Exclusive_or_expression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exclusive_or_expression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExclusive_or_expressionAccess().getCircumflexAccentKeyword_1_0()); }

	'^' 

{ after(grammarAccess.getExclusive_or_expressionAccess().getCircumflexAccentKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Exclusive_or_expression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Exclusive_or_expression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exclusive_or_expression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExclusive_or_expressionAccess().getAnd_expressionParserRuleCall_1_1()); }
	ruleand_expression
{ after(grammarAccess.getExclusive_or_expressionAccess().getAnd_expressionParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__And_expression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And_expression__Group__0__Impl
	rule__And_expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And_expression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnd_expressionAccess().getEquality_expressionParserRuleCall_0()); }
	ruleequality_expression
{ after(grammarAccess.getAnd_expressionAccess().getEquality_expressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__And_expression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And_expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And_expression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnd_expressionAccess().getGroup_1()); }
(rule__And_expression__Group_1__0)*
{ after(grammarAccess.getAnd_expressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__And_expression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And_expression__Group_1__0__Impl
	rule__And_expression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And_expression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnd_expressionAccess().getAmpersandKeyword_1_0()); }

	'&' 

{ after(grammarAccess.getAnd_expressionAccess().getAmpersandKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__And_expression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And_expression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And_expression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnd_expressionAccess().getEquality_expressionParserRuleCall_1_1()); }
	ruleequality_expression
{ after(grammarAccess.getAnd_expressionAccess().getEquality_expressionParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Equality_expression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality_expression__Group__0__Impl
	rule__Equality_expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality_expression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEquality_expressionAccess().getRelational_expressionParserRuleCall_0()); }
	rulerelational_expression
{ after(grammarAccess.getEquality_expressionAccess().getRelational_expressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Equality_expression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality_expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality_expression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEquality_expressionAccess().getGroup_1()); }
(rule__Equality_expression__Group_1__0)*
{ after(grammarAccess.getEquality_expressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Equality_expression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality_expression__Group_1__0__Impl
	rule__Equality_expression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality_expression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEquality_expressionAccess().getAlternatives_1_0()); }
(rule__Equality_expression__Alternatives_1_0)
{ after(grammarAccess.getEquality_expressionAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Equality_expression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality_expression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality_expression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEquality_expressionAccess().getRelational_expressionParserRuleCall_1_1()); }
	rulerelational_expression
{ after(grammarAccess.getEquality_expressionAccess().getRelational_expressionParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Else_group__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Else_group__Group__0__Impl
	rule__Else_group__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Else_group__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElse_groupAccess().getElseKeyword_0()); }

	'#else' 

{ after(grammarAccess.getElse_groupAccess().getElseKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Else_group__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Else_group__Group__1__Impl
	rule__Else_group__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Else_group__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElse_groupAccess().getNew_lineParserRuleCall_1()); }
	rulenew_line
{ after(grammarAccess.getElse_groupAccess().getNew_lineParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Else_group__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Else_group__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Else_group__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElse_groupAccess().getGroupParserRuleCall_2()); }
(	rulegroup)?
{ after(grammarAccess.getElse_groupAccess().getGroupParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Endif_line__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Endif_line__Group__0__Impl
	rule__Endif_line__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Endif_line__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEndif_lineAccess().getEndifKeyword_0()); }

	'#endif' 

{ after(grammarAccess.getEndif_lineAccess().getEndifKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Endif_line__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Endif_line__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Endif_line__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEndif_lineAccess().getNew_lineParserRuleCall_1()); }
	rulenew_line
{ after(grammarAccess.getEndif_lineAccess().getNew_lineParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Control_line__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_0__0__Impl
	rule__Control_line__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getIncludeKeyword_0_0()); }

	'#include' 

{ after(grammarAccess.getControl_lineAccess().getIncludeKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Control_line__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_0__1__Impl
	rule__Control_line__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getPp_tokensParserRuleCall_0_1()); }
	rulepp_tokens
{ after(grammarAccess.getControl_lineAccess().getPp_tokensParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Control_line__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getNew_lineParserRuleCall_0_2()); }
	rulenew_line
{ after(grammarAccess.getControl_lineAccess().getNew_lineParserRuleCall_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Control_line__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_1__0__Impl
	rule__Control_line__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getDefineKeyword_1_0()); }

	'#define' 

{ after(grammarAccess.getControl_lineAccess().getDefineKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Control_line__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_1__1__Impl
	rule__Control_line__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getIDENTIFIERTerminalRuleCall_1_1()); }
	RULE_IDENTIFIER
{ after(grammarAccess.getControl_lineAccess().getIDENTIFIERTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Control_line__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_1__2__Impl
	rule__Control_line__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getReplacement_listParserRuleCall_1_2()); }
	rulereplacement_list
{ after(grammarAccess.getControl_lineAccess().getReplacement_listParserRuleCall_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Control_line__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getNew_lineParserRuleCall_1_3()); }
	rulenew_line
{ after(grammarAccess.getControl_lineAccess().getNew_lineParserRuleCall_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Control_line__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_2__0__Impl
	rule__Control_line__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getDefineKeyword_2_0()); }

	'#define' 

{ after(grammarAccess.getControl_lineAccess().getDefineKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Control_line__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_2__1__Impl
	rule__Control_line__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getIDENTIFIERTerminalRuleCall_2_1()); }
	RULE_IDENTIFIER
{ after(grammarAccess.getControl_lineAccess().getIDENTIFIERTerminalRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Control_line__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_2__2__Impl
	rule__Control_line__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getLparenParserRuleCall_2_2()); }
	rulelparen
{ after(grammarAccess.getControl_lineAccess().getLparenParserRuleCall_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Control_line__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_2__3__Impl
	rule__Control_line__Group_2__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getIDENTIFIERTerminalRuleCall_2_3()); }
(	RULE_IDENTIFIER)?
{ after(grammarAccess.getControl_lineAccess().getIDENTIFIERTerminalRuleCall_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Control_line__Group_2__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_2__4__Impl
	rule__Control_line__Group_2__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_2__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getRightParenthesisKeyword_2_4()); }

	')' 

{ after(grammarAccess.getControl_lineAccess().getRightParenthesisKeyword_2_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Control_line__Group_2__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_2__5__Impl
	rule__Control_line__Group_2__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_2__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getReplacement_listParserRuleCall_2_5()); }
	rulereplacement_list
{ after(grammarAccess.getControl_lineAccess().getReplacement_listParserRuleCall_2_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Control_line__Group_2__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_2__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_2__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getNew_lineParserRuleCall_2_6()); }
	rulenew_line
{ after(grammarAccess.getControl_lineAccess().getNew_lineParserRuleCall_2_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Control_line__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_3__0__Impl
	rule__Control_line__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getUndefKeyword_3_0()); }

	'#undef' 

{ after(grammarAccess.getControl_lineAccess().getUndefKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Control_line__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_3__1__Impl
	rule__Control_line__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getIDENTIFIERTerminalRuleCall_3_1()); }
	RULE_IDENTIFIER
{ after(grammarAccess.getControl_lineAccess().getIDENTIFIERTerminalRuleCall_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Control_line__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getNew_lineParserRuleCall_3_2()); }
	rulenew_line
{ after(grammarAccess.getControl_lineAccess().getNew_lineParserRuleCall_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Control_line__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_4__0__Impl
	rule__Control_line__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getLineKeyword_4_0()); }

	'#line' 

{ after(grammarAccess.getControl_lineAccess().getLineKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Control_line__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_4__1__Impl
	rule__Control_line__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getPp_tokensParserRuleCall_4_1()); }
	rulepp_tokens
{ after(grammarAccess.getControl_lineAccess().getPp_tokensParserRuleCall_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Control_line__Group_4__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_4__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getNew_lineParserRuleCall_4_2()); }
	rulenew_line
{ after(grammarAccess.getControl_lineAccess().getNew_lineParserRuleCall_4_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Control_line__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_5__0__Impl
	rule__Control_line__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getErrorKeyword_5_0()); }

	'#error' 

{ after(grammarAccess.getControl_lineAccess().getErrorKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Control_line__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_5__1__Impl
	rule__Control_line__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getPp_tokensParserRuleCall_5_1()); }
(	rulepp_tokens)?
{ after(grammarAccess.getControl_lineAccess().getPp_tokensParserRuleCall_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Control_line__Group_5__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_5__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_5__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getNew_lineParserRuleCall_5_2()); }
	rulenew_line
{ after(grammarAccess.getControl_lineAccess().getNew_lineParserRuleCall_5_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Control_line__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_6__0__Impl
	rule__Control_line__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getPragmaKeyword_6_0()); }

	'#pragma' 

{ after(grammarAccess.getControl_lineAccess().getPragmaKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Control_line__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_6__1__Impl
	rule__Control_line__Group_6__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getPp_tokensParserRuleCall_6_1()); }
(	rulepp_tokens)?
{ after(grammarAccess.getControl_lineAccess().getPp_tokensParserRuleCall_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Control_line__Group_6__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_6__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_6__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getNew_lineParserRuleCall_6_2()); }
	rulenew_line
{ after(grammarAccess.getControl_lineAccess().getNew_lineParserRuleCall_6_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Control_line__Group_7__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_7__0__Impl
	rule__Control_line__Group_7__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_7__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getNumberSignKeyword_7_0()); }

	'#' 

{ after(grammarAccess.getControl_lineAccess().getNumberSignKeyword_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Control_line__Group_7__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_7__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_7__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getNew_lineParserRuleCall_7_1()); }
	rulenew_line
{ after(grammarAccess.getControl_lineAccess().getNew_lineParserRuleCall_7_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Model__GreetingsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getGreetingsStatementParserRuleCall_0()); }
	rulestatement{ after(grammarAccess.getModelAccess().getGreetingsStatementParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}



RULE_HEADERNAME : (RULE_STRING|'<' ('a'..'z'|'A'..'Z'|'.')+ '>');

RULE_INTEGERLITERAL : ('1'..'9' ('0'..'9')* (('u'|'U') ('l'|'L'|'ll'|'LL')?|('l'|'L'|'ll'|'LL') ('u'|'U')?)?|'0' ('0'..'7')* (('u'|'U') ('l'|'L'|'ll'|'LL')?|('l'|'L'|'ll'|'LL') ('u'|'U')?)?|('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F')+ (('u'|'U') ('l'|'L'|'ll'|'LL')?|('l'|'L'|'ll'|'LL') ('u'|'U')?)?);

RULE_BOOLEANLITERAL : ('false'|'true');

RULE_POINTERLITERAL : 'nullptr';

RULE_PPNUMBER : ('0'..'9'|'.' '0'..'9') ('0'..'9'|('a'..'z'|'A'..'Z'|'_')|'e' ('+'|'-')|'E' ('+'|'-')|'.')*;

RULE_LITERAL : (RULE_INTEGERLITERAL|RULE_BOOLEANLITERAL|RULE_POINTERLITERAL);

RULE_KEYWORD : ('alignas'|'alignof'|'asm'|'auto'|'bool'|'break'|'case'|'catch'|'char'|'char16_t'|'char32_t'|'class'|'const'|'constexpr'|'const_cast'|'continue'|'decltype'|'default'|'delete'|'do'|'double'|'dynamic_cast'|'else'|'enum'|'explicit'|'export'|'extern'|'false'|'float'|'for'|'friend'|'goto'|'if'|'inline'|'int'|'long'|'mutable'|'namespace'|'new'|'noexcept'|'nullptr'|'operator'|'private'|'protected'|'public'|'register'|'reinterpret_cast'|'return'|'short'|'signed'|'sizeof'|'static'|'static_assert'|'static_cast'|'struct'|'switch'|'template'|'this'|'thread_local'|'throw'|'true'|'try'|'typedef'|'typeid'|'typename'|'union'|'unsigned'|'using'|'virtual'|'void'|'volatile'|'wchar_t'|'while');

RULE_PPOPORPUNC : ('{'|'}'|'['|']'|'#'|'##'|'('|')'|'<:'|':>'|'<%'|'%>'|'%:'|'%:%:'|';'|':'|'...'|'new'|'delete'|'?'|'::'|'.'|'.*'|'+'|'-'|'*'|'/'|'%'|'^'|'&'|'|'|'~'|'!'|'='|'<'|'>'|'+='|'-='|'*='|'/='|'%='|'^='|'&='|'|='|'<<'|'>>'|'<<='|'>>='|'=='|'!='|'<='|'>='|'&&'|'||'|'++'|'--'|','|'->*'|'->'|'and'|'and_eq'|'bitand'|'bitor'|'compl'|'not'|'not_eq'|'or'|'or_eq'|'xor'|'xor_eq');

RULE_IDENTIFIER : ('a'..'z'|'A'..'Z'|'_') ('0'..'9'|'A'..'Z'|'a'..'z'|'_')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


