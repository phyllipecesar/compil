/*
* generated by Xtext
*/
grammar InternalMyDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package org.xtext.example.mydsl.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {
 
 	private MyDslGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getBodyParserRuleCall()); }
	ruleBody
{ after(grammarAccess.getModelAccess().getBodyParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBody
entryRuleBody 
:
{ before(grammarAccess.getBodyRule()); }
	 ruleBody
{ after(grammarAccess.getBodyRule()); } 
	 EOF 
;

// Rule Body
ruleBody
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBodyAccess().getGroup()); }
(rule__Body__Group__0)
{ after(grammarAccess.getBodyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleelif_group
entryRuleelif_group 
:
{ before(grammarAccess.getElif_groupRule()); }
	 ruleelif_group
{ after(grammarAccess.getElif_groupRule()); } 
	 EOF 
;

// Rule elif_group
ruleelif_group
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElif_groupAccess().getGroup()); }
(rule__Elif_group__Group__0)
{ after(grammarAccess.getElif_groupAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleconstant_expression
entryRuleconstant_expression 
:
{ before(grammarAccess.getConstant_expressionRule()); }
	 ruleconstant_expression
{ after(grammarAccess.getConstant_expressionRule()); } 
	 EOF 
;

// Rule constant_expression
ruleconstant_expression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstant_expressionAccess().getConditional_expressionParserRuleCall()); }
	ruleconditional_expression
{ after(grammarAccess.getConstant_expressionAccess().getConditional_expressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleconditional_expression
entryRuleconditional_expression 
:
{ before(grammarAccess.getConditional_expressionRule()); }
	 ruleconditional_expression
{ after(grammarAccess.getConditional_expressionRule()); } 
	 EOF 
;

// Rule conditional_expression
ruleconditional_expression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConditional_expressionAccess().getTODOKeyword()); }

	'TODO' 

{ after(grammarAccess.getConditional_expressionAccess().getTODOKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulepreprocessing_file
entryRulepreprocessing_file 
:
{ before(grammarAccess.getPreprocessing_fileRule()); }
	 rulepreprocessing_file
{ after(grammarAccess.getPreprocessing_fileRule()); } 
	 EOF 
;

// Rule preprocessing_file
rulepreprocessing_file
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPreprocessing_fileAccess().getGroupParserRuleCall()); }
(	rulegroup)?
{ after(grammarAccess.getPreprocessing_fileAccess().getGroupParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulepreprocessing_token
entryRulepreprocessing_token 
:
{ before(grammarAccess.getPreprocessing_tokenRule()); }
	 rulepreprocessing_token
{ after(grammarAccess.getPreprocessing_tokenRule()); } 
	 EOF 
;

// Rule preprocessing_token
rulepreprocessing_token
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPreprocessing_tokenAccess().getHEADER_NAMETerminalRuleCall()); }
	RULE_HEADER_NAME
{ after(grammarAccess.getPreprocessing_tokenAccess().getHEADER_NAMETerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleelse_group
entryRuleelse_group 
:
{ before(grammarAccess.getElse_groupRule()); }
	 ruleelse_group
{ after(grammarAccess.getElse_groupRule()); } 
	 EOF 
;

// Rule else_group
ruleelse_group
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElse_groupAccess().getGroup()); }
(rule__Else_group__Group__0)
{ after(grammarAccess.getElse_groupAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleendif_line
entryRuleendif_line 
:
{ before(grammarAccess.getEndif_lineRule()); }
	 ruleendif_line
{ after(grammarAccess.getEndif_lineRule()); } 
	 EOF 
;

// Rule endif_line
ruleendif_line
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEndif_lineAccess().getEndifKeyword()); }

	'#endif' 

{ after(grammarAccess.getEndif_lineAccess().getEndifKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulecontrol_line
entryRulecontrol_line 
:
{ before(grammarAccess.getControl_lineRule()); }
	 rulecontrol_line
{ after(grammarAccess.getControl_lineRule()); } 
	 EOF 
;

// Rule control_line
rulecontrol_line
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getControl_lineAccess().getAlternatives()); }
(rule__Control_line__Alternatives)
{ after(grammarAccess.getControl_lineAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulelparen
entryRulelparen 
:
{ before(grammarAccess.getLparenRule()); }
	 rulelparen
{ after(grammarAccess.getLparenRule()); } 
	 EOF 
;

// Rule lparen
rulelparen
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLparenAccess().getLeftParenthesisKeyword()); }

	'(' 

{ after(grammarAccess.getLparenAccess().getLeftParenthesisKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulereplacement_list
entryRulereplacement_list 
:
{ before(grammarAccess.getReplacement_listRule()); }
	 rulereplacement_list
{ after(grammarAccess.getReplacement_listRule()); } 
	 EOF 
;

// Rule replacement_list
rulereplacement_list
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReplacement_listAccess().getPp_tokensParserRuleCall()); }
(	rulepp_tokens)?
{ after(grammarAccess.getReplacement_listAccess().getPp_tokensParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulepp_tokens
entryRulepp_tokens 
:
{ before(grammarAccess.getPp_tokensRule()); }
	 rulepp_tokens
{ after(grammarAccess.getPp_tokensRule()); } 
	 EOF 
;

// Rule pp_tokens
rulepp_tokens
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getPp_tokensAccess().getPreprocessing_tokenParserRuleCall()); }
(	rulepreprocessing_token)
{ after(grammarAccess.getPp_tokensAccess().getPreprocessing_tokenParserRuleCall()); }
)
(
{ before(grammarAccess.getPp_tokensAccess().getPreprocessing_tokenParserRuleCall()); }
(	rulepreprocessing_token)*
{ after(grammarAccess.getPp_tokensAccess().getPreprocessing_tokenParserRuleCall()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulegroup
entryRulegroup 
:
{ before(grammarAccess.getGroupRule()); }
	 rulegroup
{ after(grammarAccess.getGroupRule()); } 
	 EOF 
;

// Rule group
rulegroup
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getGroupAccess().getGroup_partParserRuleCall()); }
(	rulegroup_part)
{ after(grammarAccess.getGroupAccess().getGroup_partParserRuleCall()); }
)
(
{ before(grammarAccess.getGroupAccess().getGroup_partParserRuleCall()); }
(	rulegroup_part)*
{ after(grammarAccess.getGroupAccess().getGroup_partParserRuleCall()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulegroup_part
entryRulegroup_part 
:
{ before(grammarAccess.getGroup_partRule()); }
	 rulegroup_part
{ after(grammarAccess.getGroup_partRule()); } 
	 EOF 
;

// Rule group_part
rulegroup_part
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGroup_partAccess().getAlternatives()); }
(rule__Group_part__Alternatives)
{ after(grammarAccess.getGroup_partAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleif_action
entryRuleif_action 
:
{ before(grammarAccess.getIf_actionRule()); }
	 ruleif_action
{ after(grammarAccess.getIf_actionRule()); } 
	 EOF 
;

// Rule if_action
ruleif_action
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIf_actionAccess().getGroup()); }
(rule__If_action__Group__0)
{ after(grammarAccess.getIf_actionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleif_group
entryRuleif_group 
:
{ before(grammarAccess.getIf_groupRule()); }
	 ruleif_group
{ after(grammarAccess.getIf_groupRule()); } 
	 EOF 
;

// Rule if_group
ruleif_group
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIf_groupAccess().getAlternatives()); }
(rule__If_group__Alternatives)
{ after(grammarAccess.getIf_groupAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleelif_groups
entryRuleelif_groups 
:
{ before(grammarAccess.getElif_groupsRule()); }
	 ruleelif_groups
{ after(grammarAccess.getElif_groupsRule()); } 
	 EOF 
;

// Rule elif_groups
ruleelif_groups
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getElif_groupsAccess().getElif_groupParserRuleCall()); }
(	ruleelif_group)
{ after(grammarAccess.getElif_groupsAccess().getElif_groupParserRuleCall()); }
)
(
{ before(grammarAccess.getElif_groupsAccess().getElif_groupParserRuleCall()); }
(	ruleelif_group)*
{ after(grammarAccess.getElif_groupsAccess().getElif_groupParserRuleCall()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionDeclaration
entryRuleFunctionDeclaration 
:
{ before(grammarAccess.getFunctionDeclarationRule()); }
	 ruleFunctionDeclaration
{ after(grammarAccess.getFunctionDeclarationRule()); } 
	 EOF 
;

// Rule FunctionDeclaration
ruleFunctionDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getGroup()); }
(rule__FunctionDeclaration__Group__0)
{ after(grammarAccess.getFunctionDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameter
entryRuleParameter 
:
{ before(grammarAccess.getParameterRule()); }
	 ruleParameter
{ after(grammarAccess.getParameterRule()); } 
	 EOF 
;

// Rule Parameter
ruleParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterAccess().getGroup()); }
(rule__Parameter__Group__0)
{ after(grammarAccess.getParameterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVarDecl
entryRuleVarDecl 
:
{ before(grammarAccess.getVarDeclRule()); }
	 ruleVarDecl
{ after(grammarAccess.getVarDeclRule()); } 
	 EOF 
;

// Rule VarDecl
ruleVarDecl
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVarDeclAccess().getGroup()); }
(rule__VarDecl__Group__0)
{ after(grammarAccess.getVarDeclAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleType
entryRuleType 
:
{ before(grammarAccess.getTypeRule()); }
	 ruleType
{ after(grammarAccess.getTypeRule()); } 
	 EOF 
;

// Rule Type
ruleType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeAccess().getGroup()); }
(rule__Type__Group__0)
{ after(grammarAccess.getTypeAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulesimple_type_specifier
entryRulesimple_type_specifier 
:
{ before(grammarAccess.getSimple_type_specifierRule()); }
	 rulesimple_type_specifier
{ after(grammarAccess.getSimple_type_specifierRule()); } 
	 EOF 
;

// Rule simple_type_specifier
rulesimple_type_specifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimple_type_specifierAccess().getAlternatives()); }
(rule__Simple_type_specifier__Alternatives)
{ after(grammarAccess.getSimple_type_specifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulestatement
entryRulestatement 
:
{ before(grammarAccess.getStatementRule()); }
	 rulestatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule statement
rulestatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatementAccess().getAlternatives()); }
(rule__Statement__Alternatives)
{ after(grammarAccess.getStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulesimple_declaration
entryRulesimple_declaration 
:
{ before(grammarAccess.getSimple_declarationRule()); }
	 rulesimple_declaration
{ after(grammarAccess.getSimple_declarationRule()); } 
	 EOF 
;

// Rule simple_declaration
rulesimple_declaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimple_declarationAccess().getGroup()); }
(rule__Simple_declaration__Group__0)
{ after(grammarAccess.getSimple_declarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulejump_statement
entryRulejump_statement 
:
{ before(grammarAccess.getJump_statementRule()); }
	 rulejump_statement
{ after(grammarAccess.getJump_statementRule()); } 
	 EOF 
;

// Rule jump_statement
rulejump_statement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getJump_statementAccess().getAlternatives()); }
(rule__Jump_statement__Alternatives)
{ after(grammarAccess.getJump_statementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuledeclaration_statement
entryRuledeclaration_statement 
:
{ before(grammarAccess.getDeclaration_statementRule()); }
	 ruledeclaration_statement
{ after(grammarAccess.getDeclaration_statementRule()); } 
	 EOF 
;

// Rule declaration_statement
ruledeclaration_statement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getDeclaration_statementAccess().getVariaveisAssignment()); }
(rule__Declaration_statement__VariaveisAssignment)
{ after(grammarAccess.getDeclaration_statementAccess().getVariaveisAssignment()); }
)
(
{ before(grammarAccess.getDeclaration_statementAccess().getVariaveisAssignment()); }
(rule__Declaration_statement__VariaveisAssignment)*
{ after(grammarAccess.getDeclaration_statementAccess().getVariaveisAssignment()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleblock_declaration
entryRuleblock_declaration 
:
{ before(grammarAccess.getBlock_declarationRule()); }
	 ruleblock_declaration
{ after(grammarAccess.getBlock_declarationRule()); } 
	 EOF 
;

// Rule block_declaration
ruleblock_declaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBlock_declarationAccess().getGroup()); }
(rule__Block_declaration__Group__0)
{ after(grammarAccess.getBlock_declarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRulePREPROCESSING_OP_OR_PUNC
entryRulePREPROCESSING_OP_OR_PUNC 
:
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCRule()); }
	 rulePREPROCESSING_OP_OR_PUNC
{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCRule()); } 
	 EOF 
;

// Rule PREPROCESSING_OP_OR_PUNC
rulePREPROCESSING_OP_OR_PUNC
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getAlternatives()); }
(rule__PREPROCESSING_OP_OR_PUNC__Alternatives)
{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteral
entryRuleLiteral 
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
(rule__Literal__Alternatives)
{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleDeclaration
entryRuleDeclaration 
:
{ before(grammarAccess.getDeclarationRule()); }
	 ruleDeclaration
{ after(grammarAccess.getDeclarationRule()); } 
	 EOF 
;

// Rule Declaration
ruleDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclarationAccess().getGroup()); }
(rule__Declaration__Group__0)
{ after(grammarAccess.getDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBlockDeclaration
entryRuleBlockDeclaration 
:
{ before(grammarAccess.getBlockDeclarationRule()); }
	 ruleBlockDeclaration
{ after(grammarAccess.getBlockDeclarationRule()); } 
	 EOF 
;

// Rule BlockDeclaration
ruleBlockDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBlockDeclarationAccess().getAlternatives()); }
(rule__BlockDeclaration__Alternatives)
{ after(grammarAccess.getBlockDeclarationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAliasDeclaration
entryRuleAliasDeclaration 
:
{ before(grammarAccess.getAliasDeclarationRule()); }
	 ruleAliasDeclaration
{ after(grammarAccess.getAliasDeclarationRule()); } 
	 EOF 
;

// Rule AliasDeclaration
ruleAliasDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAliasDeclarationAccess().getGroup()); }
(rule__AliasDeclaration__Group__0)
{ after(grammarAccess.getAliasDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimpleDeclaration
entryRuleSimpleDeclaration 
:
{ before(grammarAccess.getSimpleDeclarationRule()); }
	 ruleSimpleDeclaration
{ after(grammarAccess.getSimpleDeclarationRule()); } 
	 EOF 
;

// Rule SimpleDeclaration
ruleSimpleDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimpleDeclarationAccess().getGroup()); }
(rule__SimpleDeclaration__Group__0)
{ after(grammarAccess.getSimpleDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimpleOrFunctionDeclaration
entryRuleSimpleOrFunctionDeclaration 
:
{ before(grammarAccess.getSimpleOrFunctionDeclarationRule()); }
	 ruleSimpleOrFunctionDeclaration
{ after(grammarAccess.getSimpleOrFunctionDeclarationRule()); } 
	 EOF 
;

// Rule SimpleOrFunctionDeclaration
ruleSimpleOrFunctionDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimpleOrFunctionDeclarationAccess().getGroup()); }
(rule__SimpleOrFunctionDeclaration__Group__0)
{ after(grammarAccess.getSimpleOrFunctionDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimpleDeclarationSuffix
entryRuleSimpleDeclarationSuffix 
:
{ before(grammarAccess.getSimpleDeclarationSuffixRule()); }
	 ruleSimpleDeclarationSuffix
{ after(grammarAccess.getSimpleDeclarationSuffixRule()); } 
	 EOF 
;

// Rule SimpleDeclarationSuffix
ruleSimpleDeclarationSuffix
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimpleDeclarationSuffixAccess().getGroup()); }
(rule__SimpleDeclarationSuffix__Group__0)
{ after(grammarAccess.getSimpleDeclarationSuffixAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionDeclarationSuffix
entryRuleFunctionDeclarationSuffix 
:
{ before(grammarAccess.getFunctionDeclarationSuffixRule()); }
	 ruleFunctionDeclarationSuffix
{ after(grammarAccess.getFunctionDeclarationSuffixRule()); } 
	 EOF 
;

// Rule FunctionDeclarationSuffix
ruleFunctionDeclarationSuffix
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionDeclarationSuffixAccess().getGroup()); }
(rule__FunctionDeclarationSuffix__Group__0)
{ after(grammarAccess.getFunctionDeclarationSuffixAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStaticAssertDeclaration
entryRuleStaticAssertDeclaration 
:
{ before(grammarAccess.getStaticAssertDeclarationRule()); }
	 ruleStaticAssertDeclaration
{ after(grammarAccess.getStaticAssertDeclarationRule()); } 
	 EOF 
;

// Rule StaticAssertDeclaration
ruleStaticAssertDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStaticAssertDeclarationAccess().getGroup()); }
(rule__StaticAssertDeclaration__Group__0)
{ after(grammarAccess.getStaticAssertDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclarationSpecifier
entryRuleDeclarationSpecifier 
:
{ before(grammarAccess.getDeclarationSpecifierRule()); }
	 ruleDeclarationSpecifier
{ after(grammarAccess.getDeclarationSpecifierRule()); } 
	 EOF 
;

// Rule DeclarationSpecifier
ruleDeclarationSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclarationSpecifierAccess().getAlternatives()); }
(rule__DeclarationSpecifier__Alternatives)
{ after(grammarAccess.getDeclarationSpecifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStorageClassSpecifier
entryRuleStorageClassSpecifier 
:
{ before(grammarAccess.getStorageClassSpecifierRule()); }
	 ruleStorageClassSpecifier
{ after(grammarAccess.getStorageClassSpecifierRule()); } 
	 EOF 
;

// Rule StorageClassSpecifier
ruleStorageClassSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStorageClassSpecifierAccess().getAlternatives()); }
(rule__StorageClassSpecifier__Alternatives)
{ after(grammarAccess.getStorageClassSpecifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionSpecifier
entryRuleFunctionSpecifier 
:
{ before(grammarAccess.getFunctionSpecifierRule()); }
	 ruleFunctionSpecifier
{ after(grammarAccess.getFunctionSpecifierRule()); } 
	 EOF 
;

// Rule FunctionSpecifier
ruleFunctionSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionSpecifierAccess().getAlternatives()); }
(rule__FunctionSpecifier__Alternatives)
{ after(grammarAccess.getFunctionSpecifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeSpecifier
entryRuleTypeSpecifier 
:
{ before(grammarAccess.getTypeSpecifierRule()); }
	 ruleTypeSpecifier
{ after(grammarAccess.getTypeSpecifierRule()); } 
	 EOF 
;

// Rule TypeSpecifier
ruleTypeSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeSpecifierAccess().getAlternatives()); }
(rule__TypeSpecifier__Alternatives)
{ after(grammarAccess.getTypeSpecifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTrailingTypeSpecifier
entryRuleTrailingTypeSpecifier 
:
{ before(grammarAccess.getTrailingTypeSpecifierRule()); }
	 ruleTrailingTypeSpecifier
{ after(grammarAccess.getTrailingTypeSpecifierRule()); } 
	 EOF 
;

// Rule TrailingTypeSpecifier
ruleTrailingTypeSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTrailingTypeSpecifierAccess().getAlternatives()); }
(rule__TrailingTypeSpecifier__Alternatives)
{ after(grammarAccess.getTrailingTypeSpecifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimpleTypeSpecifier
entryRuleSimpleTypeSpecifier 
:
{ before(grammarAccess.getSimpleTypeSpecifierRule()); }
	 ruleSimpleTypeSpecifier
{ after(grammarAccess.getSimpleTypeSpecifierRule()); } 
	 EOF 
;

// Rule SimpleTypeSpecifier
ruleSimpleTypeSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getAlternatives()); }
(rule__SimpleTypeSpecifier__Alternatives)
{ after(grammarAccess.getSimpleTypeSpecifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeName
entryRuleTypeName 
:
{ before(grammarAccess.getTypeNameRule()); }
	 ruleTypeName
{ after(grammarAccess.getTypeNameRule()); } 
	 EOF 
;

// Rule TypeName
ruleTypeName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeNameAccess().getAlternatives()); }
(rule__TypeName__Alternatives)
{ after(grammarAccess.getTypeNameAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclarationTypeSpecifier
entryRuleDeclarationTypeSpecifier 
:
{ before(grammarAccess.getDeclarationTypeSpecifierRule()); }
	 ruleDeclarationTypeSpecifier
{ after(grammarAccess.getDeclarationTypeSpecifierRule()); } 
	 EOF 
;

// Rule DeclarationTypeSpecifier
ruleDeclarationTypeSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclarationTypeSpecifierAccess().getGroup()); }
(rule__DeclarationTypeSpecifier__Group__0)
{ after(grammarAccess.getDeclarationTypeSpecifierAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleElaboratedTypeSpecifier
entryRuleElaboratedTypeSpecifier 
:
{ before(grammarAccess.getElaboratedTypeSpecifierRule()); }
	 ruleElaboratedTypeSpecifier
{ after(grammarAccess.getElaboratedTypeSpecifierRule()); } 
	 EOF 
;

// Rule ElaboratedTypeSpecifier
ruleElaboratedTypeSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getElaboratedTypeSpecifierAccess().getGroup()); }
(rule__ElaboratedTypeSpecifier__Group__0)
{ after(grammarAccess.getElaboratedTypeSpecifierAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleEnumSpecifier
entryRuleEnumSpecifier 
:
{ before(grammarAccess.getEnumSpecifierRule()); }
	 ruleEnumSpecifier
{ after(grammarAccess.getEnumSpecifierRule()); } 
	 EOF 
;

// Rule EnumSpecifier
ruleEnumSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumSpecifierAccess().getGroup()); }
(rule__EnumSpecifier__Group__0)
{ after(grammarAccess.getEnumSpecifierAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumHead
entryRuleEnumHead 
:
{ before(grammarAccess.getEnumHeadRule()); }
	 ruleEnumHead
{ after(grammarAccess.getEnumHeadRule()); } 
	 EOF 
;

// Rule EnumHead
ruleEnumHead
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumHeadAccess().getGroup()); }
(rule__EnumHead__Group__0)
{ after(grammarAccess.getEnumHeadAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumKey
entryRuleEnumKey 
:
{ before(grammarAccess.getEnumKeyRule()); }
	 ruleEnumKey
{ after(grammarAccess.getEnumKeyRule()); } 
	 EOF 
;

// Rule EnumKey
ruleEnumKey
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumKeyAccess().getAlternatives()); }
(rule__EnumKey__Alternatives)
{ after(grammarAccess.getEnumKeyAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumBase
entryRuleEnumBase 
:
{ before(grammarAccess.getEnumBaseRule()); }
	 ruleEnumBase
{ after(grammarAccess.getEnumBaseRule()); } 
	 EOF 
;

// Rule EnumBase
ruleEnumBase
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumBaseAccess().getGroup()); }
(rule__EnumBase__Group__0)
{ after(grammarAccess.getEnumBaseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumeratorList
entryRuleEnumeratorList 
:
{ before(grammarAccess.getEnumeratorListRule()); }
	 ruleEnumeratorList
{ after(grammarAccess.getEnumeratorListRule()); } 
	 EOF 
;

// Rule EnumeratorList
ruleEnumeratorList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumeratorListAccess().getGroup()); }
(rule__EnumeratorList__Group__0)
{ after(grammarAccess.getEnumeratorListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumerationDefinition
entryRuleEnumerationDefinition 
:
{ before(grammarAccess.getEnumerationDefinitionRule()); }
	 ruleEnumerationDefinition
{ after(grammarAccess.getEnumerationDefinitionRule()); } 
	 EOF 
;

// Rule EnumerationDefinition
ruleEnumerationDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumerationDefinitionAccess().getGroup()); }
(rule__EnumerationDefinition__Group__0)
{ after(grammarAccess.getEnumerationDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumerator
entryRuleEnumerator 
:
{ before(grammarAccess.getEnumeratorRule()); }
	 ruleEnumerator
{ after(grammarAccess.getEnumeratorRule()); } 
	 EOF 
;

// Rule Enumerator
ruleEnumerator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumeratorAccess().getIDTerminalRuleCall()); }
	RULE_ID
{ after(grammarAccess.getEnumeratorAccess().getIDTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNamespaceDefinition
entryRuleNamespaceDefinition 
:
{ before(grammarAccess.getNamespaceDefinitionRule()); }
	 ruleNamespaceDefinition
{ after(grammarAccess.getNamespaceDefinitionRule()); } 
	 EOF 
;

// Rule NamespaceDefinition
ruleNamespaceDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNamespaceDefinitionAccess().getGroup()); }
(rule__NamespaceDefinition__Group__0)
{ after(grammarAccess.getNamespaceDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNamespaceAliasDefinition
entryRuleNamespaceAliasDefinition 
:
{ before(grammarAccess.getNamespaceAliasDefinitionRule()); }
	 ruleNamespaceAliasDefinition
{ after(grammarAccess.getNamespaceAliasDefinitionRule()); } 
	 EOF 
;

// Rule NamespaceAliasDefinition
ruleNamespaceAliasDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNamespaceAliasDefinitionAccess().getGroup()); }
(rule__NamespaceAliasDefinition__Group__0)
{ after(grammarAccess.getNamespaceAliasDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedNamespaceSpecifier
entryRuleQualifiedNamespaceSpecifier 
:
{ before(grammarAccess.getQualifiedNamespaceSpecifierRule()); }
	 ruleQualifiedNamespaceSpecifier
{ after(grammarAccess.getQualifiedNamespaceSpecifierRule()); } 
	 EOF 
;

// Rule QualifiedNamespaceSpecifier
ruleQualifiedNamespaceSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNamespaceSpecifierAccess().getGroup()); }
(rule__QualifiedNamespaceSpecifier__Group__0)
{ after(grammarAccess.getQualifiedNamespaceSpecifierAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUsingDeclaration
entryRuleUsingDeclaration 
:
{ before(grammarAccess.getUsingDeclarationRule()); }
	 ruleUsingDeclaration
{ after(grammarAccess.getUsingDeclarationRule()); } 
	 EOF 
;

// Rule UsingDeclaration
ruleUsingDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUsingDeclarationAccess().getGroup()); }
(rule__UsingDeclaration__Group__0)
{ after(grammarAccess.getUsingDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleAsmDefinition
entryRuleAsmDefinition 
:
{ before(grammarAccess.getAsmDefinitionRule()); }
	 ruleAsmDefinition
{ after(grammarAccess.getAsmDefinitionRule()); } 
	 EOF 
;

// Rule AsmDefinition
ruleAsmDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAsmDefinitionAccess().getGroup()); }
(rule__AsmDefinition__Group__0)
{ after(grammarAccess.getAsmDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLinkageSpecification
entryRuleLinkageSpecification 
:
{ before(grammarAccess.getLinkageSpecificationRule()); }
	 ruleLinkageSpecification
{ after(grammarAccess.getLinkageSpecificationRule()); } 
	 EOF 
;

// Rule LinkageSpecification
ruleLinkageSpecification
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLinkageSpecificationAccess().getGroup()); }
(rule__LinkageSpecification__Group__0)
{ after(grammarAccess.getLinkageSpecificationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInitDeclaratorList
entryRuleInitDeclaratorList 
:
{ before(grammarAccess.getInitDeclaratorListRule()); }
	 ruleInitDeclaratorList
{ after(grammarAccess.getInitDeclaratorListRule()); } 
	 EOF 
;

// Rule InitDeclaratorList
ruleInitDeclaratorList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInitDeclaratorListAccess().getGroup()); }
(rule__InitDeclaratorList__Group__0)
{ after(grammarAccess.getInitDeclaratorListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInitDeclarator
entryRuleInitDeclarator 
:
{ before(grammarAccess.getInitDeclaratorRule()); }
	 ruleInitDeclarator
{ after(grammarAccess.getInitDeclaratorRule()); } 
	 EOF 
;

// Rule InitDeclarator
ruleInitDeclarator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInitDeclaratorAccess().getGroup()); }
(rule__InitDeclarator__Group__0)
{ after(grammarAccess.getInitDeclaratorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionDeclarator
entryRuleFunctionDeclarator 
:
{ before(grammarAccess.getFunctionDeclaratorRule()); }
	 ruleFunctionDeclarator
{ after(grammarAccess.getFunctionDeclaratorRule()); } 
	 EOF 
;

// Rule FunctionDeclarator
ruleFunctionDeclarator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionDeclaratorAccess().getGroup()); }
(rule__FunctionDeclarator__Group__0)
{ after(grammarAccess.getFunctionDeclaratorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParametersAndQualifiers
entryRuleParametersAndQualifiers 
:
{ before(grammarAccess.getParametersAndQualifiersRule()); }
	 ruleParametersAndQualifiers
{ after(grammarAccess.getParametersAndQualifiersRule()); } 
	 EOF 
;

// Rule ParametersAndQualifiers
ruleParametersAndQualifiers
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParametersAndQualifiersAccess().getGroup()); }
(rule__ParametersAndQualifiers__Group__0)
{ after(grammarAccess.getParametersAndQualifiersAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclaratorId
entryRuleDeclaratorId 
:
{ before(grammarAccess.getDeclaratorIdRule()); }
	 ruleDeclaratorId
{ after(grammarAccess.getDeclaratorIdRule()); } 
	 EOF 
;

// Rule DeclaratorId
ruleDeclaratorId
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclaratorIdAccess().getGroup()); }
(rule__DeclaratorId__Group__0)
{ after(grammarAccess.getDeclaratorIdAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeId
entryRuleTypeId 
:
{ before(grammarAccess.getTypeIdRule()); }
	 ruleTypeId
{ after(grammarAccess.getTypeIdRule()); } 
	 EOF 
;

// Rule TypeId
ruleTypeId
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getTypeIdAccess().getTypeSpecifierParserRuleCall()); }
(	ruleTypeSpecifier)
{ after(grammarAccess.getTypeIdAccess().getTypeSpecifierParserRuleCall()); }
)
(
{ before(grammarAccess.getTypeIdAccess().getTypeSpecifierParserRuleCall()); }
(	ruleTypeSpecifier)*
{ after(grammarAccess.getTypeIdAccess().getTypeSpecifierParserRuleCall()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameterDeclarationClause
entryRuleParameterDeclarationClause 
:
{ before(grammarAccess.getParameterDeclarationClauseRule()); }
	 ruleParameterDeclarationClause
{ after(grammarAccess.getParameterDeclarationClauseRule()); } 
	 EOF 
;

// Rule ParameterDeclarationClause
ruleParameterDeclarationClause
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterDeclarationClauseAccess().getAlternatives()); }
(rule__ParameterDeclarationClause__Alternatives)
{ after(grammarAccess.getParameterDeclarationClauseAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameterDeclarationList
entryRuleParameterDeclarationList 
:
{ before(grammarAccess.getParameterDeclarationListRule()); }
	 ruleParameterDeclarationList
{ after(grammarAccess.getParameterDeclarationListRule()); } 
	 EOF 
;

// Rule ParameterDeclarationList
ruleParameterDeclarationList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterDeclarationListAccess().getGroup()); }
(rule__ParameterDeclarationList__Group__0)
{ after(grammarAccess.getParameterDeclarationListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameterDeclaration
entryRuleParameterDeclaration 
:
{ before(grammarAccess.getParameterDeclarationRule()); }
	 ruleParameterDeclaration
{ after(grammarAccess.getParameterDeclarationRule()); } 
	 EOF 
;

// Rule ParameterDeclaration
ruleParameterDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterDeclarationAccess().getGroup()); }
(rule__ParameterDeclaration__Group__0)
{ after(grammarAccess.getParameterDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionBody
entryRuleFunctionBody 
:
{ before(grammarAccess.getFunctionBodyRule()); }
	 ruleFunctionBody
{ after(grammarAccess.getFunctionBodyRule()); } 
	 EOF 
;

// Rule FunctionBody
ruleFunctionBody
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionBodyAccess().getAlternatives()); }
(rule__FunctionBody__Alternatives)
{ after(grammarAccess.getFunctionBodyAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperatorFunctionId
entryRuleOperatorFunctionId 
:
{ before(grammarAccess.getOperatorFunctionIdRule()); }
	 ruleOperatorFunctionId
{ after(grammarAccess.getOperatorFunctionIdRule()); } 
	 EOF 
;

// Rule OperatorFunctionId
ruleOperatorFunctionId
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperatorFunctionIdAccess().getGroup()); }
(rule__OperatorFunctionId__Group__0)
{ after(grammarAccess.getOperatorFunctionIdAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOverloadableOperator
entryRuleOverloadableOperator 
:
{ before(grammarAccess.getOverloadableOperatorRule()); }
	 ruleOverloadableOperator
{ after(grammarAccess.getOverloadableOperatorRule()); } 
	 EOF 
;

// Rule OverloadableOperator
ruleOverloadableOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOverloadableOperatorAccess().getAlternatives()); }
(rule__OverloadableOperator__Alternatives)
{ after(grammarAccess.getOverloadableOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteralOperatorId
entryRuleLiteralOperatorId 
:
{ before(grammarAccess.getLiteralOperatorIdRule()); }
	 ruleLiteralOperatorId
{ after(grammarAccess.getLiteralOperatorIdRule()); } 
	 EOF 
;

// Rule LiteralOperatorId
ruleLiteralOperatorId
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralOperatorIdAccess().getGroup()); }
(rule__LiteralOperatorId__Group__0)
{ after(grammarAccess.getLiteralOperatorIdAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTemplateDeclaration
entryRuleTemplateDeclaration 
:
{ before(grammarAccess.getTemplateDeclarationRule()); }
	 ruleTemplateDeclaration
{ after(grammarAccess.getTemplateDeclarationRule()); } 
	 EOF 
;

// Rule TemplateDeclaration
ruleTemplateDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTemplateDeclarationAccess().getGroup()); }
(rule__TemplateDeclaration__Group__0)
{ after(grammarAccess.getTemplateDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleTemplateParameter
entryRuleTemplateParameter 
:
{ before(grammarAccess.getTemplateParameterRule()); }
	 ruleTemplateParameter
{ after(grammarAccess.getTemplateParameterRule()); } 
	 EOF 
;

// Rule TemplateParameter
ruleTemplateParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTemplateParameterAccess().getAlternatives()); }
(rule__TemplateParameter__Alternatives)
{ after(grammarAccess.getTemplateParameterAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeParameter
entryRuleTypeParameter 
:
{ before(grammarAccess.getTypeParameterRule()); }
	 ruleTypeParameter
{ after(grammarAccess.getTypeParameterRule()); } 
	 EOF 
;

// Rule TypeParameter
ruleTypeParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeParameterAccess().getGroup()); }
(rule__TypeParameter__Group__0)
{ after(grammarAccess.getTypeParameterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimpleTemplateId
entryRuleSimpleTemplateId 
:
{ before(grammarAccess.getSimpleTemplateIdRule()); }
	 ruleSimpleTemplateId
{ after(grammarAccess.getSimpleTemplateIdRule()); } 
	 EOF 
;

// Rule SimpleTemplateId
ruleSimpleTemplateId
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimpleTemplateIdAccess().getGroup()); }
(rule__SimpleTemplateId__Group__0)
{ after(grammarAccess.getSimpleTemplateIdAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleTemplateArgumentList
entryRuleTemplateArgumentList 
:
{ before(grammarAccess.getTemplateArgumentListRule()); }
	 ruleTemplateArgumentList
{ after(grammarAccess.getTemplateArgumentListRule()); } 
	 EOF 
;

// Rule TemplateArgumentList
ruleTemplateArgumentList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTemplateArgumentListAccess().getGroup()); }
(rule__TemplateArgumentList__Group__0)
{ after(grammarAccess.getTemplateArgumentListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTemplateArgument
entryRuleTemplateArgument 
:
{ before(grammarAccess.getTemplateArgumentRule()); }
	 ruleTemplateArgument
{ after(grammarAccess.getTemplateArgumentRule()); } 
	 EOF 
;

// Rule TemplateArgument
ruleTemplateArgument
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTemplateArgumentAccess().getAlternatives()); }
(rule__TemplateArgument__Alternatives)
{ after(grammarAccess.getTemplateArgumentAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypenameSpecifier
entryRuleTypenameSpecifier 
:
{ before(grammarAccess.getTypenameSpecifierRule()); }
	 ruleTypenameSpecifier
{ after(grammarAccess.getTypenameSpecifierRule()); } 
	 EOF 
;

// Rule TypenameSpecifier
ruleTypenameSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypenameSpecifierAccess().getGroup()); }
(rule__TypenameSpecifier__Group__0)
{ after(grammarAccess.getTypenameSpecifierAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleFunctionTryBlock
entryRuleFunctionTryBlock 
:
{ before(grammarAccess.getFunctionTryBlockRule()); }
	 ruleFunctionTryBlock
{ after(grammarAccess.getFunctionTryBlockRule()); } 
	 EOF 
;

// Rule FunctionTryBlock
ruleFunctionTryBlock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionTryBlockAccess().getGroup()); }
(rule__FunctionTryBlock__Group__0)
{ after(grammarAccess.getFunctionTryBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleHandler
entryRuleHandler 
:
{ before(grammarAccess.getHandlerRule()); }
	 ruleHandler
{ after(grammarAccess.getHandlerRule()); } 
	 EOF 
;

// Rule Handler
ruleHandler
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHandlerAccess().getGroup()); }
(rule__Handler__Group__0)
{ after(grammarAccess.getHandlerAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExceptionDeclaration
entryRuleExceptionDeclaration 
:
{ before(grammarAccess.getExceptionDeclarationRule()); }
	 ruleExceptionDeclaration
{ after(grammarAccess.getExceptionDeclarationRule()); } 
	 EOF 
;

// Rule ExceptionDeclaration
ruleExceptionDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExceptionDeclarationAccess().getAlternatives()); }
(rule__ExceptionDeclaration__Alternatives)
{ after(grammarAccess.getExceptionDeclarationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleExceptionSpecification
entryRuleExceptionSpecification 
:
{ before(grammarAccess.getExceptionSpecificationRule()); }
	 ruleExceptionSpecification
{ after(grammarAccess.getExceptionSpecificationRule()); } 
	 EOF 
;

// Rule ExceptionSpecification
ruleExceptionSpecification
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExceptionSpecificationAccess().getAlternatives()); }
(rule__ExceptionSpecification__Alternatives)
{ after(grammarAccess.getExceptionSpecificationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDynamicExceptionSpecification
entryRuleDynamicExceptionSpecification 
:
{ before(grammarAccess.getDynamicExceptionSpecificationRule()); }
	 ruleDynamicExceptionSpecification
{ after(grammarAccess.getDynamicExceptionSpecificationRule()); } 
	 EOF 
;

// Rule DynamicExceptionSpecification
ruleDynamicExceptionSpecification
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDynamicExceptionSpecificationAccess().getGroup()); }
(rule__DynamicExceptionSpecification__Group__0)
{ after(grammarAccess.getDynamicExceptionSpecificationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNoexceptSpecification
entryRuleNoexceptSpecification 
:
{ before(grammarAccess.getNoexceptSpecificationRule()); }
	 ruleNoexceptSpecification
{ after(grammarAccess.getNoexceptSpecificationRule()); } 
	 EOF 
;

// Rule NoexceptSpecification
ruleNoexceptSpecification
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNoexceptSpecificationAccess().getGroup()); }
(rule__NoexceptSpecification__Group__0)
{ after(grammarAccess.getNoexceptSpecificationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getExpressionKeyword()); }

	'Expression' 

{ after(grammarAccess.getExpressionAccess().getExpressionKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClassKey
entryRuleClassKey 
:
{ before(grammarAccess.getClassKeyRule()); }
	 ruleClassKey
{ after(grammarAccess.getClassKeyRule()); } 
	 EOF 
;

// Rule ClassKey
ruleClassKey
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClassKeyAccess().getClassKeyKeyword()); }

	'ClassKey' 

{ after(grammarAccess.getClassKeyAccess().getClassKeyKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExplicitSpecialization
entryRuleExplicitSpecialization 
:
{ before(grammarAccess.getExplicitSpecializationRule()); }
	 ruleExplicitSpecialization
{ after(grammarAccess.getExplicitSpecializationRule()); } 
	 EOF 
;

// Rule ExplicitSpecialization
ruleExplicitSpecialization
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExplicitSpecializationAccess().getExplicitSpecializationKeyword()); }

	'ExplicitSpecialization' 

{ after(grammarAccess.getExplicitSpecializationAccess().getExplicitSpecializationKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExplicitInstantiation
entryRuleExplicitInstantiation 
:
{ before(grammarAccess.getExplicitInstantiationRule()); }
	 ruleExplicitInstantiation
{ after(grammarAccess.getExplicitInstantiationRule()); } 
	 EOF 
;

// Rule ExplicitInstantiation
ruleExplicitInstantiation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExplicitInstantiationAccess().getExplicitInstantiationKeyword()); }

	'ExplicitInstantiation' 

{ after(grammarAccess.getExplicitInstantiationAccess().getExplicitInstantiationKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClassSpecifier
entryRuleClassSpecifier 
:
{ before(grammarAccess.getClassSpecifierRule()); }
	 ruleClassSpecifier
{ after(grammarAccess.getClassSpecifierRule()); } 
	 EOF 
;

// Rule ClassSpecifier
ruleClassSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClassSpecifierAccess().getClassSpecifierKeyword()); }

	'ClassSpecifier' 

{ after(grammarAccess.getClassSpecifierAccess().getClassSpecifierKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCvQualifier
entryRuleCvQualifier 
:
{ before(grammarAccess.getCvQualifierRule()); }
	 ruleCvQualifier
{ after(grammarAccess.getCvQualifierRule()); } 
	 EOF 
;

// Rule CvQualifier
ruleCvQualifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCvQualifierAccess().getCvQualifierKeyword()); }

	'CvQualifier' 

{ after(grammarAccess.getCvQualifierAccess().getCvQualifierKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstantExpression
entryRuleConstantExpression 
:
{ before(grammarAccess.getConstantExpressionRule()); }
	 ruleConstantExpression
{ after(grammarAccess.getConstantExpressionRule()); } 
	 EOF 
;

// Rule ConstantExpression
ruleConstantExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstantExpressionAccess().getConstantExpressionKeyword()); }

	'ConstantExpression' 

{ after(grammarAccess.getConstantExpressionAccess().getConstantExpressionKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIdExpression
entryRuleIdExpression 
:
{ before(grammarAccess.getIdExpressionRule()); }
	 ruleIdExpression
{ after(grammarAccess.getIdExpressionRule()); } 
	 EOF 
;

// Rule IdExpression
ruleIdExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIdExpressionAccess().getIdExpressionKeyword()); }

	'IdExpression' 

{ after(grammarAccess.getIdExpressionAccess().getIdExpressionKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNestedNameSpecifier
entryRuleNestedNameSpecifier 
:
{ before(grammarAccess.getNestedNameSpecifierRule()); }
	 ruleNestedNameSpecifier
{ after(grammarAccess.getNestedNameSpecifierRule()); } 
	 EOF 
;

// Rule NestedNameSpecifier
ruleNestedNameSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNestedNameSpecifierAccess().getNestedNameSpecifierKeyword()); }

	'NestedNameSpecifier' 

{ after(grammarAccess.getNestedNameSpecifierAccess().getNestedNameSpecifierKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignmentExpression
entryRuleAssignmentExpression 
:
{ before(grammarAccess.getAssignmentExpressionRule()); }
	 ruleAssignmentExpression
{ after(grammarAccess.getAssignmentExpressionRule()); } 
	 EOF 
;

// Rule AssignmentExpression
ruleAssignmentExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionKeyword()); }

	'AssignmentExpression' 

{ after(grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCompoundStatement
entryRuleCompoundStatement 
:
{ before(grammarAccess.getCompoundStatementRule()); }
	 ruleCompoundStatement
{ after(grammarAccess.getCompoundStatementRule()); } 
	 EOF 
;

// Rule CompoundStatement
ruleCompoundStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompoundStatementAccess().getCompoundStatementKeyword()); }

	'CompoundStatement' 

{ after(grammarAccess.getCompoundStatementAccess().getCompoundStatementKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCtorInitializer
entryRuleCtorInitializer 
:
{ before(grammarAccess.getCtorInitializerRule()); }
	 ruleCtorInitializer
{ after(grammarAccess.getCtorInitializerRule()); } 
	 EOF 
;

// Rule CtorInitializer
ruleCtorInitializer
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCtorInitializerAccess().getCtorInitializerKeyword()); }

	'CtorInitializer' 

{ after(grammarAccess.getCtorInitializerAccess().getCtorInitializerKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeIdList
entryRuleTypeIdList 
:
{ before(grammarAccess.getTypeIdListRule()); }
	 ruleTypeIdList
{ after(grammarAccess.getTypeIdListRule()); } 
	 EOF 
;

// Rule TypeIdList
ruleTypeIdList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeIdListAccess().getTypeIdListKeyword()); }

	'TypeIdList' 

{ after(grammarAccess.getTypeIdListAccess().getTypeIdListKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnqualifiedId
entryRuleUnqualifiedId 
:
{ before(grammarAccess.getUnqualifiedIdRule()); }
	 ruleUnqualifiedId
{ after(grammarAccess.getUnqualifiedIdRule()); } 
	 EOF 
;

// Rule UnqualifiedId
ruleUnqualifiedId
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnqualifiedIdAccess().getUnqualifiedIdKeyword()); }

	'UnqualifiedId' 

{ after(grammarAccess.getUnqualifiedIdAccess().getUnqualifiedIdKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClassName
entryRuleClassName 
:
{ before(grammarAccess.getClassNameRule()); }
	 ruleClassName
{ after(grammarAccess.getClassNameRule()); } 
	 EOF 
;

// Rule ClassName
ruleClassName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClassNameAccess().getClassNameKeyword()); }

	'ClassName' 

{ after(grammarAccess.getClassNameAccess().getClassNameKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInitializer
entryRuleInitializer 
:
{ before(grammarAccess.getInitializerRule()); }
	 ruleInitializer
{ after(grammarAccess.getInitializerRule()); } 
	 EOF 
;

// Rule Initializer
ruleInitializer
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInitializerAccess().getInitializerKeyword()); }

	'Initializer' 

{ after(grammarAccess.getInitializerAccess().getInitializerKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Control_line__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getGroup_0()); }
(rule__Control_line__Group_0__0)
{ after(grammarAccess.getControl_lineAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getControl_lineAccess().getGroup_1()); }
(rule__Control_line__Group_1__0)
{ after(grammarAccess.getControl_lineAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getControl_lineAccess().getGroup_2()); }
(rule__Control_line__Group_2__0)
{ after(grammarAccess.getControl_lineAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getControl_lineAccess().getGroup_3()); }
(rule__Control_line__Group_3__0)
{ after(grammarAccess.getControl_lineAccess().getGroup_3()); }
)

    |(
{ before(grammarAccess.getControl_lineAccess().getGroup_4()); }
(rule__Control_line__Group_4__0)
{ after(grammarAccess.getControl_lineAccess().getGroup_4()); }
)

    |(
{ before(grammarAccess.getControl_lineAccess().getGroup_5()); }
(rule__Control_line__Group_5__0)
{ after(grammarAccess.getControl_lineAccess().getGroup_5()); }
)

    |(
{ before(grammarAccess.getControl_lineAccess().getGroup_6()); }
(rule__Control_line__Group_6__0)
{ after(grammarAccess.getControl_lineAccess().getGroup_6()); }
)

    |(
{ before(grammarAccess.getControl_lineAccess().getNumberSignKeyword_7()); }

	'#' 

{ after(grammarAccess.getControl_lineAccess().getNumberSignKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Group_part__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGroup_partAccess().getIf_actionParserRuleCall_0()); }
	ruleif_action
{ after(grammarAccess.getGroup_partAccess().getIf_actionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getGroup_partAccess().getControl_lineParserRuleCall_1()); }
	rulecontrol_line
{ after(grammarAccess.getGroup_partAccess().getControl_lineParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__If_group__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_groupAccess().getGroup_0()); }
(rule__If_group__Group_0__0)
{ after(grammarAccess.getIf_groupAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getIf_groupAccess().getGroup_1()); }
(rule__If_group__Group_1__0)
{ after(grammarAccess.getIf_groupAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getIf_groupAccess().getGroup_2()); }
(rule__If_group__Group_2__0)
{ after(grammarAccess.getIf_groupAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Simple_type_specifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimple_type_specifierAccess().getGroup_0()); }
(rule__Simple_type_specifier__Group_0__0)
{ after(grammarAccess.getSimple_type_specifierAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getSimple_type_specifierAccess().getGroup_1()); }
(rule__Simple_type_specifier__Group_1__0)
{ after(grammarAccess.getSimple_type_specifierAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getSimple_type_specifierAccess().getGroup_2()); }
(rule__Simple_type_specifier__Group_2__0)
{ after(grammarAccess.getSimple_type_specifierAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getGroup_0()); }
(rule__Statement__Group_0__0)
{ after(grammarAccess.getStatementAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getGroup_1()); }
(rule__Statement__Group_1__0)
{ after(grammarAccess.getStatementAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Jump_statement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJump_statementAccess().getBreakKeyword_0()); }

	'break;' 

{ after(grammarAccess.getJump_statementAccess().getBreakKeyword_0()); }
)

    |(
{ before(grammarAccess.getJump_statementAccess().getContinueKeyword_1()); }

	'continue;' 

{ after(grammarAccess.getJump_statementAccess().getContinueKeyword_1()); }
)

    |(
{ before(grammarAccess.getJump_statementAccess().getGroup_2()); }
(rule__Jump_statement__Group_2__0)
{ after(grammarAccess.getJump_statementAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getJump_statementAccess().getGroup_3()); }
(rule__Jump_statement__Group_3__0)
{ after(grammarAccess.getJump_statementAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PREPROCESSING_OP_OR_PUNC__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getLeftCurlyBracketKeyword_0()); }

	'{' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getLeftCurlyBracketKeyword_0()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getRightCurlyBracketKeyword_1()); }

	'}' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getRightCurlyBracketKeyword_1()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getLeftSquareBracketKeyword_2()); }

	'[' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getLeftSquareBracketKeyword_2()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getRightSquareBracketKeyword_3()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getNumberSignKeyword_4()); }

	'#' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getNumberSignKeyword_4()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getNumberSignNumberSignKeyword_5()); }

	'##' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getNumberSignNumberSignKeyword_5()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getLeftParenthesisKeyword_6()); }

	'(' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getLeftParenthesisKeyword_6()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getRightParenthesisKeyword_7()); }

	')' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getRightParenthesisKeyword_7()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getLessThanSignColonKeyword_8()); }

	'<:' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getLessThanSignColonKeyword_8()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getColonGreaterThanSignKeyword_9()); }

	':>' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getColonGreaterThanSignKeyword_9()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getLessThanSignPercentSignKeyword_10()); }

	'<%' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getLessThanSignPercentSignKeyword_10()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getPercentSignGreaterThanSignKeyword_11()); }

	'%>' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getPercentSignGreaterThanSignKeyword_11()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getPercentSignColonKeyword_12()); }

	'%:' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getPercentSignColonKeyword_12()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getPercentSignColonPercentSignColonKeyword_13()); }

	'%:%:' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getPercentSignColonPercentSignColonKeyword_13()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getSemicolonKeyword_14()); }

	';' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getSemicolonKeyword_14()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getColonKeyword_15()); }

	':' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getColonKeyword_15()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getFullStopFullStopFullStopKeyword_16()); }

	'...' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getFullStopFullStopFullStopKeyword_16()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getNewKeyword_17()); }

	'new' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getNewKeyword_17()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getDeleteKeyword_18()); }

	'delete' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getDeleteKeyword_18()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getQuestionMarkKeyword_19()); }

	'?' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getQuestionMarkKeyword_19()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getColonColonKeyword_20()); }

	'::' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getColonColonKeyword_20()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getFullStopKeyword_21()); }

	'.' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getFullStopKeyword_21()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getFullStopAsteriskKeyword_22()); }

	'.*' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getFullStopAsteriskKeyword_22()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getPlusSignKeyword_23()); }

	'+' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getPlusSignKeyword_23()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getHyphenMinusKeyword_24()); }

	'-' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getHyphenMinusKeyword_24()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getAsteriskKeyword_25()); }

	'*' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getAsteriskKeyword_25()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getSolidusKeyword_26()); }

	'/' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getSolidusKeyword_26()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getPercentSignKeyword_27()); }

	'%' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getPercentSignKeyword_27()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getCircumflexAccentKeyword_28()); }

	'^' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getCircumflexAccentKeyword_28()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getAmpersandKeyword_29()); }

	'&' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getAmpersandKeyword_29()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getVerticalLineKeyword_30()); }

	'|' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getVerticalLineKeyword_30()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getTildeKeyword_31()); }

	'~' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getTildeKeyword_31()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getExclamationMarkKeyword_32()); }

	'!' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getExclamationMarkKeyword_32()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getEqualsSignKeyword_33()); }

	'=' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getEqualsSignKeyword_33()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getLessThanSignKeyword_34()); }

	'<' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getLessThanSignKeyword_34()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getGreaterThanSignKeyword_35()); }

	'>' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getGreaterThanSignKeyword_35()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getPlusSignEqualsSignKeyword_36()); }

	'+=' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getPlusSignEqualsSignKeyword_36()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getHyphenMinusEqualsSignKeyword_37()); }

	'-=' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getHyphenMinusEqualsSignKeyword_37()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getAsteriskEqualsSignKeyword_38()); }

	'*=' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getAsteriskEqualsSignKeyword_38()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getSolidusEqualsSignKeyword_39()); }

	'/=' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getSolidusEqualsSignKeyword_39()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getPercentSignEqualsSignKeyword_40()); }

	'%=' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getPercentSignEqualsSignKeyword_40()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getCircumflexAccentEqualsSignKeyword_41()); }

	'^=' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getCircumflexAccentEqualsSignKeyword_41()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getAmpersandEqualsSignKeyword_42()); }

	'&=' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getAmpersandEqualsSignKeyword_42()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getVerticalLineEqualsSignKeyword_43()); }

	'|=' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getVerticalLineEqualsSignKeyword_43()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getLessThanSignLessThanSignKeyword_44()); }

	'<<' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getLessThanSignLessThanSignKeyword_44()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getGreaterThanSignGreaterThanSignKeyword_45()); }

	'>>' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getGreaterThanSignGreaterThanSignKeyword_45()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getLessThanSignLessThanSignEqualsSignKeyword_46()); }

	'<<=' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getLessThanSignLessThanSignEqualsSignKeyword_46()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getGreaterThanSignGreaterThanSignEqualsSignKeyword_47()); }

	'>>=' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getGreaterThanSignGreaterThanSignEqualsSignKeyword_47()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getEqualsSignEqualsSignKeyword_48()); }

	'==' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getEqualsSignEqualsSignKeyword_48()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getExclamationMarkEqualsSignKeyword_49()); }

	'!=' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getExclamationMarkEqualsSignKeyword_49()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getLessThanSignEqualsSignKeyword_50()); }

	'<=' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getLessThanSignEqualsSignKeyword_50()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getGreaterThanSignEqualsSignKeyword_51()); }

	'>=' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getGreaterThanSignEqualsSignKeyword_51()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getAmpersandAmpersandKeyword_52()); }

	'&&' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getAmpersandAmpersandKeyword_52()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getVerticalLineVerticalLineKeyword_53()); }

	'||' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getVerticalLineVerticalLineKeyword_53()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getPlusSignPlusSignKeyword_54()); }

	'++' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getPlusSignPlusSignKeyword_54()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getHyphenMinusHyphenMinusKeyword_55()); }

	'--' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getHyphenMinusHyphenMinusKeyword_55()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getCommaKeyword_56()); }

	',' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getCommaKeyword_56()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getHyphenMinusGreaterThanSignAsteriskKeyword_57()); }

	'->*' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getHyphenMinusGreaterThanSignAsteriskKeyword_57()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getHyphenMinusGreaterThanSignKeyword_58()); }

	'->' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getHyphenMinusGreaterThanSignKeyword_58()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getAndKeyword_59()); }

	'and' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getAndKeyword_59()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getAnd_eqKeyword_60()); }

	'and_eq' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getAnd_eqKeyword_60()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getBitandKeyword_61()); }

	'bitand' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getBitandKeyword_61()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getBitorKeyword_62()); }

	'bitor' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getBitorKeyword_62()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getComplKeyword_63()); }

	'compl' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getComplKeyword_63()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getNotKeyword_64()); }

	'not' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getNotKeyword_64()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getNot_eqKeyword_65()); }

	'not_eq' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getNot_eqKeyword_65()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getOrKeyword_66()); }

	'or' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getOrKeyword_66()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getOr_eqKeyword_67()); }

	'or_eq' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getOr_eqKeyword_67()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getXorKeyword_68()); }

	'xor' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getXorKeyword_68()); }
)

    |(
{ before(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getXor_eqKeyword_69()); }

	'xor_eq' 

{ after(grammarAccess.getPREPROCESSING_OP_OR_PUNCAccess().getXor_eqKeyword_69()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
{ after(grammarAccess.getLiteralAccess().getINTTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getCHARACTER_LITERALTerminalRuleCall_1()); }
	RULE_CHARACTER_LITERAL
{ after(grammarAccess.getLiteralAccess().getCHARACTER_LITERALTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getFLOATING_LITERALTerminalRuleCall_2()); }
	RULE_FLOATING_LITERAL
{ after(grammarAccess.getLiteralAccess().getFLOATING_LITERALTerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getSTRING_LITERALTerminalRuleCall_3()); }
	RULE_STRING_LITERAL
{ after(grammarAccess.getLiteralAccess().getSTRING_LITERALTerminalRuleCall_3()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getGroup_4()); }
(rule__Literal__Group_4__0)
{ after(grammarAccess.getLiteralAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getTrueKeyword_4_0_0()); }

	'true' 

{ after(grammarAccess.getLiteralAccess().getTrueKeyword_4_0_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getFalseKeyword_4_0_1()); }

	'false' 

{ after(grammarAccess.getLiteralAccess().getFalseKeyword_4_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Declaration__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getFuncaoAssignment_1_0()); }
(rule__Declaration__FuncaoAssignment_1_0)
{ after(grammarAccess.getDeclarationAccess().getFuncaoAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getDirtyEAssignment_1_1()); }
(rule__Declaration__DirtyEAssignment_1_1)
{ after(grammarAccess.getDeclarationAccess().getDirtyEAssignment_1_1()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getDirtyAAssignment_1_2()); }
(rule__Declaration__DirtyAAssignment_1_2)
{ after(grammarAccess.getDeclarationAccess().getDirtyAAssignment_1_2()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getDirtyBAssignment_1_3()); }
(rule__Declaration__DirtyBAssignment_1_3)
{ after(grammarAccess.getDeclarationAccess().getDirtyBAssignment_1_3()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getDirtyCAssignment_1_4()); }
(rule__Declaration__DirtyCAssignment_1_4)
{ after(grammarAccess.getDeclarationAccess().getDirtyCAssignment_1_4()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getDirtyDAssignment_1_5()); }
(rule__Declaration__DirtyDAssignment_1_5)
{ after(grammarAccess.getDeclarationAccess().getDirtyDAssignment_1_5()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getDirtyAssignment_1_6()); }
(rule__Declaration__DirtyAssignment_1_6)
{ after(grammarAccess.getDeclarationAccess().getDirtyAssignment_1_6()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getDirtyAssignment_1_7()); }
(rule__Declaration__DirtyAssignment_1_7)
{ after(grammarAccess.getDeclarationAccess().getDirtyAssignment_1_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BlockDeclaration__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockDeclarationAccess().getAsmDefinitionParserRuleCall_0()); }
	ruleAsmDefinition
{ after(grammarAccess.getBlockDeclarationAccess().getAsmDefinitionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getBlockDeclarationAccess().getNamespaceAliasDefinitionParserRuleCall_1()); }
	ruleNamespaceAliasDefinition
{ after(grammarAccess.getBlockDeclarationAccess().getNamespaceAliasDefinitionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getBlockDeclarationAccess().getUsingDeclarationParserRuleCall_2()); }
	ruleUsingDeclaration
{ after(grammarAccess.getBlockDeclarationAccess().getUsingDeclarationParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getBlockDeclarationAccess().getStaticAssertDeclarationParserRuleCall_3()); }
	ruleStaticAssertDeclaration
{ after(grammarAccess.getBlockDeclarationAccess().getStaticAssertDeclarationParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getBlockDeclarationAccess().getAliasDeclarationParserRuleCall_4()); }
	ruleAliasDeclaration
{ after(grammarAccess.getBlockDeclarationAccess().getAliasDeclarationParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleOrFunctionDeclaration__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleOrFunctionDeclarationAccess().getSimpleDeclarationSuffixParserRuleCall_1_0()); }
	ruleSimpleDeclarationSuffix
{ after(grammarAccess.getSimpleOrFunctionDeclarationAccess().getSimpleDeclarationSuffixParserRuleCall_1_0()); }
)

    |(
{ before(grammarAccess.getSimpleOrFunctionDeclarationAccess().getFunctionDeclarationSuffixParserRuleCall_1_1()); }
	ruleFunctionDeclarationSuffix
{ after(grammarAccess.getSimpleOrFunctionDeclarationAccess().getFunctionDeclarationSuffixParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclarationSuffix__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationSuffixAccess().getFunctionBodyParserRuleCall_1_0()); }
	ruleFunctionBody
{ after(grammarAccess.getFunctionDeclarationSuffixAccess().getFunctionBodyParserRuleCall_1_0()); }
)

    |(
{ before(grammarAccess.getFunctionDeclarationSuffixAccess().getGroup_1_1()); }
(rule__FunctionDeclarationSuffix__Group_1_1__0)
{ after(grammarAccess.getFunctionDeclarationSuffixAccess().getGroup_1_1()); }
)

    |(
{ before(grammarAccess.getFunctionDeclarationSuffixAccess().getGroup_1_2()); }
(rule__FunctionDeclarationSuffix__Group_1_2__0)
{ after(grammarAccess.getFunctionDeclarationSuffixAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationSpecifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationSpecifierAccess().getStorageClassSpecifierParserRuleCall_0()); }
	ruleStorageClassSpecifier
{ after(grammarAccess.getDeclarationSpecifierAccess().getStorageClassSpecifierParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getDeclarationSpecifierAccess().getTypeSpecifierParserRuleCall_1()); }
	ruleTypeSpecifier
{ after(grammarAccess.getDeclarationSpecifierAccess().getTypeSpecifierParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getDeclarationSpecifierAccess().getFunctionSpecifierParserRuleCall_2()); }
	ruleFunctionSpecifier
{ after(grammarAccess.getDeclarationSpecifierAccess().getFunctionSpecifierParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getDeclarationSpecifierAccess().getFriendKeyword_3()); }

	'friend' 

{ after(grammarAccess.getDeclarationSpecifierAccess().getFriendKeyword_3()); }
)

    |(
{ before(grammarAccess.getDeclarationSpecifierAccess().getTypedefKeyword_4()); }

	'typedef' 

{ after(grammarAccess.getDeclarationSpecifierAccess().getTypedefKeyword_4()); }
)

    |(
{ before(grammarAccess.getDeclarationSpecifierAccess().getConstexprKeyword_5()); }

	'constexpr' 

{ after(grammarAccess.getDeclarationSpecifierAccess().getConstexprKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StorageClassSpecifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStorageClassSpecifierAccess().getRegisterKeyword_0()); }

	'register' 

{ after(grammarAccess.getStorageClassSpecifierAccess().getRegisterKeyword_0()); }
)

    |(
{ before(grammarAccess.getStorageClassSpecifierAccess().getStaticKeyword_1()); }

	'static' 

{ after(grammarAccess.getStorageClassSpecifierAccess().getStaticKeyword_1()); }
)

    |(
{ before(grammarAccess.getStorageClassSpecifierAccess().getThread_localKeyword_2()); }

	'thread_local' 

{ after(grammarAccess.getStorageClassSpecifierAccess().getThread_localKeyword_2()); }
)

    |(
{ before(grammarAccess.getStorageClassSpecifierAccess().getExternKeyword_3()); }

	'extern' 

{ after(grammarAccess.getStorageClassSpecifierAccess().getExternKeyword_3()); }
)

    |(
{ before(grammarAccess.getStorageClassSpecifierAccess().getMutableKeyword_4()); }

	'mutable' 

{ after(grammarAccess.getStorageClassSpecifierAccess().getMutableKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionSpecifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionSpecifierAccess().getInlineKeyword_0()); }

	'inline' 

{ after(grammarAccess.getFunctionSpecifierAccess().getInlineKeyword_0()); }
)

    |(
{ before(grammarAccess.getFunctionSpecifierAccess().getVirtualKeyword_1()); }

	'virtual' 

{ after(grammarAccess.getFunctionSpecifierAccess().getVirtualKeyword_1()); }
)

    |(
{ before(grammarAccess.getFunctionSpecifierAccess().getExplicitKeyword_2()); }

	'explicit' 

{ after(grammarAccess.getFunctionSpecifierAccess().getExplicitKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeSpecifierAccess().getTrailingTypeSpecifierParserRuleCall_0()); }
	ruleTrailingTypeSpecifier
{ after(grammarAccess.getTypeSpecifierAccess().getTrailingTypeSpecifierParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTypeSpecifierAccess().getClassSpecifierParserRuleCall_1()); }
	ruleClassSpecifier
{ after(grammarAccess.getTypeSpecifierAccess().getClassSpecifierParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getTypeSpecifierAccess().getEnumSpecifierParserRuleCall_2()); }
	ruleEnumSpecifier
{ after(grammarAccess.getTypeSpecifierAccess().getEnumSpecifierParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TrailingTypeSpecifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTrailingTypeSpecifierAccess().getSimpleTypeSpecifierParserRuleCall_0()); }
	ruleSimpleTypeSpecifier
{ after(grammarAccess.getTrailingTypeSpecifierAccess().getSimpleTypeSpecifierParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTrailingTypeSpecifierAccess().getElaboratedTypeSpecifierParserRuleCall_1()); }
	ruleElaboratedTypeSpecifier
{ after(grammarAccess.getTrailingTypeSpecifierAccess().getElaboratedTypeSpecifierParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getTrailingTypeSpecifierAccess().getTypenameSpecifierParserRuleCall_2()); }
	ruleTypenameSpecifier
{ after(grammarAccess.getTrailingTypeSpecifierAccess().getTypenameSpecifierParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getTrailingTypeSpecifierAccess().getCvQualifierParserRuleCall_3()); }
	ruleCvQualifier
{ after(grammarAccess.getTrailingTypeSpecifierAccess().getCvQualifierParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleTypeSpecifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getGroup_0()); }
(rule__SimpleTypeSpecifier__Group_0__0)
{ after(grammarAccess.getSimpleTypeSpecifierAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getCharKeyword_1()); }

	'char' 

{ after(grammarAccess.getSimpleTypeSpecifierAccess().getCharKeyword_1()); }
)

    |(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getChar16_tKeyword_2()); }

	'char16_t' 

{ after(grammarAccess.getSimpleTypeSpecifierAccess().getChar16_tKeyword_2()); }
)

    |(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getChar32_tKeyword_3()); }

	'char32_t' 

{ after(grammarAccess.getSimpleTypeSpecifierAccess().getChar32_tKeyword_3()); }
)

    |(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getWchar_tKeyword_4()); }

	'wchar_t' 

{ after(grammarAccess.getSimpleTypeSpecifierAccess().getWchar_tKeyword_4()); }
)

    |(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getBoolKeyword_5()); }

	'bool' 

{ after(grammarAccess.getSimpleTypeSpecifierAccess().getBoolKeyword_5()); }
)

    |(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getShortKeyword_6()); }

	'short' 

{ after(grammarAccess.getSimpleTypeSpecifierAccess().getShortKeyword_6()); }
)

    |(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getIntKeyword_7()); }

	'int' 

{ after(grammarAccess.getSimpleTypeSpecifierAccess().getIntKeyword_7()); }
)

    |(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getLongKeyword_8()); }

	'long' 

{ after(grammarAccess.getSimpleTypeSpecifierAccess().getLongKeyword_8()); }
)

    |(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getSignedKeyword_9()); }

	'signed' 

{ after(grammarAccess.getSimpleTypeSpecifierAccess().getSignedKeyword_9()); }
)

    |(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getUnsignedKeyword_10()); }

	'unsigned' 

{ after(grammarAccess.getSimpleTypeSpecifierAccess().getUnsignedKeyword_10()); }
)

    |(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getFloatKeyword_11()); }

	'float' 

{ after(grammarAccess.getSimpleTypeSpecifierAccess().getFloatKeyword_11()); }
)

    |(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getDoubleKeyword_12()); }

	'double' 

{ after(grammarAccess.getSimpleTypeSpecifierAccess().getDoubleKeyword_12()); }
)

    |(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getVoidKeyword_13()); }

	'void' 

{ after(grammarAccess.getSimpleTypeSpecifierAccess().getVoidKeyword_13()); }
)

    |(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getAutoKeyword_14()); }

	'auto' 

{ after(grammarAccess.getSimpleTypeSpecifierAccess().getAutoKeyword_14()); }
)

    |(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getDeclarationTypeSpecifierParserRuleCall_15()); }
	ruleDeclarationTypeSpecifier
{ after(grammarAccess.getSimpleTypeSpecifierAccess().getDeclarationTypeSpecifierParserRuleCall_15()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleTypeSpecifier__Alternatives_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getTypeNameParserRuleCall_0_1_0()); }
	ruleTypeName
{ after(grammarAccess.getSimpleTypeSpecifierAccess().getTypeNameParserRuleCall_0_1_0()); }
)

    |(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getGroup_0_1_1()); }
(rule__SimpleTypeSpecifier__Group_0_1_1__0)
{ after(grammarAccess.getSimpleTypeSpecifierAccess().getGroup_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleTypeSpecifier__Alternatives_0_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getTypeNameParserRuleCall_0_1_1_1_0()); }
	ruleTypeName
{ after(grammarAccess.getSimpleTypeSpecifierAccess().getTypeNameParserRuleCall_0_1_1_1_0()); }
)

    |(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getGroup_0_1_1_1_1()); }
(rule__SimpleTypeSpecifier__Group_0_1_1_1_1__0)
{ after(grammarAccess.getSimpleTypeSpecifierAccess().getGroup_0_1_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeName__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeNameAccess().getClassNameParserRuleCall_0()); }
	ruleClassName
{ after(grammarAccess.getTypeNameAccess().getClassNameParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTypeNameAccess().getSimpleTemplateIdParserRuleCall_1()); }
	ruleSimpleTemplateId
{ after(grammarAccess.getTypeNameAccess().getSimpleTemplateIdParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getTypeNameAccess().getIDTerminalRuleCall_2()); }
	RULE_ID
{ after(grammarAccess.getTypeNameAccess().getIDTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ElaboratedTypeSpecifier__Alternatives_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElaboratedTypeSpecifierAccess().getIDTerminalRuleCall_3_0()); }
	RULE_ID
{ after(grammarAccess.getElaboratedTypeSpecifierAccess().getIDTerminalRuleCall_3_0()); }
)

    |(
{ before(grammarAccess.getElaboratedTypeSpecifierAccess().getGroup_3_1()); }
(rule__ElaboratedTypeSpecifier__Group_3_1__0)
{ after(grammarAccess.getElaboratedTypeSpecifierAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumHead__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumHeadAccess().getIDTerminalRuleCall_1_0()); }
(	RULE_ID)?
{ after(grammarAccess.getEnumHeadAccess().getIDTerminalRuleCall_1_0()); }
)

    |(
{ before(grammarAccess.getEnumHeadAccess().getGroup_1_1()); }
(rule__EnumHead__Group_1_1__0)
{ after(grammarAccess.getEnumHeadAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumKey__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumKeyAccess().getEnumKeyword_0()); }

	'enum' 

{ after(grammarAccess.getEnumKeyAccess().getEnumKeyword_0()); }
)

    |(
{ before(grammarAccess.getEnumKeyAccess().getGroup_1()); }
(rule__EnumKey__Group_1__0)
{ after(grammarAccess.getEnumKeyAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getEnumKeyAccess().getGroup_2()); }
(rule__EnumKey__Group_2__0)
{ after(grammarAccess.getEnumKeyAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UsingDeclaration__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUsingDeclarationAccess().getColonColonKeyword_1_0()); }

	'::' 

{ after(grammarAccess.getUsingDeclarationAccess().getColonColonKeyword_1_0()); }
)

    |(
{ before(grammarAccess.getUsingDeclarationAccess().getGroup_1_1()); }
(rule__UsingDeclaration__Group_1_1__0)
{ after(grammarAccess.getUsingDeclarationAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LinkageSpecification__Alternatives_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkageSpecificationAccess().getDirtyAssignment_3_0()); }
(rule__LinkageSpecification__DirtyAssignment_3_0)
{ after(grammarAccess.getLinkageSpecificationAccess().getDirtyAssignment_3_0()); }
)

    |(
{ before(grammarAccess.getLinkageSpecificationAccess().getGroup_3_1()); }
(rule__LinkageSpecification__Group_3_1__0)
{ after(grammarAccess.getLinkageSpecificationAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParametersAndQualifiers__Alternatives_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParametersAndQualifiersAccess().getConstKeyword_3_0()); }

	'const' 

{ after(grammarAccess.getParametersAndQualifiersAccess().getConstKeyword_3_0()); }
)

    |(
{ before(grammarAccess.getParametersAndQualifiersAccess().getVolatileKeyword_3_1()); }

	'volatile' 

{ after(grammarAccess.getParametersAndQualifiersAccess().getVolatileKeyword_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParametersAndQualifiers__Alternatives_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParametersAndQualifiersAccess().getAmpersandKeyword_4_0()); }

	'&' 

{ after(grammarAccess.getParametersAndQualifiersAccess().getAmpersandKeyword_4_0()); }
)

    |(
{ before(grammarAccess.getParametersAndQualifiersAccess().getAmpersandAmpersandKeyword_4_1()); }

	'&&' 

{ after(grammarAccess.getParametersAndQualifiersAccess().getAmpersandAmpersandKeyword_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclarationClause__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationClauseAccess().getFullStopFullStopFullStopKeyword_0()); }

	'...' 

{ after(grammarAccess.getParameterDeclarationClauseAccess().getFullStopFullStopFullStopKeyword_0()); }
)

    |(
{ before(grammarAccess.getParameterDeclarationClauseAccess().getGroup_1()); }
(rule__ParameterDeclarationClause__Group_1__0)
{ after(grammarAccess.getParameterDeclarationClauseAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionBody__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionBodyAccess().getGroup_0()); }
(rule__FunctionBody__Group_0__0)
{ after(grammarAccess.getFunctionBodyAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getFunctionBodyAccess().getFunctionTryBlockParserRuleCall_1()); }
	ruleFunctionTryBlock
{ after(grammarAccess.getFunctionBodyAccess().getFunctionTryBlockParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorFunctionId__Alternatives_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorFunctionIdAccess().getConstantExpressionParserRuleCall_2_1_0()); }
	ruleConstantExpression
{ after(grammarAccess.getOperatorFunctionIdAccess().getConstantExpressionParserRuleCall_2_1_0()); }
)

    |(
{ before(grammarAccess.getOperatorFunctionIdAccess().getTypeSpecifierParserRuleCall_2_1_1()); }
	ruleTypeSpecifier
{ after(grammarAccess.getOperatorFunctionIdAccess().getTypeSpecifierParserRuleCall_2_1_1()); }
)

    |(
{ before(grammarAccess.getOperatorFunctionIdAccess().getIdExpressionParserRuleCall_2_1_2()); }
	ruleIdExpression
{ after(grammarAccess.getOperatorFunctionIdAccess().getIdExpressionParserRuleCall_2_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OverloadableOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOverloadableOperatorAccess().getNewKeyword_0()); }

	'new' 

{ after(grammarAccess.getOverloadableOperatorAccess().getNewKeyword_0()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getDeleteKeyword_1()); }

	'delete' 

{ after(grammarAccess.getOverloadableOperatorAccess().getDeleteKeyword_1()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getGroup_2()); }
(rule__OverloadableOperator__Group_2__0)
{ after(grammarAccess.getOverloadableOperatorAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getGroup_3()); }
(rule__OverloadableOperator__Group_3__0)
{ after(grammarAccess.getOverloadableOperatorAccess().getGroup_3()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getPlusSignKeyword_4()); }

	'+' 

{ after(grammarAccess.getOverloadableOperatorAccess().getPlusSignKeyword_4()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getHyphenMinusKeyword_5()); }

	'-' 

{ after(grammarAccess.getOverloadableOperatorAccess().getHyphenMinusKeyword_5()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getAsteriskKeyword_6()); }

	'*' 

{ after(grammarAccess.getOverloadableOperatorAccess().getAsteriskKeyword_6()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getSolidusKeyword_7()); }

	'/' 

{ after(grammarAccess.getOverloadableOperatorAccess().getSolidusKeyword_7()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getPercentSignKeyword_8()); }

	'%' 

{ after(grammarAccess.getOverloadableOperatorAccess().getPercentSignKeyword_8()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getCircumflexAccentKeyword_9()); }

	'^' 

{ after(grammarAccess.getOverloadableOperatorAccess().getCircumflexAccentKeyword_9()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getAmpersandKeyword_10()); }

	'&' 

{ after(grammarAccess.getOverloadableOperatorAccess().getAmpersandKeyword_10()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getVerticalLineKeyword_11()); }

	'|' 

{ after(grammarAccess.getOverloadableOperatorAccess().getVerticalLineKeyword_11()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getTildeKeyword_12()); }

	'~' 

{ after(grammarAccess.getOverloadableOperatorAccess().getTildeKeyword_12()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getExclamationMarkKeyword_13()); }

	'!' 

{ after(grammarAccess.getOverloadableOperatorAccess().getExclamationMarkKeyword_13()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getEqualsSignKeyword_14()); }

	'=' 

{ after(grammarAccess.getOverloadableOperatorAccess().getEqualsSignKeyword_14()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getLessThanSignKeyword_15()); }

	'<' 

{ after(grammarAccess.getOverloadableOperatorAccess().getLessThanSignKeyword_15()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getGreaterThanSignKeyword_16()); }

	'>' 

{ after(grammarAccess.getOverloadableOperatorAccess().getGreaterThanSignKeyword_16()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getPlusSignEqualsSignKeyword_17()); }

	'+=' 

{ after(grammarAccess.getOverloadableOperatorAccess().getPlusSignEqualsSignKeyword_17()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getHyphenMinusEqualsSignKeyword_18()); }

	'-=' 

{ after(grammarAccess.getOverloadableOperatorAccess().getHyphenMinusEqualsSignKeyword_18()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getAsteriskEqualsSignKeyword_19()); }

	'*=' 

{ after(grammarAccess.getOverloadableOperatorAccess().getAsteriskEqualsSignKeyword_19()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getSolidusEqualsSignKeyword_20()); }

	'/=' 

{ after(grammarAccess.getOverloadableOperatorAccess().getSolidusEqualsSignKeyword_20()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getPercentSignEqualsSignKeyword_21()); }

	'%=' 

{ after(grammarAccess.getOverloadableOperatorAccess().getPercentSignEqualsSignKeyword_21()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getCircumflexAccentEqualsSignKeyword_22()); }

	'^=' 

{ after(grammarAccess.getOverloadableOperatorAccess().getCircumflexAccentEqualsSignKeyword_22()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getAmpersandEqualsSignKeyword_23()); }

	'&=' 

{ after(grammarAccess.getOverloadableOperatorAccess().getAmpersandEqualsSignKeyword_23()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getVerticalLineEqualsSignKeyword_24()); }

	'|=' 

{ after(grammarAccess.getOverloadableOperatorAccess().getVerticalLineEqualsSignKeyword_24()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getLessThanSignLessThanSignKeyword_25()); }

	'<<' 

{ after(grammarAccess.getOverloadableOperatorAccess().getLessThanSignLessThanSignKeyword_25()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getGreaterThanSignGreaterThanSignKeyword_26()); }

	'>>' 

{ after(grammarAccess.getOverloadableOperatorAccess().getGreaterThanSignGreaterThanSignKeyword_26()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getGreaterThanSignGreaterThanSignEqualsSignKeyword_27()); }

	'>>=' 

{ after(grammarAccess.getOverloadableOperatorAccess().getGreaterThanSignGreaterThanSignEqualsSignKeyword_27()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getLessThanSignLessThanSignEqualsSignKeyword_28()); }

	'<<=' 

{ after(grammarAccess.getOverloadableOperatorAccess().getLessThanSignLessThanSignEqualsSignKeyword_28()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getEqualsSignEqualsSignKeyword_29()); }

	'==' 

{ after(grammarAccess.getOverloadableOperatorAccess().getEqualsSignEqualsSignKeyword_29()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getExclamationMarkEqualsSignKeyword_30()); }

	'!=' 

{ after(grammarAccess.getOverloadableOperatorAccess().getExclamationMarkEqualsSignKeyword_30()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getLessThanSignEqualsSignKeyword_31()); }

	'<=' 

{ after(grammarAccess.getOverloadableOperatorAccess().getLessThanSignEqualsSignKeyword_31()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getGreaterThanSignEqualsSignKeyword_32()); }

	'>=' 

{ after(grammarAccess.getOverloadableOperatorAccess().getGreaterThanSignEqualsSignKeyword_32()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getAmpersandAmpersandKeyword_33()); }

	'&&' 

{ after(grammarAccess.getOverloadableOperatorAccess().getAmpersandAmpersandKeyword_33()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getVerticalLineVerticalLineKeyword_34()); }

	'||' 

{ after(grammarAccess.getOverloadableOperatorAccess().getVerticalLineVerticalLineKeyword_34()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getPlusSignPlusSignKeyword_35()); }

	'++' 

{ after(grammarAccess.getOverloadableOperatorAccess().getPlusSignPlusSignKeyword_35()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getHyphenMinusHyphenMinusKeyword_36()); }

	'--' 

{ after(grammarAccess.getOverloadableOperatorAccess().getHyphenMinusHyphenMinusKeyword_36()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getCommaKeyword_37()); }

	',' 

{ after(grammarAccess.getOverloadableOperatorAccess().getCommaKeyword_37()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getHyphenMinusGreaterThanSignAsteriskKeyword_38()); }

	'->*' 

{ after(grammarAccess.getOverloadableOperatorAccess().getHyphenMinusGreaterThanSignAsteriskKeyword_38()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getHyphenMinusGreaterThanSignKeyword_39()); }

	'->' 

{ after(grammarAccess.getOverloadableOperatorAccess().getHyphenMinusGreaterThanSignKeyword_39()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getLeftParenthesisRightParenthesisKeyword_40()); }

	'()' 

{ after(grammarAccess.getOverloadableOperatorAccess().getLeftParenthesisRightParenthesisKeyword_40()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getLeftSquareBracketRightSquareBracketKeyword_41()); }

	'[]' 

{ after(grammarAccess.getOverloadableOperatorAccess().getLeftSquareBracketRightSquareBracketKeyword_41()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateParameter__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateParameterAccess().getTypeParameterParserRuleCall_0()); }
	ruleTypeParameter
{ after(grammarAccess.getTemplateParameterAccess().getTypeParameterParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTemplateParameterAccess().getParameterDeclarationParserRuleCall_1()); }
	ruleParameterDeclaration
{ after(grammarAccess.getTemplateParameterAccess().getParameterDeclarationParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameter__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParameterAccess().getClassKeyword_0_0()); }

	'class' 

{ after(grammarAccess.getTypeParameterAccess().getClassKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getTypeParameterAccess().getTypenameKeyword_0_1()); }

	'typename' 

{ after(grammarAccess.getTypeParameterAccess().getTypenameKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameter__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParameterAccess().getGroup_1_0()); }
(rule__TypeParameter__Group_1_0__0)
{ after(grammarAccess.getTypeParameterAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getTypeParameterAccess().getGroup_1_1()); }
(rule__TypeParameter__Group_1_1__0)
{ after(grammarAccess.getTypeParameterAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__TemplateArgument__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateArgumentAccess().getConstantExpressionParserRuleCall_0()); }
	ruleConstantExpression
{ after(grammarAccess.getTemplateArgumentAccess().getConstantExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTemplateArgumentAccess().getTypeIdParserRuleCall_1()); }
	ruleTypeId
{ after(grammarAccess.getTemplateArgumentAccess().getTypeIdParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getTemplateArgumentAccess().getIdExpressionParserRuleCall_2()); }
	ruleIdExpression
{ after(grammarAccess.getTemplateArgumentAccess().getIdExpressionParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypenameSpecifier__Alternatives_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypenameSpecifierAccess().getIDTerminalRuleCall_3_0()); }
	RULE_ID
{ after(grammarAccess.getTypenameSpecifierAccess().getIDTerminalRuleCall_3_0()); }
)

    |(
{ before(grammarAccess.getTypenameSpecifierAccess().getGroup_3_1()); }
(rule__TypenameSpecifier__Group_3_1__0)
{ after(grammarAccess.getTypenameSpecifierAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExceptionDeclaration__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExceptionDeclarationAccess().getGroup_0()); }
(rule__ExceptionDeclaration__Group_0__0)
{ after(grammarAccess.getExceptionDeclarationAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getExceptionDeclarationAccess().getFullStopFullStopFullStopKeyword_1()); }

	'...' 

{ after(grammarAccess.getExceptionDeclarationAccess().getFullStopFullStopFullStopKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExceptionSpecification__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExceptionSpecificationAccess().getDynamicExceptionSpecificationParserRuleCall_0()); }
	ruleDynamicExceptionSpecification
{ after(grammarAccess.getExceptionSpecificationAccess().getDynamicExceptionSpecificationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExceptionSpecificationAccess().getNoexceptSpecificationParserRuleCall_1()); }
	ruleNoexceptSpecification
{ after(grammarAccess.getExceptionSpecificationAccess().getNoexceptSpecificationParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Body__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Body__Group__0__Impl
	rule__Body__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBodyAccess().getBodyAction_0()); }
(

)
{ after(grammarAccess.getBodyAccess().getBodyAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Body__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Body__Group__1__Impl
	rule__Body__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBodyAccess().getPreprocessing_fileParserRuleCall_1()); }
	rulepreprocessing_file
{ after(grammarAccess.getBodyAccess().getPreprocessing_fileParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Body__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Body__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBodyAccess().getDeclarationsAssignment_2()); }
(rule__Body__DeclarationsAssignment_2)*
{ after(grammarAccess.getBodyAccess().getDeclarationsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Elif_group__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Elif_group__Group__0__Impl
	rule__Elif_group__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Elif_group__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElif_groupAccess().getElifKeyword_0()); }

	'#elif' 

{ after(grammarAccess.getElif_groupAccess().getElifKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Elif_group__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Elif_group__Group__1__Impl
	rule__Elif_group__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Elif_group__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElif_groupAccess().getConstant_expressionParserRuleCall_1()); }
	ruleconstant_expression
{ after(grammarAccess.getElif_groupAccess().getConstant_expressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Elif_group__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Elif_group__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Elif_group__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElif_groupAccess().getGroupParserRuleCall_2()); }
(	rulegroup)?
{ after(grammarAccess.getElif_groupAccess().getGroupParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Else_group__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Else_group__Group__0__Impl
	rule__Else_group__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Else_group__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElse_groupAccess().getElseKeyword_0()); }

	'#else' 

{ after(grammarAccess.getElse_groupAccess().getElseKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Else_group__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Else_group__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Else_group__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElse_groupAccess().getGroupParserRuleCall_1()); }
(	rulegroup)?
{ after(grammarAccess.getElse_groupAccess().getGroupParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Control_line__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_0__0__Impl
	rule__Control_line__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getIncludeKeyword_0_0()); }

	'#include' 

{ after(grammarAccess.getControl_lineAccess().getIncludeKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Control_line__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getPp_tokensParserRuleCall_0_1()); }
	rulepp_tokens
{ after(grammarAccess.getControl_lineAccess().getPp_tokensParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Control_line__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_1__0__Impl
	rule__Control_line__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getDefineKeyword_1_0()); }

	'#define' 

{ after(grammarAccess.getControl_lineAccess().getDefineKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Control_line__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_1__1__Impl
	rule__Control_line__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getControl_lineAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Control_line__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getReplacement_listParserRuleCall_1_2()); }
	rulereplacement_list
{ after(grammarAccess.getControl_lineAccess().getReplacement_listParserRuleCall_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Control_line__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_2__0__Impl
	rule__Control_line__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getDefineKeyword_2_0()); }

	'#define' 

{ after(grammarAccess.getControl_lineAccess().getDefineKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Control_line__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_2__1__Impl
	rule__Control_line__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getIDTerminalRuleCall_2_1()); }
	RULE_ID
{ after(grammarAccess.getControl_lineAccess().getIDTerminalRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Control_line__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_2__2__Impl
	rule__Control_line__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getLparenParserRuleCall_2_2()); }
	rulelparen
{ after(grammarAccess.getControl_lineAccess().getLparenParserRuleCall_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Control_line__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_2__3__Impl
	rule__Control_line__Group_2__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getIDTerminalRuleCall_2_3()); }
(	RULE_ID)?
{ after(grammarAccess.getControl_lineAccess().getIDTerminalRuleCall_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Control_line__Group_2__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_2__4__Impl
	rule__Control_line__Group_2__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_2__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getRightParenthesisKeyword_2_4()); }

	')' 

{ after(grammarAccess.getControl_lineAccess().getRightParenthesisKeyword_2_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Control_line__Group_2__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_2__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_2__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getReplacement_listParserRuleCall_2_5()); }
	rulereplacement_list
{ after(grammarAccess.getControl_lineAccess().getReplacement_listParserRuleCall_2_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Control_line__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_3__0__Impl
	rule__Control_line__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getUndefKeyword_3_0()); }

	'#undef' 

{ after(grammarAccess.getControl_lineAccess().getUndefKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Control_line__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getIDTerminalRuleCall_3_1()); }
	RULE_ID
{ after(grammarAccess.getControl_lineAccess().getIDTerminalRuleCall_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Control_line__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_4__0__Impl
	rule__Control_line__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getLineKeyword_4_0()); }

	'#line' 

{ after(grammarAccess.getControl_lineAccess().getLineKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Control_line__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getPp_tokensParserRuleCall_4_1()); }
	rulepp_tokens
{ after(grammarAccess.getControl_lineAccess().getPp_tokensParserRuleCall_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Control_line__Group_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_5__0__Impl
	rule__Control_line__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getErrorKeyword_5_0()); }

	'#error' 

{ after(grammarAccess.getControl_lineAccess().getErrorKeyword_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Control_line__Group_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getPp_tokensParserRuleCall_5_1()); }
(	rulepp_tokens)?
{ after(grammarAccess.getControl_lineAccess().getPp_tokensParserRuleCall_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Control_line__Group_6__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_6__0__Impl
	rule__Control_line__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_6__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getPragmaKeyword_6_0()); }

	'#pragma' 

{ after(grammarAccess.getControl_lineAccess().getPragmaKeyword_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Control_line__Group_6__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Control_line__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Control_line__Group_6__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getControl_lineAccess().getPp_tokensParserRuleCall_6_1()); }
(	rulepp_tokens)?
{ after(grammarAccess.getControl_lineAccess().getPp_tokensParserRuleCall_6_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__If_action__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If_action__Group__0__Impl
	rule__If_action__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If_action__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_actionAccess().getIf_groupParserRuleCall_0()); }
	ruleif_group
{ after(grammarAccess.getIf_actionAccess().getIf_groupParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If_action__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If_action__Group__1__Impl
	rule__If_action__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If_action__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_actionAccess().getElif_groupsParserRuleCall_1()); }
(	ruleelif_groups)?
{ after(grammarAccess.getIf_actionAccess().getElif_groupsParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If_action__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If_action__Group__2__Impl
	rule__If_action__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__If_action__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_actionAccess().getElse_groupParserRuleCall_2()); }
(	ruleelse_group)?
{ after(grammarAccess.getIf_actionAccess().getElse_groupParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If_action__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If_action__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If_action__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_actionAccess().getEndif_lineParserRuleCall_3()); }
	ruleendif_line
{ after(grammarAccess.getIf_actionAccess().getEndif_lineParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__If_group__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If_group__Group_0__0__Impl
	rule__If_group__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If_group__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_groupAccess().getIfKeyword_0_0()); }

	'#if' 

{ after(grammarAccess.getIf_groupAccess().getIfKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If_group__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If_group__Group_0__1__Impl
	rule__If_group__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If_group__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_groupAccess().getConstant_expressionParserRuleCall_0_1()); }
	ruleconstant_expression
{ after(grammarAccess.getIf_groupAccess().getConstant_expressionParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If_group__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If_group__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If_group__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_groupAccess().getGroupParserRuleCall_0_2()); }
(	rulegroup)?
{ after(grammarAccess.getIf_groupAccess().getGroupParserRuleCall_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__If_group__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If_group__Group_1__0__Impl
	rule__If_group__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If_group__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_groupAccess().getIfdefKeyword_1_0()); }

	'#ifdef' 

{ after(grammarAccess.getIf_groupAccess().getIfdefKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If_group__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If_group__Group_1__1__Impl
	rule__If_group__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If_group__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_groupAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
{ after(grammarAccess.getIf_groupAccess().getIDTerminalRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If_group__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If_group__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If_group__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_groupAccess().getGroupParserRuleCall_1_2()); }
(	rulegroup)?
{ after(grammarAccess.getIf_groupAccess().getGroupParserRuleCall_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__If_group__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If_group__Group_2__0__Impl
	rule__If_group__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If_group__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_groupAccess().getIfndefKeyword_2_0()); }

	'#ifndef' 

{ after(grammarAccess.getIf_groupAccess().getIfndefKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If_group__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If_group__Group_2__1__Impl
	rule__If_group__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If_group__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_groupAccess().getIDTerminalRuleCall_2_1()); }
	RULE_ID
{ after(grammarAccess.getIf_groupAccess().getIDTerminalRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__If_group__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__If_group__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If_group__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIf_groupAccess().getGroupParserRuleCall_2_2()); }
(	rulegroup)?
{ after(grammarAccess.getIf_groupAccess().getGroupParserRuleCall_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FunctionDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__0__Impl
	rule__FunctionDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getFunctionDeclarationAction_0()); }
(

)
{ after(grammarAccess.getFunctionDeclarationAccess().getFunctionDeclarationAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__1__Impl
	rule__FunctionDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getTypeAssignment_1()); }
(rule__FunctionDeclaration__TypeAssignment_1)
{ after(grammarAccess.getFunctionDeclarationAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__2__Impl
	rule__FunctionDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getNameAssignment_2()); }
(rule__FunctionDeclaration__NameAssignment_2)
{ after(grammarAccess.getFunctionDeclarationAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__3__Impl
	rule__FunctionDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getLeftParenthesisKeyword_3()); }

	'(' 

{ after(grammarAccess.getFunctionDeclarationAccess().getLeftParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__4__Impl
	rule__FunctionDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getGroup_4()); }
(rule__FunctionDeclaration__Group_4__0)?
{ after(grammarAccess.getFunctionDeclarationAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__5__Impl
	rule__FunctionDeclaration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getFunctionDeclarationAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__6__Impl
	rule__FunctionDeclaration__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getLeftCurlyBracketKeyword_6()); }

	'{' 

{ after(grammarAccess.getFunctionDeclarationAccess().getLeftCurlyBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__7__Impl
	rule__FunctionDeclaration__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getEscopoAssignment_7()); }
(rule__FunctionDeclaration__EscopoAssignment_7)?
{ after(grammarAccess.getFunctionDeclarationAccess().getEscopoAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getRightCurlyBracketKeyword_8()); }

	'}' 

{ after(grammarAccess.getFunctionDeclarationAccess().getRightCurlyBracketKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__FunctionDeclaration__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_4__0__Impl
	rule__FunctionDeclaration__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getParamsAssignment_4_0()); }
(rule__FunctionDeclaration__ParamsAssignment_4_0)
{ after(grammarAccess.getFunctionDeclarationAccess().getParamsAssignment_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getGroup_4_1()); }
(rule__FunctionDeclaration__Group_4_1__0)*
{ after(grammarAccess.getFunctionDeclarationAccess().getGroup_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionDeclaration__Group_4_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_4_1__0__Impl
	rule__FunctionDeclaration__Group_4_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_4_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getCommaKeyword_4_1_0()); }

	',' 

{ after(grammarAccess.getFunctionDeclarationAccess().getCommaKeyword_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclaration__Group_4_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclaration__Group_4_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__Group_4_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getParamsAssignment_4_1_1()); }
(rule__FunctionDeclaration__ParamsAssignment_4_1_1)
{ after(grammarAccess.getFunctionDeclarationAccess().getParamsAssignment_4_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Parameter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__0__Impl
	rule__Parameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getParameterAction_0()); }
(

)
{ after(grammarAccess.getParameterAccess().getParameterAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__1__Impl
	rule__Parameter__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getTypeAssignment_1()); }
(rule__Parameter__TypeAssignment_1)
{ after(grammarAccess.getParameterAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Parameter__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Parameter__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNameAssignment_2()); }
(rule__Parameter__NameAssignment_2)
{ after(grammarAccess.getParameterAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__VarDecl__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDecl__Group__0__Impl
	rule__VarDecl__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getVarDeclAction_0()); }
(

)
{ after(grammarAccess.getVarDeclAccess().getVarDeclAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarDecl__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDecl__Group__1__Impl
	rule__VarDecl__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getTypeAssignment_1()); }
(rule__VarDecl__TypeAssignment_1)
{ after(grammarAccess.getVarDeclAccess().getTypeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VarDecl__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VarDecl__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getNameAssignment_2()); }
(rule__VarDecl__NameAssignment_2)
{ after(grammarAccess.getVarDeclAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Type__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group__0__Impl
	rule__Type__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getTypeAction_0()); }
(

)
{ after(grammarAccess.getTypeAccess().getTypeAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Type__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Type__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getStsAssignment_1()); }
(rule__Type__StsAssignment_1)
{ after(grammarAccess.getTypeAccess().getStsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Simple_type_specifier__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Simple_type_specifier__Group_0__0__Impl
	rule__Simple_type_specifier__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Simple_type_specifier__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimple_type_specifierAccess().getIntTypeAction_0_0()); }
(

)
{ after(grammarAccess.getSimple_type_specifierAccess().getIntTypeAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Simple_type_specifier__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Simple_type_specifier__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Simple_type_specifier__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimple_type_specifierAccess().getNameAssignment_0_1()); }
(rule__Simple_type_specifier__NameAssignment_0_1)
{ after(grammarAccess.getSimple_type_specifierAccess().getNameAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Simple_type_specifier__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Simple_type_specifier__Group_1__0__Impl
	rule__Simple_type_specifier__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Simple_type_specifier__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimple_type_specifierAccess().getBoolTypeAction_1_0()); }
(

)
{ after(grammarAccess.getSimple_type_specifierAccess().getBoolTypeAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Simple_type_specifier__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Simple_type_specifier__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Simple_type_specifier__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimple_type_specifierAccess().getNameAssignment_1_1()); }
(rule__Simple_type_specifier__NameAssignment_1_1)
{ after(grammarAccess.getSimple_type_specifierAccess().getNameAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Simple_type_specifier__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Simple_type_specifier__Group_2__0__Impl
	rule__Simple_type_specifier__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Simple_type_specifier__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimple_type_specifierAccess().getUnknownTypeAction_2_0()); }
(

)
{ after(grammarAccess.getSimple_type_specifierAccess().getUnknownTypeAction_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Simple_type_specifier__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Simple_type_specifier__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Simple_type_specifier__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimple_type_specifierAccess().getNameAssignment_2_1()); }
(rule__Simple_type_specifier__NameAssignment_2_1)
{ after(grammarAccess.getSimple_type_specifierAccess().getNameAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Statement__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group_0__0__Impl
	rule__Statement__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getJumpAction_0_0()); }
(

)
{ after(grammarAccess.getStatementAccess().getJumpAction_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getJumpAssignment_0_1()); }
(rule__Statement__JumpAssignment_0_1)
{ after(grammarAccess.getStatementAccess().getJumpAssignment_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Statement__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group_1__0__Impl
	rule__Statement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getStatementAction_1_0()); }
(

)
{ after(grammarAccess.getStatementAccess().getStatementAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getVariavelAssignment_1_1()); }
(rule__Statement__VariavelAssignment_1_1)
{ after(grammarAccess.getStatementAccess().getVariavelAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Simple_declaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Simple_declaration__Group__0__Impl
	rule__Simple_declaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Simple_declaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimple_declarationAccess().getVariavelAssignment_0()); }
(rule__Simple_declaration__VariavelAssignment_0)
{ after(grammarAccess.getSimple_declarationAccess().getVariavelAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Simple_declaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Simple_declaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Simple_declaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimple_declarationAccess().getSemicolonKeyword_1()); }

	';' 

{ after(grammarAccess.getSimple_declarationAccess().getSemicolonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Jump_statement__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Jump_statement__Group_2__0__Impl
	rule__Jump_statement__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Jump_statement__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJump_statementAccess().getReturnAction_2_0()); }
(

)
{ after(grammarAccess.getJump_statementAccess().getReturnAction_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Jump_statement__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Jump_statement__Group_2__1__Impl
	rule__Jump_statement__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Jump_statement__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJump_statementAccess().getReturnKeyword_2_1()); }

	'return' 

{ after(grammarAccess.getJump_statementAccess().getReturnKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Jump_statement__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Jump_statement__Group_2__2__Impl
	rule__Jump_statement__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Jump_statement__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJump_statementAccess().getExpAssignment_2_2()); }
(rule__Jump_statement__ExpAssignment_2_2)?
{ after(grammarAccess.getJump_statementAccess().getExpAssignment_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Jump_statement__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Jump_statement__Group_2__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Jump_statement__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJump_statementAccess().getSemicolonKeyword_2_3()); }

	';' 

{ after(grammarAccess.getJump_statementAccess().getSemicolonKeyword_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Jump_statement__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Jump_statement__Group_3__0__Impl
	rule__Jump_statement__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Jump_statement__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJump_statementAccess().getGotoKeyword_3_0()); }

	'goto' 

{ after(grammarAccess.getJump_statementAccess().getGotoKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Jump_statement__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Jump_statement__Group_3__1__Impl
	rule__Jump_statement__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Jump_statement__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJump_statementAccess().getIDTerminalRuleCall_3_1()); }
	RULE_ID
{ after(grammarAccess.getJump_statementAccess().getIDTerminalRuleCall_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Jump_statement__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Jump_statement__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Jump_statement__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJump_statementAccess().getSemicolonKeyword_3_2()); }

	';' 

{ after(grammarAccess.getJump_statementAccess().getSemicolonKeyword_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Block_declaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block_declaration__Group__0__Impl
	rule__Block_declaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Block_declaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlock_declarationAccess().getBlock_declarationAction_0()); }
(

)
{ after(grammarAccess.getBlock_declarationAccess().getBlock_declarationAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Block_declaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Block_declaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Block_declaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlock_declarationAccess().getVariavelAssignment_1()); }
(rule__Block_declaration__VariavelAssignment_1)
{ after(grammarAccess.getBlock_declarationAccess().getVariavelAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Literal__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_4__0__Impl
	rule__Literal__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getAlternatives_4_0()); }
(rule__Literal__Alternatives_4_0)
{ after(grammarAccess.getLiteralAccess().getAlternatives_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Literal__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getNullptrKeyword_4_1()); }

	'nullptr' 

{ after(grammarAccess.getLiteralAccess().getNullptrKeyword_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Declaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group__0__Impl
	rule__Declaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getDeclarationAction_0()); }
(

)
{ after(grammarAccess.getDeclarationAccess().getDeclarationAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Declaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getAlternatives_1()); }
(rule__Declaration__Alternatives_1)
{ after(grammarAccess.getDeclarationAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AliasDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AliasDeclaration__Group__0__Impl
	rule__AliasDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AliasDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAliasDeclarationAccess().getUsingKeyword_0()); }

	'using' 

{ after(grammarAccess.getAliasDeclarationAccess().getUsingKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AliasDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AliasDeclaration__Group__1__Impl
	rule__AliasDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AliasDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAliasDeclarationAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getAliasDeclarationAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AliasDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AliasDeclaration__Group__2__Impl
	rule__AliasDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AliasDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAliasDeclarationAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getAliasDeclarationAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AliasDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AliasDeclaration__Group__3__Impl
	rule__AliasDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AliasDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAliasDeclarationAccess().getTypeIdParserRuleCall_3()); }
	ruleTypeId
{ after(grammarAccess.getAliasDeclarationAccess().getTypeIdParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AliasDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AliasDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AliasDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAliasDeclarationAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getAliasDeclarationAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__SimpleDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleDeclaration__Group__0__Impl
	rule__SimpleDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleDeclarationAccess().getDeclarationSpecifierParserRuleCall_0()); }
(	ruleDeclarationSpecifier)*
{ after(grammarAccess.getSimpleDeclarationAccess().getDeclarationSpecifierParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleDeclaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleDeclarationAccess().getSimpleDeclarationSuffixParserRuleCall_1()); }
	ruleSimpleDeclarationSuffix
{ after(grammarAccess.getSimpleDeclarationAccess().getSimpleDeclarationSuffixParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SimpleOrFunctionDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleOrFunctionDeclaration__Group__0__Impl
	rule__SimpleOrFunctionDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleOrFunctionDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleOrFunctionDeclarationAccess().getDeclarationSpecifierParserRuleCall_0()); }
(	ruleDeclarationSpecifier)*
{ after(grammarAccess.getSimpleOrFunctionDeclarationAccess().getDeclarationSpecifierParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleOrFunctionDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleOrFunctionDeclaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleOrFunctionDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleOrFunctionDeclarationAccess().getAlternatives_1()); }
(rule__SimpleOrFunctionDeclaration__Alternatives_1)
{ after(grammarAccess.getSimpleOrFunctionDeclarationAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SimpleDeclarationSuffix__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleDeclarationSuffix__Group__0__Impl
	rule__SimpleDeclarationSuffix__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleDeclarationSuffix__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleDeclarationSuffixAccess().getInitDeclaratorListParserRuleCall_0()); }
(	ruleInitDeclaratorList)?
{ after(grammarAccess.getSimpleDeclarationSuffixAccess().getInitDeclaratorListParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleDeclarationSuffix__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleDeclarationSuffix__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleDeclarationSuffix__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleDeclarationSuffixAccess().getSemicolonKeyword_1()); }

	';' 

{ after(grammarAccess.getSimpleDeclarationSuffixAccess().getSemicolonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionDeclarationSuffix__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclarationSuffix__Group__0__Impl
	rule__FunctionDeclarationSuffix__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclarationSuffix__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationSuffixAccess().getFunctionDeclaratorParserRuleCall_0()); }
	ruleFunctionDeclarator
{ after(grammarAccess.getFunctionDeclarationSuffixAccess().getFunctionDeclaratorParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclarationSuffix__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclarationSuffix__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclarationSuffix__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationSuffixAccess().getAlternatives_1()); }
(rule__FunctionDeclarationSuffix__Alternatives_1)
{ after(grammarAccess.getFunctionDeclarationSuffixAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionDeclarationSuffix__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclarationSuffix__Group_1_1__0__Impl
	rule__FunctionDeclarationSuffix__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclarationSuffix__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationSuffixAccess().getEqualsSignKeyword_1_1_0()); }

	'=' 

{ after(grammarAccess.getFunctionDeclarationSuffixAccess().getEqualsSignKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclarationSuffix__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclarationSuffix__Group_1_1__1__Impl
	rule__FunctionDeclarationSuffix__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclarationSuffix__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationSuffixAccess().getDefaultKeyword_1_1_1()); }

	'default' 

{ after(grammarAccess.getFunctionDeclarationSuffixAccess().getDefaultKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclarationSuffix__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclarationSuffix__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclarationSuffix__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationSuffixAccess().getSemicolonKeyword_1_1_2()); }

	';' 

{ after(grammarAccess.getFunctionDeclarationSuffixAccess().getSemicolonKeyword_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FunctionDeclarationSuffix__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclarationSuffix__Group_1_2__0__Impl
	rule__FunctionDeclarationSuffix__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclarationSuffix__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationSuffixAccess().getEqualsSignKeyword_1_2_0()); }

	'=' 

{ after(grammarAccess.getFunctionDeclarationSuffixAccess().getEqualsSignKeyword_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclarationSuffix__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclarationSuffix__Group_1_2__1__Impl
	rule__FunctionDeclarationSuffix__Group_1_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclarationSuffix__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationSuffixAccess().getDeleteKeyword_1_2_1()); }

	'delete' 

{ after(grammarAccess.getFunctionDeclarationSuffixAccess().getDeleteKeyword_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclarationSuffix__Group_1_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclarationSuffix__Group_1_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclarationSuffix__Group_1_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationSuffixAccess().getSemicolonKeyword_1_2_2()); }

	';' 

{ after(grammarAccess.getFunctionDeclarationSuffixAccess().getSemicolonKeyword_1_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__StaticAssertDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StaticAssertDeclaration__Group__0__Impl
	rule__StaticAssertDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticAssertDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticAssertDeclarationAccess().getStatic_assertKeyword_0()); }

	'static_assert' 

{ after(grammarAccess.getStaticAssertDeclarationAccess().getStatic_assertKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StaticAssertDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StaticAssertDeclaration__Group__1__Impl
	rule__StaticAssertDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticAssertDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticAssertDeclarationAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getStaticAssertDeclarationAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StaticAssertDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StaticAssertDeclaration__Group__2__Impl
	rule__StaticAssertDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticAssertDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticAssertDeclarationAccess().getConstantExpressionParserRuleCall_2()); }
	ruleConstantExpression
{ after(grammarAccess.getStaticAssertDeclarationAccess().getConstantExpressionParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StaticAssertDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StaticAssertDeclaration__Group__3__Impl
	rule__StaticAssertDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticAssertDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticAssertDeclarationAccess().getCommaKeyword_3()); }

	',' 

{ after(grammarAccess.getStaticAssertDeclarationAccess().getCommaKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StaticAssertDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StaticAssertDeclaration__Group__4__Impl
	rule__StaticAssertDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticAssertDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticAssertDeclarationAccess().getSTRING_LITERALTerminalRuleCall_4()); }
	RULE_STRING_LITERAL
{ after(grammarAccess.getStaticAssertDeclarationAccess().getSTRING_LITERALTerminalRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StaticAssertDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StaticAssertDeclaration__Group__5__Impl
	rule__StaticAssertDeclaration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticAssertDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticAssertDeclarationAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getStaticAssertDeclarationAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StaticAssertDeclaration__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StaticAssertDeclaration__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticAssertDeclaration__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticAssertDeclarationAccess().getSemicolonKeyword_6()); }

	';' 

{ after(grammarAccess.getStaticAssertDeclarationAccess().getSemicolonKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__SimpleTypeSpecifier__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleTypeSpecifier__Group_0__0__Impl
	rule__SimpleTypeSpecifier__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleTypeSpecifier__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getColonColonKeyword_0_0()); }
(
	'::' 
)?
{ after(grammarAccess.getSimpleTypeSpecifierAccess().getColonColonKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleTypeSpecifier__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleTypeSpecifier__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleTypeSpecifier__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getAlternatives_0_1()); }
(rule__SimpleTypeSpecifier__Alternatives_0_1)
{ after(grammarAccess.getSimpleTypeSpecifierAccess().getAlternatives_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SimpleTypeSpecifier__Group_0_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleTypeSpecifier__Group_0_1_1__0__Impl
	rule__SimpleTypeSpecifier__Group_0_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleTypeSpecifier__Group_0_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getNestedNameSpecifierParserRuleCall_0_1_1_0()); }
	ruleNestedNameSpecifier
{ after(grammarAccess.getSimpleTypeSpecifierAccess().getNestedNameSpecifierParserRuleCall_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleTypeSpecifier__Group_0_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleTypeSpecifier__Group_0_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleTypeSpecifier__Group_0_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getAlternatives_0_1_1_1()); }
(rule__SimpleTypeSpecifier__Alternatives_0_1_1_1)
{ after(grammarAccess.getSimpleTypeSpecifierAccess().getAlternatives_0_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SimpleTypeSpecifier__Group_0_1_1_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleTypeSpecifier__Group_0_1_1_1_1__0__Impl
	rule__SimpleTypeSpecifier__Group_0_1_1_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleTypeSpecifier__Group_0_1_1_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getTemplateKeyword_0_1_1_1_1_0()); }

	'template' 

{ after(grammarAccess.getSimpleTypeSpecifierAccess().getTemplateKeyword_0_1_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleTypeSpecifier__Group_0_1_1_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleTypeSpecifier__Group_0_1_1_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleTypeSpecifier__Group_0_1_1_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getSimpleTemplateIdParserRuleCall_0_1_1_1_1_1()); }
	ruleSimpleTemplateId
{ after(grammarAccess.getSimpleTypeSpecifierAccess().getSimpleTemplateIdParserRuleCall_0_1_1_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DeclarationTypeSpecifier__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclarationTypeSpecifier__Group__0__Impl
	rule__DeclarationTypeSpecifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationTypeSpecifier__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationTypeSpecifierAccess().getDecltypeKeyword_0()); }

	'decltype' 

{ after(grammarAccess.getDeclarationTypeSpecifierAccess().getDecltypeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DeclarationTypeSpecifier__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclarationTypeSpecifier__Group__1__Impl
	rule__DeclarationTypeSpecifier__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationTypeSpecifier__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationTypeSpecifierAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getDeclarationTypeSpecifierAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DeclarationTypeSpecifier__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclarationTypeSpecifier__Group__2__Impl
	rule__DeclarationTypeSpecifier__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationTypeSpecifier__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationTypeSpecifierAccess().getExpressionParserRuleCall_2()); }
	ruleExpression
{ after(grammarAccess.getDeclarationTypeSpecifierAccess().getExpressionParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DeclarationTypeSpecifier__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclarationTypeSpecifier__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationTypeSpecifier__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationTypeSpecifierAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getDeclarationTypeSpecifierAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ElaboratedTypeSpecifier__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElaboratedTypeSpecifier__Group__0__Impl
	rule__ElaboratedTypeSpecifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElaboratedTypeSpecifier__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElaboratedTypeSpecifierAccess().getClassKeyParserRuleCall_0()); }
	ruleClassKey
{ after(grammarAccess.getElaboratedTypeSpecifierAccess().getClassKeyParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ElaboratedTypeSpecifier__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElaboratedTypeSpecifier__Group__1__Impl
	rule__ElaboratedTypeSpecifier__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ElaboratedTypeSpecifier__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElaboratedTypeSpecifierAccess().getColonColonKeyword_1()); }
(
	'::' 
)?
{ after(grammarAccess.getElaboratedTypeSpecifierAccess().getColonColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ElaboratedTypeSpecifier__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElaboratedTypeSpecifier__Group__2__Impl
	rule__ElaboratedTypeSpecifier__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ElaboratedTypeSpecifier__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElaboratedTypeSpecifierAccess().getNestedNameSpecifierParserRuleCall_2()); }
(	ruleNestedNameSpecifier)?
{ after(grammarAccess.getElaboratedTypeSpecifierAccess().getNestedNameSpecifierParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ElaboratedTypeSpecifier__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElaboratedTypeSpecifier__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElaboratedTypeSpecifier__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElaboratedTypeSpecifierAccess().getAlternatives_3()); }
(rule__ElaboratedTypeSpecifier__Alternatives_3)
{ after(grammarAccess.getElaboratedTypeSpecifierAccess().getAlternatives_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ElaboratedTypeSpecifier__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElaboratedTypeSpecifier__Group_3_1__0__Impl
	rule__ElaboratedTypeSpecifier__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ElaboratedTypeSpecifier__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElaboratedTypeSpecifierAccess().getTemplateKeyword_3_1_0()); }
(
	'template' 
)?
{ after(grammarAccess.getElaboratedTypeSpecifierAccess().getTemplateKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ElaboratedTypeSpecifier__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ElaboratedTypeSpecifier__Group_3_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ElaboratedTypeSpecifier__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getElaboratedTypeSpecifierAccess().getSimpleTemplateIdParserRuleCall_3_1_1()); }
	ruleSimpleTemplateId
{ after(grammarAccess.getElaboratedTypeSpecifierAccess().getSimpleTemplateIdParserRuleCall_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EnumSpecifier__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumSpecifier__Group__0__Impl
	rule__EnumSpecifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumSpecifier__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumSpecifierAccess().getEnumHeadParserRuleCall_0()); }
	ruleEnumHead
{ after(grammarAccess.getEnumSpecifierAccess().getEnumHeadParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumSpecifier__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumSpecifier__Group__1__Impl
	rule__EnumSpecifier__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumSpecifier__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumSpecifierAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getEnumSpecifierAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumSpecifier__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumSpecifier__Group__2__Impl
	rule__EnumSpecifier__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumSpecifier__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumSpecifierAccess().getGroup_2()); }
(rule__EnumSpecifier__Group_2__0)?
{ after(grammarAccess.getEnumSpecifierAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumSpecifier__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumSpecifier__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumSpecifier__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumSpecifierAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getEnumSpecifierAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__EnumSpecifier__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumSpecifier__Group_2__0__Impl
	rule__EnumSpecifier__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumSpecifier__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumSpecifierAccess().getEnumeratorListParserRuleCall_2_0()); }
	ruleEnumeratorList
{ after(grammarAccess.getEnumSpecifierAccess().getEnumeratorListParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumSpecifier__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumSpecifier__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumSpecifier__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumSpecifierAccess().getCommaKeyword_2_1()); }
(
	',' 
)?
{ after(grammarAccess.getEnumSpecifierAccess().getCommaKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EnumHead__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumHead__Group__0__Impl
	rule__EnumHead__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumHead__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumHeadAccess().getEnumKeyParserRuleCall_0()); }
	ruleEnumKey
{ after(grammarAccess.getEnumHeadAccess().getEnumKeyParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumHead__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumHead__Group__1__Impl
	rule__EnumHead__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumHead__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumHeadAccess().getAlternatives_1()); }
(rule__EnumHead__Alternatives_1)
{ after(grammarAccess.getEnumHeadAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumHead__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumHead__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumHead__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumHeadAccess().getEnumBaseParserRuleCall_2()); }
(	ruleEnumBase)?
{ after(grammarAccess.getEnumHeadAccess().getEnumBaseParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__EnumHead__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumHead__Group_1_1__0__Impl
	rule__EnumHead__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumHead__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumHeadAccess().getNestedNameSpecifierParserRuleCall_1_1_0()); }
	ruleNestedNameSpecifier
{ after(grammarAccess.getEnumHeadAccess().getNestedNameSpecifierParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumHead__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumHead__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumHead__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumHeadAccess().getIDTerminalRuleCall_1_1_1()); }
	RULE_ID
{ after(grammarAccess.getEnumHeadAccess().getIDTerminalRuleCall_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EnumKey__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumKey__Group_1__0__Impl
	rule__EnumKey__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumKey__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumKeyAccess().getEnumKeyword_1_0()); }

	'enum' 

{ after(grammarAccess.getEnumKeyAccess().getEnumKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumKey__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumKey__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumKey__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumKeyAccess().getClassKeyword_1_1()); }

	'class' 

{ after(grammarAccess.getEnumKeyAccess().getClassKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EnumKey__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumKey__Group_2__0__Impl
	rule__EnumKey__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumKey__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumKeyAccess().getEnumKeyword_2_0()); }

	'enum' 

{ after(grammarAccess.getEnumKeyAccess().getEnumKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumKey__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumKey__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumKey__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumKeyAccess().getStructKeyword_2_1()); }

	'struct' 

{ after(grammarAccess.getEnumKeyAccess().getStructKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EnumBase__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumBase__Group__0__Impl
	rule__EnumBase__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumBase__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumBaseAccess().getColonKeyword_0()); }

	':' 

{ after(grammarAccess.getEnumBaseAccess().getColonKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumBase__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumBase__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumBase__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getEnumBaseAccess().getTypeSpecifierParserRuleCall_1()); }
(	ruleTypeSpecifier)
{ after(grammarAccess.getEnumBaseAccess().getTypeSpecifierParserRuleCall_1()); }
)
(
{ before(grammarAccess.getEnumBaseAccess().getTypeSpecifierParserRuleCall_1()); }
(	ruleTypeSpecifier)*
{ after(grammarAccess.getEnumBaseAccess().getTypeSpecifierParserRuleCall_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EnumeratorList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumeratorList__Group__0__Impl
	rule__EnumeratorList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumeratorList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumeratorListAccess().getEnumerationDefinitionParserRuleCall_0()); }
	ruleEnumerationDefinition
{ after(grammarAccess.getEnumeratorListAccess().getEnumerationDefinitionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumeratorList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumeratorList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumeratorList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumeratorListAccess().getGroup_1()); }
(rule__EnumeratorList__Group_1__0)*
{ after(grammarAccess.getEnumeratorListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EnumeratorList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumeratorList__Group_1__0__Impl
	rule__EnumeratorList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumeratorList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumeratorListAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getEnumeratorListAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumeratorList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumeratorList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumeratorList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumeratorListAccess().getEnumerationDefinitionParserRuleCall_1_1()); }
	ruleEnumerationDefinition
{ after(grammarAccess.getEnumeratorListAccess().getEnumerationDefinitionParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EnumerationDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationDefinition__Group__0__Impl
	rule__EnumerationDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDefinitionAccess().getEnumeratorParserRuleCall_0()); }
	ruleEnumerator
{ after(grammarAccess.getEnumerationDefinitionAccess().getEnumeratorParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationDefinition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDefinitionAccess().getGroup_1()); }
(rule__EnumerationDefinition__Group_1__0)?
{ after(grammarAccess.getEnumerationDefinitionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EnumerationDefinition__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationDefinition__Group_1__0__Impl
	rule__EnumerationDefinition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDefinition__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDefinitionAccess().getEqualsSignKeyword_1_0()); }

	'=' 

{ after(grammarAccess.getEnumerationDefinitionAccess().getEqualsSignKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationDefinition__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationDefinition__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDefinition__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDefinitionAccess().getConstantExpressionParserRuleCall_1_1()); }
	ruleConstantExpression
{ after(grammarAccess.getEnumerationDefinitionAccess().getConstantExpressionParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NamespaceDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamespaceDefinition__Group__0__Impl
	rule__NamespaceDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceDefinitionAccess().getInlineKeyword_0()); }
(
	'inline' 
)?
{ after(grammarAccess.getNamespaceDefinitionAccess().getInlineKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamespaceDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamespaceDefinition__Group__1__Impl
	rule__NamespaceDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceDefinitionAccess().getNamespaceKeyword_1()); }

	'namespace' 

{ after(grammarAccess.getNamespaceDefinitionAccess().getNamespaceKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamespaceDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamespaceDefinition__Group__2__Impl
	rule__NamespaceDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceDefinitionAccess().getIDTerminalRuleCall_2()); }
(	RULE_ID)?
{ after(grammarAccess.getNamespaceDefinitionAccess().getIDTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamespaceDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamespaceDefinition__Group__3__Impl
	rule__NamespaceDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceDefinitionAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getNamespaceDefinitionAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamespaceDefinition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamespaceDefinition__Group__4__Impl
	rule__NamespaceDefinition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceDefinition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceDefinitionAccess().getDirtyAssignment_4()); }
(rule__NamespaceDefinition__DirtyAssignment_4)*
{ after(grammarAccess.getNamespaceDefinitionAccess().getDirtyAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamespaceDefinition__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamespaceDefinition__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceDefinition__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceDefinitionAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getNamespaceDefinitionAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__NamespaceAliasDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamespaceAliasDefinition__Group__0__Impl
	rule__NamespaceAliasDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceAliasDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceAliasDefinitionAccess().getNamespaceKeyword_0()); }

	'namespace' 

{ after(grammarAccess.getNamespaceAliasDefinitionAccess().getNamespaceKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamespaceAliasDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamespaceAliasDefinition__Group__1__Impl
	rule__NamespaceAliasDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceAliasDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceAliasDefinitionAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getNamespaceAliasDefinitionAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamespaceAliasDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamespaceAliasDefinition__Group__2__Impl
	rule__NamespaceAliasDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceAliasDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceAliasDefinitionAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getNamespaceAliasDefinitionAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamespaceAliasDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamespaceAliasDefinition__Group__3__Impl
	rule__NamespaceAliasDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceAliasDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceAliasDefinitionAccess().getQualifiedNamespaceSpecifierParserRuleCall_3()); }
	ruleQualifiedNamespaceSpecifier
{ after(grammarAccess.getNamespaceAliasDefinitionAccess().getQualifiedNamespaceSpecifierParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamespaceAliasDefinition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamespaceAliasDefinition__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceAliasDefinition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceAliasDefinitionAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getNamespaceAliasDefinitionAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__QualifiedNamespaceSpecifier__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNamespaceSpecifier__Group__0__Impl
	rule__QualifiedNamespaceSpecifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNamespaceSpecifier__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNamespaceSpecifierAccess().getColonColonKeyword_0()); }
(
	'::' 
)?
{ after(grammarAccess.getQualifiedNamespaceSpecifierAccess().getColonColonKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedNamespaceSpecifier__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNamespaceSpecifier__Group__1__Impl
	rule__QualifiedNamespaceSpecifier__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNamespaceSpecifier__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNamespaceSpecifierAccess().getNestedNameSpecifierParserRuleCall_1()); }
(	ruleNestedNameSpecifier)?
{ after(grammarAccess.getQualifiedNamespaceSpecifierAccess().getNestedNameSpecifierParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedNamespaceSpecifier__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNamespaceSpecifier__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNamespaceSpecifier__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNamespaceSpecifierAccess().getIDTerminalRuleCall_2()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNamespaceSpecifierAccess().getIDTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__UsingDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UsingDeclaration__Group__0__Impl
	rule__UsingDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UsingDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUsingDeclarationAccess().getUsingKeyword_0()); }

	'using' 

{ after(grammarAccess.getUsingDeclarationAccess().getUsingKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UsingDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UsingDeclaration__Group__1__Impl
	rule__UsingDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UsingDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUsingDeclarationAccess().getAlternatives_1()); }
(rule__UsingDeclaration__Alternatives_1)
{ after(grammarAccess.getUsingDeclarationAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UsingDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UsingDeclaration__Group__2__Impl
	rule__UsingDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UsingDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUsingDeclarationAccess().getUnqualifiedIdParserRuleCall_2()); }
	ruleUnqualifiedId
{ after(grammarAccess.getUsingDeclarationAccess().getUnqualifiedIdParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UsingDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UsingDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UsingDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUsingDeclarationAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getUsingDeclarationAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__UsingDeclaration__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UsingDeclaration__Group_1_1__0__Impl
	rule__UsingDeclaration__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UsingDeclaration__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUsingDeclarationAccess().getTypenameKeyword_1_1_0()); }
(
	'typename' 
)?
{ after(grammarAccess.getUsingDeclarationAccess().getTypenameKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UsingDeclaration__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UsingDeclaration__Group_1_1__1__Impl
	rule__UsingDeclaration__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UsingDeclaration__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUsingDeclarationAccess().getColonColonKeyword_1_1_1()); }
(
	'::' 
)?
{ after(grammarAccess.getUsingDeclarationAccess().getColonColonKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UsingDeclaration__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UsingDeclaration__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UsingDeclaration__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUsingDeclarationAccess().getNestedNameSpecifierParserRuleCall_1_1_2()); }
	ruleNestedNameSpecifier
{ after(grammarAccess.getUsingDeclarationAccess().getNestedNameSpecifierParserRuleCall_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__AsmDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AsmDefinition__Group__0__Impl
	rule__AsmDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AsmDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAsmDefinitionAccess().getAsmKeyword_0()); }

	'asm' 

{ after(grammarAccess.getAsmDefinitionAccess().getAsmKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AsmDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AsmDefinition__Group__1__Impl
	rule__AsmDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AsmDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAsmDefinitionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getAsmDefinitionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AsmDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AsmDefinition__Group__2__Impl
	rule__AsmDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AsmDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAsmDefinitionAccess().getSTRING_LITERALTerminalRuleCall_2()); }
	RULE_STRING_LITERAL
{ after(grammarAccess.getAsmDefinitionAccess().getSTRING_LITERALTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AsmDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AsmDefinition__Group__3__Impl
	rule__AsmDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AsmDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAsmDefinitionAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getAsmDefinitionAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AsmDefinition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AsmDefinition__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AsmDefinition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAsmDefinitionAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getAsmDefinitionAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__LinkageSpecification__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LinkageSpecification__Group__0__Impl
	rule__LinkageSpecification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LinkageSpecification__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkageSpecificationAccess().getLKSAction_0()); }
(

)
{ after(grammarAccess.getLinkageSpecificationAccess().getLKSAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LinkageSpecification__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LinkageSpecification__Group__1__Impl
	rule__LinkageSpecification__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LinkageSpecification__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkageSpecificationAccess().getExternKeyword_1()); }

	'extern' 

{ after(grammarAccess.getLinkageSpecificationAccess().getExternKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LinkageSpecification__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LinkageSpecification__Group__2__Impl
	rule__LinkageSpecification__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LinkageSpecification__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkageSpecificationAccess().getSTRING_LITERALTerminalRuleCall_2()); }
	RULE_STRING_LITERAL
{ after(grammarAccess.getLinkageSpecificationAccess().getSTRING_LITERALTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LinkageSpecification__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LinkageSpecification__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LinkageSpecification__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkageSpecificationAccess().getAlternatives_3()); }
(rule__LinkageSpecification__Alternatives_3)
{ after(grammarAccess.getLinkageSpecificationAccess().getAlternatives_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__LinkageSpecification__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LinkageSpecification__Group_3_1__0__Impl
	rule__LinkageSpecification__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LinkageSpecification__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkageSpecificationAccess().getLeftCurlyBracketKeyword_3_1_0()); }

	'{' 

{ after(grammarAccess.getLinkageSpecificationAccess().getLeftCurlyBracketKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LinkageSpecification__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LinkageSpecification__Group_3_1__1__Impl
	rule__LinkageSpecification__Group_3_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LinkageSpecification__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkageSpecificationAccess().getDirtyAssignment_3_1_1()); }
(rule__LinkageSpecification__DirtyAssignment_3_1_1)*
{ after(grammarAccess.getLinkageSpecificationAccess().getDirtyAssignment_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LinkageSpecification__Group_3_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LinkageSpecification__Group_3_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LinkageSpecification__Group_3_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkageSpecificationAccess().getRightCurlyBracketKeyword_3_1_2()); }

	'}' 

{ after(grammarAccess.getLinkageSpecificationAccess().getRightCurlyBracketKeyword_3_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__InitDeclaratorList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InitDeclaratorList__Group__0__Impl
	rule__InitDeclaratorList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InitDeclaratorList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitDeclaratorListAccess().getInitDeclaratorParserRuleCall_0()); }
	ruleInitDeclarator
{ after(grammarAccess.getInitDeclaratorListAccess().getInitDeclaratorParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InitDeclaratorList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InitDeclaratorList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InitDeclaratorList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitDeclaratorListAccess().getGroup_1()); }
(rule__InitDeclaratorList__Group_1__0)*
{ after(grammarAccess.getInitDeclaratorListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InitDeclaratorList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InitDeclaratorList__Group_1__0__Impl
	rule__InitDeclaratorList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InitDeclaratorList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitDeclaratorListAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getInitDeclaratorListAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InitDeclaratorList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InitDeclaratorList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InitDeclaratorList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitDeclaratorListAccess().getInitDeclaratorParserRuleCall_1_1()); }
	ruleInitDeclarator
{ after(grammarAccess.getInitDeclaratorListAccess().getInitDeclaratorParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InitDeclarator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InitDeclarator__Group__0__Impl
	rule__InitDeclarator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InitDeclarator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitDeclaratorAccess().getDeclaratorIdParserRuleCall_0()); }
	ruleDeclaratorId
{ after(grammarAccess.getInitDeclaratorAccess().getDeclaratorIdParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InitDeclarator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InitDeclarator__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InitDeclarator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitDeclaratorAccess().getInitializerParserRuleCall_1()); }
(	ruleInitializer)?
{ after(grammarAccess.getInitDeclaratorAccess().getInitializerParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionDeclarator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclarator__Group__0__Impl
	rule__FunctionDeclarator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclarator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclaratorAccess().getDeclaratorIdParserRuleCall_0()); }
	ruleDeclaratorId
{ after(grammarAccess.getFunctionDeclaratorAccess().getDeclaratorIdParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclarator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclarator__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclarator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclaratorAccess().getParametersAndQualifiersParserRuleCall_1()); }
	ruleParametersAndQualifiers
{ after(grammarAccess.getFunctionDeclaratorAccess().getParametersAndQualifiersParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParametersAndQualifiers__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParametersAndQualifiers__Group__0__Impl
	rule__ParametersAndQualifiers__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParametersAndQualifiers__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParametersAndQualifiersAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getParametersAndQualifiersAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParametersAndQualifiers__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParametersAndQualifiers__Group__1__Impl
	rule__ParametersAndQualifiers__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParametersAndQualifiers__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParametersAndQualifiersAccess().getParameterDeclarationClauseParserRuleCall_1()); }
(	ruleParameterDeclarationClause)?
{ after(grammarAccess.getParametersAndQualifiersAccess().getParameterDeclarationClauseParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParametersAndQualifiers__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParametersAndQualifiers__Group__2__Impl
	rule__ParametersAndQualifiers__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ParametersAndQualifiers__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParametersAndQualifiersAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getParametersAndQualifiersAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParametersAndQualifiers__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParametersAndQualifiers__Group__3__Impl
	rule__ParametersAndQualifiers__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ParametersAndQualifiers__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParametersAndQualifiersAccess().getAlternatives_3()); }
(rule__ParametersAndQualifiers__Alternatives_3)?
{ after(grammarAccess.getParametersAndQualifiersAccess().getAlternatives_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParametersAndQualifiers__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParametersAndQualifiers__Group__4__Impl
	rule__ParametersAndQualifiers__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ParametersAndQualifiers__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParametersAndQualifiersAccess().getAlternatives_4()); }
(rule__ParametersAndQualifiers__Alternatives_4)?
{ after(grammarAccess.getParametersAndQualifiersAccess().getAlternatives_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParametersAndQualifiers__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParametersAndQualifiers__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParametersAndQualifiers__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParametersAndQualifiersAccess().getExceptionSpecificationParserRuleCall_5()); }
(	ruleExceptionSpecification)?
{ after(grammarAccess.getParametersAndQualifiersAccess().getExceptionSpecificationParserRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__DeclaratorId__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclaratorId__Group__0__Impl
	rule__DeclaratorId__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaratorId__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorIdAccess().getFullStopFullStopFullStopKeyword_0()); }
(
	'...' 
)?
{ after(grammarAccess.getDeclaratorIdAccess().getFullStopFullStopFullStopKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DeclaratorId__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclaratorId__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaratorId__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorIdAccess().getIdExpressionParserRuleCall_1()); }
	ruleIdExpression
{ after(grammarAccess.getDeclaratorIdAccess().getIdExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParameterDeclarationClause__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclarationClause__Group_1__0__Impl
	rule__ParameterDeclarationClause__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclarationClause__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationClauseAccess().getParameterDeclarationListParserRuleCall_1_0()); }
	ruleParameterDeclarationList
{ after(grammarAccess.getParameterDeclarationClauseAccess().getParameterDeclarationListParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterDeclarationClause__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclarationClause__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclarationClause__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationClauseAccess().getGroup_1_1()); }
(rule__ParameterDeclarationClause__Group_1_1__0)?
{ after(grammarAccess.getParameterDeclarationClauseAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParameterDeclarationClause__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclarationClause__Group_1_1__0__Impl
	rule__ParameterDeclarationClause__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclarationClause__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationClauseAccess().getCommaKeyword_1_1_0()); }
(
	',' 
)?
{ after(grammarAccess.getParameterDeclarationClauseAccess().getCommaKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterDeclarationClause__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclarationClause__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclarationClause__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationClauseAccess().getFullStopFullStopFullStopKeyword_1_1_1()); }

	'...' 

{ after(grammarAccess.getParameterDeclarationClauseAccess().getFullStopFullStopFullStopKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParameterDeclarationList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclarationList__Group__0__Impl
	rule__ParameterDeclarationList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclarationList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationListAccess().getParameterDeclarationParserRuleCall_0()); }
	ruleParameterDeclaration
{ after(grammarAccess.getParameterDeclarationListAccess().getParameterDeclarationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterDeclarationList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclarationList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclarationList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationListAccess().getGroup_1()); }
(rule__ParameterDeclarationList__Group_1__0)*
{ after(grammarAccess.getParameterDeclarationListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParameterDeclarationList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclarationList__Group_1__0__Impl
	rule__ParameterDeclarationList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclarationList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationListAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getParameterDeclarationListAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterDeclarationList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclarationList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclarationList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationListAccess().getParameterDeclarationParserRuleCall_1_1()); }
	ruleParameterDeclaration
{ after(grammarAccess.getParameterDeclarationListAccess().getParameterDeclarationParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParameterDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclaration__Group__0__Impl
	rule__ParameterDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getParameterDeclarationAccess().getDeclarationSpecifierParserRuleCall_0()); }
(	ruleDeclarationSpecifier)
{ after(grammarAccess.getParameterDeclarationAccess().getDeclarationSpecifierParserRuleCall_0()); }
)
(
{ before(grammarAccess.getParameterDeclarationAccess().getDeclarationSpecifierParserRuleCall_0()); }
(	ruleDeclarationSpecifier)*
{ after(grammarAccess.getParameterDeclarationAccess().getDeclarationSpecifierParserRuleCall_0()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationAccess().getInitDeclaratorParserRuleCall_1()); }
	ruleInitDeclarator
{ after(grammarAccess.getParameterDeclarationAccess().getInitDeclaratorParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionBody__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionBody__Group_0__0__Impl
	rule__FunctionBody__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionBody__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionBodyAccess().getCtorInitializerParserRuleCall_0_0()); }
(	ruleCtorInitializer)?
{ after(grammarAccess.getFunctionBodyAccess().getCtorInitializerParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionBody__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionBody__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionBody__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionBodyAccess().getCompoundStatementParserRuleCall_0_1()); }
	ruleCompoundStatement
{ after(grammarAccess.getFunctionBodyAccess().getCompoundStatementParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__OperatorFunctionId__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatorFunctionId__Group__0__Impl
	rule__OperatorFunctionId__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorFunctionId__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorFunctionIdAccess().getOperatorKeyword_0()); }

	'operator' 

{ after(grammarAccess.getOperatorFunctionIdAccess().getOperatorKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperatorFunctionId__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatorFunctionId__Group__1__Impl
	rule__OperatorFunctionId__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorFunctionId__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorFunctionIdAccess().getOverloadableOperatorParserRuleCall_1()); }
	ruleOverloadableOperator
{ after(grammarAccess.getOperatorFunctionIdAccess().getOverloadableOperatorParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperatorFunctionId__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatorFunctionId__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorFunctionId__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorFunctionIdAccess().getGroup_2()); }
(rule__OperatorFunctionId__Group_2__0)?
{ after(grammarAccess.getOperatorFunctionIdAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__OperatorFunctionId__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatorFunctionId__Group_2__0__Impl
	rule__OperatorFunctionId__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorFunctionId__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorFunctionIdAccess().getLessThanSignKeyword_2_0()); }

	'<' 

{ after(grammarAccess.getOperatorFunctionIdAccess().getLessThanSignKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperatorFunctionId__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatorFunctionId__Group_2__1__Impl
	rule__OperatorFunctionId__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorFunctionId__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorFunctionIdAccess().getAlternatives_2_1()); }
(rule__OperatorFunctionId__Alternatives_2_1)*
{ after(grammarAccess.getOperatorFunctionIdAccess().getAlternatives_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperatorFunctionId__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatorFunctionId__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorFunctionId__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorFunctionIdAccess().getGreaterThanSignKeyword_2_2()); }

	'>' 

{ after(grammarAccess.getOperatorFunctionIdAccess().getGreaterThanSignKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__OverloadableOperator__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OverloadableOperator__Group_2__0__Impl
	rule__OverloadableOperator__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OverloadableOperator__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOverloadableOperatorAccess().getNewKeyword_2_0()); }

	'new' 

{ after(grammarAccess.getOverloadableOperatorAccess().getNewKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OverloadableOperator__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OverloadableOperator__Group_2__1__Impl
	rule__OverloadableOperator__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OverloadableOperator__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOverloadableOperatorAccess().getLeftSquareBracketKeyword_2_1()); }

	'[' 

{ after(grammarAccess.getOverloadableOperatorAccess().getLeftSquareBracketKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OverloadableOperator__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OverloadableOperator__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OverloadableOperator__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOverloadableOperatorAccess().getRightSquareBracketKeyword_2_2()); }

	']' 

{ after(grammarAccess.getOverloadableOperatorAccess().getRightSquareBracketKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__OverloadableOperator__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OverloadableOperator__Group_3__0__Impl
	rule__OverloadableOperator__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OverloadableOperator__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOverloadableOperatorAccess().getDeleteKeyword_3_0()); }

	'delete' 

{ after(grammarAccess.getOverloadableOperatorAccess().getDeleteKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OverloadableOperator__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OverloadableOperator__Group_3__1__Impl
	rule__OverloadableOperator__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OverloadableOperator__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOverloadableOperatorAccess().getLeftSquareBracketKeyword_3_1()); }

	'[' 

{ after(grammarAccess.getOverloadableOperatorAccess().getLeftSquareBracketKeyword_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OverloadableOperator__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OverloadableOperator__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OverloadableOperator__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOverloadableOperatorAccess().getRightSquareBracketKeyword_3_2()); }

	']' 

{ after(grammarAccess.getOverloadableOperatorAccess().getRightSquareBracketKeyword_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LiteralOperatorId__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralOperatorId__Group__0__Impl
	rule__LiteralOperatorId__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralOperatorId__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralOperatorIdAccess().getOperatorKeyword_0()); }

	'operator' 

{ after(grammarAccess.getLiteralOperatorIdAccess().getOperatorKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralOperatorId__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralOperatorId__Group__1__Impl
	rule__LiteralOperatorId__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralOperatorId__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralOperatorIdAccess().getQuotationMarkKeyword_1()); }

	'"' 

{ after(grammarAccess.getLiteralOperatorIdAccess().getQuotationMarkKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralOperatorId__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralOperatorId__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralOperatorId__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralOperatorIdAccess().getQuotationMarkKeyword_2()); }

	'"' 

{ after(grammarAccess.getLiteralOperatorIdAccess().getQuotationMarkKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TemplateDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemplateDeclaration__Group__0__Impl
	rule__TemplateDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateDeclarationAccess().getTemplateKeyword_0()); }

	'template' 

{ after(grammarAccess.getTemplateDeclarationAccess().getTemplateKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemplateDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemplateDeclaration__Group__1__Impl
	rule__TemplateDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateDeclarationAccess().getLessThanSignKeyword_1()); }

	'<' 

{ after(grammarAccess.getTemplateDeclarationAccess().getLessThanSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemplateDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemplateDeclaration__Group__2__Impl
	rule__TemplateDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateDeclarationAccess().getIDTerminalRuleCall_2()); }
	RULE_ID
{ after(grammarAccess.getTemplateDeclarationAccess().getIDTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemplateDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemplateDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateDeclarationAccess().getGreaterThanSignKeyword_3()); }

	'>' 

{ after(grammarAccess.getTemplateDeclarationAccess().getGreaterThanSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__TypeParameter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameter__Group__0__Impl
	rule__TypeParameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameter__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParameterAccess().getAlternatives_0()); }
(rule__TypeParameter__Alternatives_0)
{ after(grammarAccess.getTypeParameterAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeParameter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameter__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameter__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParameterAccess().getAlternatives_1()); }
(rule__TypeParameter__Alternatives_1)
{ after(grammarAccess.getTypeParameterAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TypeParameter__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameter__Group_1_0__0__Impl
	rule__TypeParameter__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameter__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParameterAccess().getFullStopFullStopFullStopKeyword_1_0_0()); }
(
	'...' 
)?
{ after(grammarAccess.getTypeParameterAccess().getFullStopFullStopFullStopKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeParameter__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameter__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameter__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParameterAccess().getIDTerminalRuleCall_1_0_1()); }
(	RULE_ID)?
{ after(grammarAccess.getTypeParameterAccess().getIDTerminalRuleCall_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TypeParameter__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameter__Group_1_1__0__Impl
	rule__TypeParameter__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameter__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParameterAccess().getIDTerminalRuleCall_1_1_0()); }
(	RULE_ID)?
{ after(grammarAccess.getTypeParameterAccess().getIDTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeParameter__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameter__Group_1_1__1__Impl
	rule__TypeParameter__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameter__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParameterAccess().getEqualsSignKeyword_1_1_1()); }

	'=' 

{ after(grammarAccess.getTypeParameterAccess().getEqualsSignKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeParameter__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameter__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameter__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParameterAccess().getTypeIdParserRuleCall_1_1_2()); }
	ruleTypeId
{ after(grammarAccess.getTypeParameterAccess().getTypeIdParserRuleCall_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SimpleTemplateId__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleTemplateId__Group__0__Impl
	rule__SimpleTemplateId__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleTemplateId__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTemplateIdAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getSimpleTemplateIdAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleTemplateId__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleTemplateId__Group__1__Impl
	rule__SimpleTemplateId__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleTemplateId__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTemplateIdAccess().getLessThanSignKeyword_1()); }

	'<' 

{ after(grammarAccess.getSimpleTemplateIdAccess().getLessThanSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleTemplateId__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleTemplateId__Group__2__Impl
	rule__SimpleTemplateId__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleTemplateId__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTemplateIdAccess().getTemplateArgumentListParserRuleCall_2()); }
	ruleTemplateArgumentList
{ after(grammarAccess.getSimpleTemplateIdAccess().getTemplateArgumentListParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleTemplateId__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleTemplateId__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleTemplateId__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTemplateIdAccess().getGreaterThanSignKeyword_3()); }

	'>' 

{ after(grammarAccess.getSimpleTemplateIdAccess().getGreaterThanSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__TemplateArgumentList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemplateArgumentList__Group__0__Impl
	rule__TemplateArgumentList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateArgumentList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateArgumentListAccess().getTemplateArgumentParserRuleCall_0()); }
	ruleTemplateArgument
{ after(grammarAccess.getTemplateArgumentListAccess().getTemplateArgumentParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemplateArgumentList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemplateArgumentList__Group__1__Impl
	rule__TemplateArgumentList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateArgumentList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateArgumentListAccess().getFullStopFullStopFullStopKeyword_1()); }
(
	'...' 
)?
{ after(grammarAccess.getTemplateArgumentListAccess().getFullStopFullStopFullStopKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemplateArgumentList__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemplateArgumentList__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateArgumentList__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateArgumentListAccess().getGroup_2()); }
(rule__TemplateArgumentList__Group_2__0)*
{ after(grammarAccess.getTemplateArgumentListAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TemplateArgumentList__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemplateArgumentList__Group_2__0__Impl
	rule__TemplateArgumentList__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateArgumentList__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateArgumentListAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getTemplateArgumentListAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemplateArgumentList__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemplateArgumentList__Group_2__1__Impl
	rule__TemplateArgumentList__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateArgumentList__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateArgumentListAccess().getTemplateArgumentParserRuleCall_2_1()); }
	ruleTemplateArgument
{ after(grammarAccess.getTemplateArgumentListAccess().getTemplateArgumentParserRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemplateArgumentList__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemplateArgumentList__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateArgumentList__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateArgumentListAccess().getFullStopFullStopFullStopKeyword_2_2()); }
(
	'...' 
)?
{ after(grammarAccess.getTemplateArgumentListAccess().getFullStopFullStopFullStopKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TypenameSpecifier__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypenameSpecifier__Group__0__Impl
	rule__TypenameSpecifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypenameSpecifier__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypenameSpecifierAccess().getTypenameKeyword_0()); }

	'typename' 

{ after(grammarAccess.getTypenameSpecifierAccess().getTypenameKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypenameSpecifier__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypenameSpecifier__Group__1__Impl
	rule__TypenameSpecifier__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypenameSpecifier__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypenameSpecifierAccess().getColonColonKeyword_1()); }
(
	'::' 
)?
{ after(grammarAccess.getTypenameSpecifierAccess().getColonColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypenameSpecifier__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypenameSpecifier__Group__2__Impl
	rule__TypenameSpecifier__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TypenameSpecifier__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypenameSpecifierAccess().getNestedNameSpecifierParserRuleCall_2()); }
	ruleNestedNameSpecifier
{ after(grammarAccess.getTypenameSpecifierAccess().getNestedNameSpecifierParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypenameSpecifier__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypenameSpecifier__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypenameSpecifier__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypenameSpecifierAccess().getAlternatives_3()); }
(rule__TypenameSpecifier__Alternatives_3)
{ after(grammarAccess.getTypenameSpecifierAccess().getAlternatives_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__TypenameSpecifier__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypenameSpecifier__Group_3_1__0__Impl
	rule__TypenameSpecifier__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypenameSpecifier__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypenameSpecifierAccess().getTemplateKeyword_3_1_0()); }
(
	'template' 
)?
{ after(grammarAccess.getTypenameSpecifierAccess().getTemplateKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypenameSpecifier__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypenameSpecifier__Group_3_1__1__Impl
	rule__TypenameSpecifier__Group_3_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypenameSpecifier__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypenameSpecifierAccess().getIDTerminalRuleCall_3_1_1()); }
	RULE_ID
{ after(grammarAccess.getTypenameSpecifierAccess().getIDTerminalRuleCall_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypenameSpecifier__Group_3_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypenameSpecifier__Group_3_1__2__Impl
	rule__TypenameSpecifier__Group_3_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TypenameSpecifier__Group_3_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypenameSpecifierAccess().getLessThanSignKeyword_3_1_2()); }

	'<' 

{ after(grammarAccess.getTypenameSpecifierAccess().getLessThanSignKeyword_3_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypenameSpecifier__Group_3_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypenameSpecifier__Group_3_1__3__Impl
	rule__TypenameSpecifier__Group_3_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TypenameSpecifier__Group_3_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypenameSpecifierAccess().getTemplateArgumentListParserRuleCall_3_1_3()); }
	ruleTemplateArgumentList
{ after(grammarAccess.getTypenameSpecifierAccess().getTemplateArgumentListParserRuleCall_3_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypenameSpecifier__Group_3_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypenameSpecifier__Group_3_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypenameSpecifier__Group_3_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypenameSpecifierAccess().getGreaterThanSignKeyword_3_1_4()); }

	'>' 

{ after(grammarAccess.getTypenameSpecifierAccess().getGreaterThanSignKeyword_3_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}













rule__FunctionTryBlock__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionTryBlock__Group__0__Impl
	rule__FunctionTryBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionTryBlock__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionTryBlockAccess().getTryKeyword_0()); }

	'try' 

{ after(grammarAccess.getFunctionTryBlockAccess().getTryKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionTryBlock__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionTryBlock__Group__1__Impl
	rule__FunctionTryBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionTryBlock__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionTryBlockAccess().getCtorInitializerParserRuleCall_1()); }
(	ruleCtorInitializer)?
{ after(grammarAccess.getFunctionTryBlockAccess().getCtorInitializerParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionTryBlock__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionTryBlock__Group__2__Impl
	rule__FunctionTryBlock__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionTryBlock__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionTryBlockAccess().getCompoundStatementParserRuleCall_2()); }
	ruleCompoundStatement
{ after(grammarAccess.getFunctionTryBlockAccess().getCompoundStatementParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionTryBlock__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionTryBlock__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionTryBlock__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getFunctionTryBlockAccess().getHandlerParserRuleCall_3()); }
(	ruleHandler)
{ after(grammarAccess.getFunctionTryBlockAccess().getHandlerParserRuleCall_3()); }
)
(
{ before(grammarAccess.getFunctionTryBlockAccess().getHandlerParserRuleCall_3()); }
(	ruleHandler)*
{ after(grammarAccess.getFunctionTryBlockAccess().getHandlerParserRuleCall_3()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Handler__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Handler__Group__0__Impl
	rule__Handler__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Handler__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHandlerAccess().getCatchKeyword_0()); }

	'catch' 

{ after(grammarAccess.getHandlerAccess().getCatchKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Handler__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Handler__Group__1__Impl
	rule__Handler__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Handler__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHandlerAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getHandlerAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Handler__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Handler__Group__2__Impl
	rule__Handler__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Handler__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHandlerAccess().getExceptionDeclarationParserRuleCall_2()); }
	ruleExceptionDeclaration
{ after(grammarAccess.getHandlerAccess().getExceptionDeclarationParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Handler__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Handler__Group__3__Impl
	rule__Handler__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Handler__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHandlerAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getHandlerAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Handler__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Handler__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Handler__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHandlerAccess().getCompoundStatementParserRuleCall_4()); }
	ruleCompoundStatement
{ after(grammarAccess.getHandlerAccess().getCompoundStatementParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ExceptionDeclaration__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExceptionDeclaration__Group_0__0__Impl
	rule__ExceptionDeclaration__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExceptionDeclaration__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getExceptionDeclarationAccess().getTypeSpecifierParserRuleCall_0_0()); }
(	ruleTypeSpecifier)
{ after(grammarAccess.getExceptionDeclarationAccess().getTypeSpecifierParserRuleCall_0_0()); }
)
(
{ before(grammarAccess.getExceptionDeclarationAccess().getTypeSpecifierParserRuleCall_0_0()); }
(	ruleTypeSpecifier)*
{ after(grammarAccess.getExceptionDeclarationAccess().getTypeSpecifierParserRuleCall_0_0()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExceptionDeclaration__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExceptionDeclaration__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExceptionDeclaration__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExceptionDeclarationAccess().getDeclaratorIdParserRuleCall_0_1()); }
(	ruleDeclaratorId)?
{ after(grammarAccess.getExceptionDeclarationAccess().getDeclaratorIdParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__DynamicExceptionSpecification__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DynamicExceptionSpecification__Group__0__Impl
	rule__DynamicExceptionSpecification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DynamicExceptionSpecification__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDynamicExceptionSpecificationAccess().getThrowKeyword_0()); }

	'throw' 

{ after(grammarAccess.getDynamicExceptionSpecificationAccess().getThrowKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DynamicExceptionSpecification__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DynamicExceptionSpecification__Group__1__Impl
	rule__DynamicExceptionSpecification__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DynamicExceptionSpecification__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDynamicExceptionSpecificationAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getDynamicExceptionSpecificationAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DynamicExceptionSpecification__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DynamicExceptionSpecification__Group__2__Impl
	rule__DynamicExceptionSpecification__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DynamicExceptionSpecification__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDynamicExceptionSpecificationAccess().getTypeIdListParserRuleCall_2()); }
	ruleTypeIdList
{ after(grammarAccess.getDynamicExceptionSpecificationAccess().getTypeIdListParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DynamicExceptionSpecification__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DynamicExceptionSpecification__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DynamicExceptionSpecification__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDynamicExceptionSpecificationAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getDynamicExceptionSpecificationAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__NoexceptSpecification__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NoexceptSpecification__Group__0__Impl
	rule__NoexceptSpecification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NoexceptSpecification__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNoexceptSpecificationAccess().getNoexceptKeyword_0()); }

	'noexcept' 

{ after(grammarAccess.getNoexceptSpecificationAccess().getNoexceptKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NoexceptSpecification__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NoexceptSpecification__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NoexceptSpecification__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNoexceptSpecificationAccess().getGroup_1()); }
(rule__NoexceptSpecification__Group_1__0)?
{ after(grammarAccess.getNoexceptSpecificationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NoexceptSpecification__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NoexceptSpecification__Group_1__0__Impl
	rule__NoexceptSpecification__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NoexceptSpecification__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNoexceptSpecificationAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getNoexceptSpecificationAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NoexceptSpecification__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NoexceptSpecification__Group_1__1__Impl
	rule__NoexceptSpecification__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NoexceptSpecification__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNoexceptSpecificationAccess().getConstantExpressionParserRuleCall_1_1()); }
	ruleConstantExpression
{ after(grammarAccess.getNoexceptSpecificationAccess().getConstantExpressionParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NoexceptSpecification__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NoexceptSpecification__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NoexceptSpecification__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNoexceptSpecificationAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getNoexceptSpecificationAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Body__DeclarationsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBodyAccess().getDeclarationsDeclarationParserRuleCall_2_0()); }
	ruleDeclaration{ after(grammarAccess.getBodyAccess().getDeclarationsDeclarationParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getTypeTypeParserRuleCall_1_0()); }
	ruleType{ after(grammarAccess.getFunctionDeclarationAccess().getTypeTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getFunctionDeclarationAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__ParamsAssignment_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getParamsParameterParserRuleCall_4_0_0()); }
	ruleParameter{ after(grammarAccess.getFunctionDeclarationAccess().getParamsParameterParserRuleCall_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__ParamsAssignment_4_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getParamsParameterParserRuleCall_4_1_1_0()); }
	ruleParameter{ after(grammarAccess.getFunctionDeclarationAccess().getParamsParameterParserRuleCall_4_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclaration__EscopoAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationAccess().getEscopoStatementParserRuleCall_7_0()); }
	rulestatement{ after(grammarAccess.getFunctionDeclarationAccess().getEscopoStatementParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_1_0()); }
	ruleType{ after(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Parameter__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__TypeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getTypeTypeParserRuleCall_1_0()); }
	ruleType{ after(grammarAccess.getVarDeclAccess().getTypeTypeParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VarDecl__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVarDeclAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getVarDeclAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Type__StsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeAccess().getStsSimple_type_specifierParserRuleCall_1_0()); }
	rulesimple_type_specifier{ after(grammarAccess.getTypeAccess().getStsSimple_type_specifierParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Simple_type_specifier__NameAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimple_type_specifierAccess().getNameIntKeyword_0_1_0()); }
(
{ before(grammarAccess.getSimple_type_specifierAccess().getNameIntKeyword_0_1_0()); }

	'int' 

{ after(grammarAccess.getSimple_type_specifierAccess().getNameIntKeyword_0_1_0()); }
)

{ after(grammarAccess.getSimple_type_specifierAccess().getNameIntKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Simple_type_specifier__NameAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimple_type_specifierAccess().getNameBoolKeyword_1_1_0()); }
(
{ before(grammarAccess.getSimple_type_specifierAccess().getNameBoolKeyword_1_1_0()); }

	'bool' 

{ after(grammarAccess.getSimple_type_specifierAccess().getNameBoolKeyword_1_1_0()); }
)

{ after(grammarAccess.getSimple_type_specifierAccess().getNameBoolKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Simple_type_specifier__NameAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimple_type_specifierAccess().getNameIDTerminalRuleCall_2_1_0()); }
	RULE_ID{ after(grammarAccess.getSimple_type_specifierAccess().getNameIDTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__JumpAssignment_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getJumpJump_statementParserRuleCall_0_1_0()); }
	rulejump_statement{ after(grammarAccess.getStatementAccess().getJumpJump_statementParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__VariavelAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getVariavelDeclaration_statementParserRuleCall_1_1_0()); }
	ruledeclaration_statement{ after(grammarAccess.getStatementAccess().getVariavelDeclaration_statementParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Simple_declaration__VariavelAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimple_declarationAccess().getVariavelVarDeclParserRuleCall_0_0()); }
	ruleVarDecl{ after(grammarAccess.getSimple_declarationAccess().getVariavelVarDeclParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Jump_statement__ExpAssignment_2_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJump_statementAccess().getExpExpressionParserRuleCall_2_2_0()); }
	ruleExpression{ after(grammarAccess.getJump_statementAccess().getExpExpressionParserRuleCall_2_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration_statement__VariaveisAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaration_statementAccess().getVariaveisBlock_declarationParserRuleCall_0()); }
	ruleblock_declaration{ after(grammarAccess.getDeclaration_statementAccess().getVariaveisBlock_declarationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Block_declaration__VariavelAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlock_declarationAccess().getVariavelSimple_declarationParserRuleCall_1_0()); }
	rulesimple_declaration{ after(grammarAccess.getBlock_declarationAccess().getVariavelSimple_declarationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__FuncaoAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getFuncaoFunctionDeclarationParserRuleCall_1_0_0()); }
	ruleFunctionDeclaration{ after(grammarAccess.getDeclarationAccess().getFuncaoFunctionDeclarationParserRuleCall_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__DirtyEAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getDirtyESimpleOrFunctionDeclarationParserRuleCall_1_1_0()); }
	ruleSimpleOrFunctionDeclaration{ after(grammarAccess.getDeclarationAccess().getDirtyESimpleOrFunctionDeclarationParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__DirtyAAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getDirtyABlockDeclarationParserRuleCall_1_2_0()); }
	ruleBlockDeclaration{ after(grammarAccess.getDeclarationAccess().getDirtyABlockDeclarationParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__DirtyBAssignment_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getDirtyBTemplateDeclarationParserRuleCall_1_3_0()); }
	ruleTemplateDeclaration{ after(grammarAccess.getDeclarationAccess().getDirtyBTemplateDeclarationParserRuleCall_1_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__DirtyCAssignment_1_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getDirtyCExplicitInstantiationParserRuleCall_1_4_0()); }
	ruleExplicitInstantiation{ after(grammarAccess.getDeclarationAccess().getDirtyCExplicitInstantiationParserRuleCall_1_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__DirtyDAssignment_1_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getDirtyDExplicitSpecializationParserRuleCall_1_5_0()); }
	ruleExplicitSpecialization{ after(grammarAccess.getDeclarationAccess().getDirtyDExplicitSpecializationParserRuleCall_1_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__DirtyAssignment_1_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getDirtyLinkageSpecificationParserRuleCall_1_6_0()); }
	ruleLinkageSpecification{ after(grammarAccess.getDeclarationAccess().getDirtyLinkageSpecificationParserRuleCall_1_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__DirtyAssignment_1_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getDirtyNamespaceDefinitionParserRuleCall_1_7_0()); }
	ruleNamespaceDefinition{ after(grammarAccess.getDeclarationAccess().getDirtyNamespaceDefinitionParserRuleCall_1_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceDefinition__DirtyAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceDefinitionAccess().getDirtyDeclarationParserRuleCall_4_0()); }
	ruleDeclaration{ after(grammarAccess.getNamespaceDefinitionAccess().getDirtyDeclarationParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LinkageSpecification__DirtyAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkageSpecificationAccess().getDirtyDeclarationParserRuleCall_3_0_0()); }
	ruleDeclaration{ after(grammarAccess.getLinkageSpecificationAccess().getDirtyDeclarationParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LinkageSpecification__DirtyAssignment_3_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkageSpecificationAccess().getDirtyDeclarationParserRuleCall_3_1_1_0()); }
	ruleDeclaration{ after(grammarAccess.getLinkageSpecificationAccess().getDirtyDeclarationParserRuleCall_3_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_HEADER_NAME : ('<' (RULE_ID|'.') '>'|'"' (RULE_ID|'.') '"');

fragment RULE_HEX_QUAD : RULE_HEXADECIMAL_DIGIT RULE_HEXADECIMAL_DIGIT RULE_HEXADECIMAL_DIGIT RULE_HEXADECIMAL_DIGIT;

fragment RULE_UNIVERSAL_CHARACTER_NAME : ('\\u' RULE_HEX_QUAD|'\\U' RULE_HEX_QUAD RULE_HEX_QUAD);

RULE_KEYWORD : ('alignas'|'alignof'|'asm'|'auto'|'bool'|'break'|'case'|'catch'|'char'|'char16_t'|'char32_t'|'class'|'const'|'constexpr'|'const_cast'|'continue'|'decltype'|'default'|'delete'|'do'|'double'|'dynamic_cast'|'else'|'enum'|'explicit'|'export'|'extern'|'false'|'float'|'for'|'friend'|'goto'|'if'|'inline'|'int'|'long'|'mutable'|'namespace'|'new'|'noexcept'|'nullptr'|'operator'|'private'|'protected'|'public'|'register'|'reinterpret_cast'|'return'|'short'|'signed'|'sizeof'|'static'|'static_assert'|'static_cast'|'struct'|'switch'|'template'|'this'|'thread_local'|'throw'|'true'|'try'|'typedef'|'typeid'|'typename'|'union'|'unsigned'|'using'|'virtual'|'void'|'volatile'|'wchar_t'|'while');

RULE_ID : (RULE_NONDIGIT|RULE_UNIVERSAL_CHARACTER_NAME) (RULE_DIGIT|RULE_NONDIGIT|RULE_UNIVERSAL_CHARACTER_NAME)*;

fragment RULE_NONDIGIT : ('a'..'z'|'A'..'Z'|'_');

fragment RULE_DIGIT : '0'..'9';

RULE_INT : (RULE_DECIMAL_LITERAL|RULE_OCTAL_LITERAL|RULE_HEXADECIMAL_LITERAL) RULE_INTEGER_SUFFIX?;

fragment RULE_DECIMAL_LITERAL : '1'..'9' RULE_DIGIT*;

fragment RULE_OCTAL_LITERAL : '0' RULE_OCTAL_DIGIT*;

fragment RULE_HEXADECIMAL_LITERAL : ('0x'|'0X') RULE_HEXADECIMAL_DIGIT+;

fragment RULE_OCTAL_DIGIT : '0'..'7';

fragment RULE_HEXADECIMAL_DIGIT : ('0'..'9'|'A'..'F');

fragment RULE_INTEGER_SUFFIX : (('u'|'U') ('l'|'L'|'ll'|'LL')?|('l'|'L'|'ll'|'LL') ('u'|'U')?);

RULE_CHARACTER_LITERAL : ('u'|'U'|'L')? '\'' RULE_C_CHAR+ '\'';

fragment RULE_C_CHAR : (~(('\''|'\\'|'\n'))|RULE_ESCAPE_SEQUENCE|RULE_UNIVERSAL_CHARACTER_NAME);

fragment RULE_ESCAPE_SEQUENCE : (RULE_SIMPLE_ESCAPE_SEQUENCE|RULE_OCTAL_ESCAPE_SEQUENCE|RULE_HEXADECIMAL_ESCAPE_SEQUENCE);

fragment RULE_SIMPLE_ESCAPE_SEQUENCE : '\\' ('\''|'"'|'?'|'\\'|'a'|'b'|'f'|'n'|'r'|'t'|'v');

fragment RULE_OCTAL_ESCAPE_SEQUENCE : '\\' RULE_OCTAL_DIGIT RULE_OCTAL_DIGIT RULE_OCTAL_DIGIT;

fragment RULE_HEXADECIMAL_ESCAPE_SEQUENCE : '\\x' RULE_HEXADECIMAL_DIGIT+;

RULE_FLOATING_LITERAL : (RULE_FRACTIONAL_CONSTANT RULE_EXPONENT_PART?|RULE_DIGIT+ RULE_EXPONENT_PART) ('f'|'l'|'F'|'L')?;

fragment RULE_FRACTIONAL_CONSTANT : (RULE_DIGIT* '.' RULE_DIGIT+|RULE_DIGIT+ '.');

fragment RULE_EXPONENT_PART : ('e'|'E') ('+'|'-')? RULE_DIGIT+;

RULE_STRING_LITERAL : RULE_ENC_PREFIX? '"' RULE_SCHAR+ '"';

fragment RULE_ENC_PREFIX : ('u8'|'u'|'U'|'L');

fragment RULE_SCHAR : (~(('"'|'\\'|'\n'))|RULE_ESCAPE_SEQUENCE|RULE_UNIVERSAL_CHARACTER_NAME);

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


