/*
* generated by Xtext
*/
package org.xtext.example.mydsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {
	
	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser createParser() {
		org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser result = new org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getDeclarationAccess().getAlternatives_1(), "rule__Declaration__Alternatives_1");
					put(grammarAccess.getLinkageSpecificationAccess().getAlternatives_3(), "rule__LinkageSpecification__Alternatives_3");
					put(grammarAccess.getHEADER_NAMEAccess().getAlternatives(), "rule__HEADER_NAME__Alternatives");
					put(grammarAccess.getHEADER_NAMEAccess().getAlternatives_0_1(), "rule__HEADER_NAME__Alternatives_0_1");
					put(grammarAccess.getControl_lineAccess().getAlternatives(), "rule__Control_line__Alternatives");
					put(grammarAccess.getGroup_partAccess().getAlternatives(), "rule__Group_part__Alternatives");
					put(grammarAccess.getIf_groupAccess().getAlternatives(), "rule__If_group__Alternatives");
					put(grammarAccess.getNoPtrStatementAccess().getAlternatives_1(), "rule__NoPtrStatement__Alternatives_1");
					put(grammarAccess.getNoPtrExpressionAccess().getOpAlternatives_2_0_0(), "rule__NoPtrExpression__OpAlternatives_2_0_0");
					put(grammarAccess.getNoPtrTerminalExpressionAccess().getAlternatives(), "rule__NoPtrTerminalExpression__Alternatives");
					put(grammarAccess.getNoPtrCasesAccess().getAlternatives(), "rule__NoPtrCases__Alternatives");
					put(grammarAccess.getParameterAccess().getAlternatives_3(), "rule__Parameter__Alternatives_3");
					put(grammarAccess.getVarDeclAccess().getAlternatives_3(), "rule__VarDecl__Alternatives_3");
					put(grammarAccess.getSimple_type_specifierAccess().getAlternatives(), "rule__Simple_type_specifier__Alternatives");
					put(grammarAccess.getReturnExprAccess().getAlternatives(), "rule__ReturnExpr__Alternatives");
					put(grammarAccess.getReturnExprAccess().getValueAlternatives_1_1_0(), "rule__ReturnExpr__ValueAlternatives_1_1_0");
					put(grammarAccess.getTokenAccess().getAlternatives(), "rule__Token__Alternatives");
					put(grammarAccess.getDIGITAccess().getAlternatives(), "rule__DIGIT__Alternatives");
					put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
					put(grammarAccess.getLiteralAccess().getAlternatives_4_0(), "rule__Literal__Alternatives_4_0");
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getLabeledStatementAccess().getAlternatives(), "rule__LabeledStatement__Alternatives");
					put(grammarAccess.getConditionAccess().getAlternatives(), "rule__Condition__Alternatives");
					put(grammarAccess.getConditionAccess().getAlternatives_1_2(), "rule__Condition__Alternatives_1_2");
					put(grammarAccess.getIterationStatementAccess().getAlternatives(), "rule__IterationStatement__Alternatives");
					put(grammarAccess.getForInitializationStatementAccess().getAlternatives(), "rule__ForInitializationStatement__Alternatives");
					put(grammarAccess.getJumpStatementAccess().getAlternatives(), "rule__JumpStatement__Alternatives");
					put(grammarAccess.getDeclarationStatementAccess().getAlternatives(), "rule__DeclarationStatement__Alternatives");
					put(grammarAccess.getBlockDeclarationAccess().getAlternatives(), "rule__BlockDeclaration__Alternatives");
					put(grammarAccess.getSimpleOrFunctionDeclarationAccess().getAlternatives_1(), "rule__SimpleOrFunctionDeclaration__Alternatives_1");
					put(grammarAccess.getFunctionDeclarationSuffixAccess().getAlternatives_1(), "rule__FunctionDeclarationSuffix__Alternatives_1");
					put(grammarAccess.getDeclarationSpecifierAccess().getAlternatives(), "rule__DeclarationSpecifier__Alternatives");
					put(grammarAccess.getStorageClassSpecifierAccess().getAlternatives(), "rule__StorageClassSpecifier__Alternatives");
					put(grammarAccess.getFunctionSpecifierAccess().getAlternatives(), "rule__FunctionSpecifier__Alternatives");
					put(grammarAccess.getTypeSpecifierAccess().getAlternatives(), "rule__TypeSpecifier__Alternatives");
					put(grammarAccess.getTrailingTypeSpecifierAccess().getAlternatives(), "rule__TrailingTypeSpecifier__Alternatives");
					put(grammarAccess.getSimpleTypeSpecifierAccess().getAlternatives(), "rule__SimpleTypeSpecifier__Alternatives");
					put(grammarAccess.getSimpleTypeSpecifierAccess().getAlternatives_0_1(), "rule__SimpleTypeSpecifier__Alternatives_0_1");
					put(grammarAccess.getSimpleTypeSpecifierAccess().getAlternatives_0_1_1_1(), "rule__SimpleTypeSpecifier__Alternatives_0_1_1_1");
					put(grammarAccess.getTypeNameAccess().getAlternatives(), "rule__TypeName__Alternatives");
					put(grammarAccess.getEnumHeadAccess().getAlternatives_1(), "rule__EnumHead__Alternatives_1");
					put(grammarAccess.getEnumKeyAccess().getAlternatives(), "rule__EnumKey__Alternatives");
					put(grammarAccess.getUsingDeclarationAccess().getAlternatives_1(), "rule__UsingDeclaration__Alternatives_1");
					put(grammarAccess.getParametersAndQualifiersAccess().getAlternatives_3(), "rule__ParametersAndQualifiers__Alternatives_3");
					put(grammarAccess.getParametersAndQualifiersAccess().getAlternatives_4(), "rule__ParametersAndQualifiers__Alternatives_4");
					put(grammarAccess.getParameterDeclarationClauseAccess().getAlternatives(), "rule__ParameterDeclarationClause__Alternatives");
					put(grammarAccess.getFunctionBodyAccess().getAlternatives(), "rule__FunctionBody__Alternatives");
					put(grammarAccess.getInitializerAccess().getAlternatives(), "rule__Initializer__Alternatives");
					put(grammarAccess.getBraceOrEqualInitializerAccess().getAlternatives(), "rule__BraceOrEqualInitializer__Alternatives");
					put(grammarAccess.getInitializerClauseAccess().getAlternatives(), "rule__InitializerClause__Alternatives");
					put(grammarAccess.getClassVirtualSpecifierAccess().getAlternatives(), "rule__ClassVirtualSpecifier__Alternatives");
					put(grammarAccess.getClassKeyAccess().getAlternatives(), "rule__ClassKey__Alternatives");
					put(grammarAccess.getMemberSpecificationAccess().getAlternatives_0(), "rule__MemberSpecification__Alternatives_0");
					put(grammarAccess.getMemberDeclarationAccess().getAlternatives(), "rule__MemberDeclaration__Alternatives");
					put(grammarAccess.getMemberOrFunctionDeclarationAccess().getAlternatives_1(), "rule__MemberOrFunctionDeclaration__Alternatives_1");
					put(grammarAccess.getMemberDeclaratorAccess().getAlternatives_2(), "rule__MemberDeclarator__Alternatives_2");
					put(grammarAccess.getVirtualSpecifierAccess().getAlternatives(), "rule__VirtualSpecifier__Alternatives");
					put(grammarAccess.getBaseSpecifierAccess().getAlternatives_0(), "rule__BaseSpecifier__Alternatives_0");
					put(grammarAccess.getClassOrDeclarationTypeAccess().getAlternatives(), "rule__ClassOrDeclarationType__Alternatives");
					put(grammarAccess.getAccessSpecifierAccess().getAlternatives(), "rule__AccessSpecifier__Alternatives");
					put(grammarAccess.getOperatorFunctionIdAccess().getAlternatives_2_1(), "rule__OperatorFunctionId__Alternatives_2_1");
					put(grammarAccess.getOverloadableOperatorAccess().getAlternatives(), "rule__OverloadableOperator__Alternatives");
					put(grammarAccess.getTemplateParameterAccess().getAlternatives(), "rule__TemplateParameter__Alternatives");
					put(grammarAccess.getTypeParameterAccess().getAlternatives_0(), "rule__TypeParameter__Alternatives_0");
					put(grammarAccess.getTypeParameterAccess().getAlternatives_1(), "rule__TypeParameter__Alternatives_1");
					put(grammarAccess.getTemplateIdAccess().getAlternatives(), "rule__TemplateId__Alternatives");
					put(grammarAccess.getTemplateIdAccess().getAlternatives_1_0(), "rule__TemplateId__Alternatives_1_0");
					put(grammarAccess.getTemplateArgumentAccess().getAlternatives(), "rule__TemplateArgument__Alternatives");
					put(grammarAccess.getTypenameSpecifierAccess().getAlternatives_3(), "rule__TypenameSpecifier__Alternatives_3");
					put(grammarAccess.getExceptionDeclarationAccess().getAlternatives(), "rule__ExceptionDeclaration__Alternatives");
					put(grammarAccess.getExceptionSpecificationAccess().getAlternatives(), "rule__ExceptionSpecification__Alternatives");
					put(grammarAccess.getBodyAccess().getGroup(), "rule__Body__Group__0");
					put(grammarAccess.getDeclarationAccess().getGroup(), "rule__Declaration__Group__0");
					put(grammarAccess.getDeclarationAccess().getGroup_1_2(), "rule__Declaration__Group_1_2__0");
					put(grammarAccess.getNamespaceDefinitionAccess().getGroup(), "rule__NamespaceDefinition__Group__0");
					put(grammarAccess.getLinkageSpecificationAccess().getGroup(), "rule__LinkageSpecification__Group__0");
					put(grammarAccess.getLinkageSpecificationAccess().getGroup_3_1(), "rule__LinkageSpecification__Group_3_1__0");
					put(grammarAccess.getElif_groupAccess().getGroup(), "rule__Elif_group__Group__0");
					put(grammarAccess.getHEADER_NAMEAccess().getGroup_0(), "rule__HEADER_NAME__Group_0__0");
					put(grammarAccess.getElse_groupAccess().getGroup(), "rule__Else_group__Group__0");
					put(grammarAccess.getControl_lineAccess().getGroup_0(), "rule__Control_line__Group_0__0");
					put(grammarAccess.getControl_lineAccess().getGroup_1(), "rule__Control_line__Group_1__0");
					put(grammarAccess.getControl_lineAccess().getGroup_2(), "rule__Control_line__Group_2__0");
					put(grammarAccess.getControl_lineAccess().getGroup_3(), "rule__Control_line__Group_3__0");
					put(grammarAccess.getControl_lineAccess().getGroup_4(), "rule__Control_line__Group_4__0");
					put(grammarAccess.getControl_lineAccess().getGroup_5(), "rule__Control_line__Group_5__0");
					put(grammarAccess.getControl_lineAccess().getGroup_6(), "rule__Control_line__Group_6__0");
					put(grammarAccess.getIf_actionAccess().getGroup(), "rule__If_action__Group__0");
					put(grammarAccess.getIf_groupAccess().getGroup_0(), "rule__If_group__Group_0__0");
					put(grammarAccess.getIf_groupAccess().getGroup_1(), "rule__If_group__Group_1__0");
					put(grammarAccess.getIf_groupAccess().getGroup_2(), "rule__If_group__Group_2__0");
					put(grammarAccess.getFunctionDeclarationAccess().getGroup(), "rule__FunctionDeclaration__Group__0");
					put(grammarAccess.getFunctionDeclarationAccess().getGroup_5(), "rule__FunctionDeclaration__Group_5__0");
					put(grammarAccess.getFunctionDeclarationAccess().getGroup_5_1(), "rule__FunctionDeclaration__Group_5_1__0");
					put(grammarAccess.getFunctionChamadaAccess().getGroup(), "rule__FunctionChamada__Group__0");
					put(grammarAccess.getFunctionChamadaAccess().getGroup_3(), "rule__FunctionChamada__Group_3__0");
					put(grammarAccess.getFunctionChamadaAccess().getGroup_3_1(), "rule__FunctionChamada__Group_3_1__0");
					put(grammarAccess.getNoPtrStatementAccess().getGroup(), "rule__NoPtrStatement__Group__0");
					put(grammarAccess.getNoPtrMudancaAccess().getGroup(), "rule__NoPtrMudanca__Group__0");
					put(grammarAccess.getNoPtrMudancaAccess().getGroup_2(), "rule__NoPtrMudanca__Group_2__0");
					put(grammarAccess.getNoPtrExpressionAccess().getGroup(), "rule__NoPtrExpression__Group__0");
					put(grammarAccess.getNoPtrExpressionAccess().getGroup_2(), "rule__NoPtrExpression__Group_2__0");
					put(grammarAccess.getNoPtrTerminalExpressionAccess().getGroup_0(), "rule__NoPtrTerminalExpression__Group_0__0");
					put(grammarAccess.getNoPtrTerminalExpressionAccess().getGroup_1(), "rule__NoPtrTerminalExpression__Group_1__0");
					put(grammarAccess.getNoPtrSelectAccess().getGroup(), "rule__NoPtrSelect__Group__0");
					put(grammarAccess.getNoPtrCasesAccess().getGroup_0(), "rule__NoPtrCases__Group_0__0");
					put(grammarAccess.getNoPtrCasesAccess().getGroup_1(), "rule__NoPtrCases__Group_1__0");
					put(grammarAccess.getParameterAccess().getGroup(), "rule__Parameter__Group__0");
					put(grammarAccess.getParameterAccess().getGroup_5(), "rule__Parameter__Group_5__0");
					put(grammarAccess.getParameterAccess().getGroup_6(), "rule__Parameter__Group_6__0");
					put(grammarAccess.getVarDeclAccess().getGroup(), "rule__VarDecl__Group__0");
					put(grammarAccess.getVarDeclAccess().getGroup_5(), "rule__VarDecl__Group_5__0");
					put(grammarAccess.getVarDeclAccess().getGroup_6(), "rule__VarDecl__Group_6__0");
					put(grammarAccess.getTypeAccess().getGroup(), "rule__Type__Group__0");
					put(grammarAccess.getSimple_type_specifierAccess().getGroup_0(), "rule__Simple_type_specifier__Group_0__0");
					put(grammarAccess.getSimple_type_specifierAccess().getGroup_1(), "rule__Simple_type_specifier__Group_1__0");
					put(grammarAccess.getSimple_type_specifierAccess().getGroup_2(), "rule__Simple_type_specifier__Group_2__0");
					put(grammarAccess.getSimple_type_specifierAccess().getGroup_3(), "rule__Simple_type_specifier__Group_3__0");
					put(grammarAccess.getSimple_declarationAccess().getGroup(), "rule__Simple_declaration__Group__0");
					put(grammarAccess.getReturnAccess().getGroup(), "rule__Return__Group__0");
					put(grammarAccess.getReturnExprAccess().getGroup_0(), "rule__ReturnExpr__Group_0__0");
					put(grammarAccess.getReturnExprAccess().getGroup_1(), "rule__ReturnExpr__Group_1__0");
					put(grammarAccess.getReturnExprAccess().getGroup_2(), "rule__ReturnExpr__Group_2__0");
					put(grammarAccess.getReturnExprAccess().getGroup_3(), "rule__ReturnExpr__Group_3__0");
					put(grammarAccess.getReturnExprAccess().getGroup_4(), "rule__ReturnExpr__Group_4__0");
					put(grammarAccess.getReturnExprAccess().getGroup_4_2(), "rule__ReturnExpr__Group_4_2__0");
					put(grammarAccess.getBlock_declarationAccess().getGroup(), "rule__Block_declaration__Group__0");
					put(grammarAccess.getTokenAccess().getGroup_2(), "rule__Token__Group_2__0");
					put(grammarAccess.getLiteralAccess().getGroup_4(), "rule__Literal__Group_4__0");
					put(grammarAccess.getLabeledStatementAccess().getGroup_0(), "rule__LabeledStatement__Group_0__0");
					put(grammarAccess.getLabeledStatementAccess().getGroup_1(), "rule__LabeledStatement__Group_1__0");
					put(grammarAccess.getLabeledStatementAccess().getGroup_2(), "rule__LabeledStatement__Group_2__0");
					put(grammarAccess.getExpressionStatementAccess().getGroup(), "rule__ExpressionStatement__Group__0");
					put(grammarAccess.getCompoundStatementAccess().getGroup(), "rule__CompoundStatement__Group__0");
					put(grammarAccess.getSelectionStatementAccess().getGroup(), "rule__SelectionStatement__Group__0");
					put(grammarAccess.getSelectionStatementAccess().getGroup_5(), "rule__SelectionStatement__Group_5__0");
					put(grammarAccess.getConditionAccess().getGroup_1(), "rule__Condition__Group_1__0");
					put(grammarAccess.getConditionAccess().getGroup_1_2_0(), "rule__Condition__Group_1_2_0__0");
					put(grammarAccess.getIterationStatementAccess().getGroup_0(), "rule__IterationStatement__Group_0__0");
					put(grammarAccess.getIterationStatementAccess().getGroup_1(), "rule__IterationStatement__Group_1__0");
					put(grammarAccess.getIterationStatementAccess().getGroup_2(), "rule__IterationStatement__Group_2__0");
					put(grammarAccess.getJumpStatementAccess().getGroup_0(), "rule__JumpStatement__Group_0__0");
					put(grammarAccess.getJumpStatementAccess().getGroup_1(), "rule__JumpStatement__Group_1__0");
					put(grammarAccess.getJumpStatementAccess().getGroup_2(), "rule__JumpStatement__Group_2__0");
					put(grammarAccess.getAliasDeclarationAccess().getGroup(), "rule__AliasDeclaration__Group__0");
					put(grammarAccess.getSimpleDeclarationAccess().getGroup(), "rule__SimpleDeclaration__Group__0");
					put(grammarAccess.getSimpleOrFunctionDeclarationAccess().getGroup(), "rule__SimpleOrFunctionDeclaration__Group__0");
					put(grammarAccess.getSimpleDeclarationSuffixAccess().getGroup(), "rule__SimpleDeclarationSuffix__Group__0");
					put(grammarAccess.getFunctionDeclarationSuffixAccess().getGroup(), "rule__FunctionDeclarationSuffix__Group__0");
					put(grammarAccess.getFunctionDeclarationSuffixAccess().getGroup_1_1(), "rule__FunctionDeclarationSuffix__Group_1_1__0");
					put(grammarAccess.getFunctionDeclarationSuffixAccess().getGroup_1_2(), "rule__FunctionDeclarationSuffix__Group_1_2__0");
					put(grammarAccess.getStaticAssertDeclarationAccess().getGroup(), "rule__StaticAssertDeclaration__Group__0");
					put(grammarAccess.getSimpleTypeSpecifierAccess().getGroup_0(), "rule__SimpleTypeSpecifier__Group_0__0");
					put(grammarAccess.getSimpleTypeSpecifierAccess().getGroup_0_1_1(), "rule__SimpleTypeSpecifier__Group_0_1_1__0");
					put(grammarAccess.getSimpleTypeSpecifierAccess().getGroup_0_1_1_1_1(), "rule__SimpleTypeSpecifier__Group_0_1_1_1_1__0");
					put(grammarAccess.getDeclarationTypeSpecifierAccess().getGroup(), "rule__DeclarationTypeSpecifier__Group__0");
					put(grammarAccess.getEnumSpecifierAccess().getGroup(), "rule__EnumSpecifier__Group__0");
					put(grammarAccess.getEnumSpecifierAccess().getGroup_2(), "rule__EnumSpecifier__Group_2__0");
					put(grammarAccess.getEnumHeadAccess().getGroup(), "rule__EnumHead__Group__0");
					put(grammarAccess.getEnumHeadAccess().getGroup_1_1(), "rule__EnumHead__Group_1_1__0");
					put(grammarAccess.getEnumKeyAccess().getGroup_1(), "rule__EnumKey__Group_1__0");
					put(grammarAccess.getEnumKeyAccess().getGroup_2(), "rule__EnumKey__Group_2__0");
					put(grammarAccess.getEnumBaseAccess().getGroup(), "rule__EnumBase__Group__0");
					put(grammarAccess.getEnumeratorListAccess().getGroup(), "rule__EnumeratorList__Group__0");
					put(grammarAccess.getEnumeratorListAccess().getGroup_1(), "rule__EnumeratorList__Group_1__0");
					put(grammarAccess.getEnumerationDefinitionAccess().getGroup(), "rule__EnumerationDefinition__Group__0");
					put(grammarAccess.getEnumerationDefinitionAccess().getGroup_1(), "rule__EnumerationDefinition__Group_1__0");
					put(grammarAccess.getNamespaceAliasDefinitionAccess().getGroup(), "rule__NamespaceAliasDefinition__Group__0");
					put(grammarAccess.getQualifiedNamespaceSpecifierAccess().getGroup(), "rule__QualifiedNamespaceSpecifier__Group__0");
					put(grammarAccess.getUsingDeclarationAccess().getGroup(), "rule__UsingDeclaration__Group__0");
					put(grammarAccess.getUsingDeclarationAccess().getGroup_1_1(), "rule__UsingDeclaration__Group_1_1__0");
					put(grammarAccess.getUsingDirectiveAccess().getGroup(), "rule__UsingDirective__Group__0");
					put(grammarAccess.getAsmDefinitionAccess().getGroup(), "rule__AsmDefinition__Group__0");
					put(grammarAccess.getInitDeclaratorListAccess().getGroup(), "rule__InitDeclaratorList__Group__0");
					put(grammarAccess.getInitDeclaratorListAccess().getGroup_1(), "rule__InitDeclaratorList__Group_1__0");
					put(grammarAccess.getInitDeclaratorAccess().getGroup(), "rule__InitDeclarator__Group__0");
					put(grammarAccess.getFunctionDeclaratorAccess().getGroup(), "rule__FunctionDeclarator__Group__0");
					put(grammarAccess.getParametersAndQualifiersAccess().getGroup(), "rule__ParametersAndQualifiers__Group__0");
					put(grammarAccess.getDeclaratorIdAccess().getGroup(), "rule__DeclaratorId__Group__0");
					put(grammarAccess.getParameterDeclarationClauseAccess().getGroup_1(), "rule__ParameterDeclarationClause__Group_1__0");
					put(grammarAccess.getParameterDeclarationClauseAccess().getGroup_1_1(), "rule__ParameterDeclarationClause__Group_1_1__0");
					put(grammarAccess.getParameterDeclarationListAccess().getGroup(), "rule__ParameterDeclarationList__Group__0");
					put(grammarAccess.getParameterDeclarationListAccess().getGroup_1(), "rule__ParameterDeclarationList__Group_1__0");
					put(grammarAccess.getParameterDeclarationAccess().getGroup(), "rule__ParameterDeclaration__Group__0");
					put(grammarAccess.getFunctionBodyAccess().getGroup_0(), "rule__FunctionBody__Group_0__0");
					put(grammarAccess.getInitializerAccess().getGroup_1(), "rule__Initializer__Group_1__0");
					put(grammarAccess.getBraceOrEqualInitializerAccess().getGroup_0(), "rule__BraceOrEqualInitializer__Group_0__0");
					put(grammarAccess.getInitializerListAccess().getGroup(), "rule__InitializerList__Group__0");
					put(grammarAccess.getInitializerListAccess().getGroup_2(), "rule__InitializerList__Group_2__0");
					put(grammarAccess.getBracedInitializerListAccess().getGroup(), "rule__BracedInitializerList__Group__0");
					put(grammarAccess.getBracedInitializerListAccess().getGroup_1(), "rule__BracedInitializerList__Group_1__0");
					put(grammarAccess.getClassSpecifierAccess().getGroup(), "rule__ClassSpecifier__Group__0");
					put(grammarAccess.getClassHeadAccess().getGroup(), "rule__ClassHead__Group__0");
					put(grammarAccess.getClassHeadAccess().getGroup_1(), "rule__ClassHead__Group_1__0");
					put(grammarAccess.getMemberSpecificationAccess().getGroup(), "rule__MemberSpecification__Group__0");
					put(grammarAccess.getMemberSpecificationAccess().getGroup_0_1(), "rule__MemberSpecification__Group_0_1__0");
					put(grammarAccess.getMemberOrFunctionDeclarationAccess().getGroup(), "rule__MemberOrFunctionDeclaration__Group__0");
					put(grammarAccess.getMemberOrFunctionDeclarationAccess().getGroup_1_1(), "rule__MemberOrFunctionDeclaration__Group_1_1__0");
					put(grammarAccess.getMemberDeclaratorListAccess().getGroup(), "rule__MemberDeclaratorList__Group__0");
					put(grammarAccess.getMemberDeclaratorListAccess().getGroup_1(), "rule__MemberDeclaratorList__Group_1__0");
					put(grammarAccess.getMemberDeclaratorAccess().getGroup(), "rule__MemberDeclarator__Group__0");
					put(grammarAccess.getPureSpecifierAccess().getGroup(), "rule__PureSpecifier__Group__0");
					put(grammarAccess.getBaseClauseAccess().getGroup(), "rule__BaseClause__Group__0");
					put(grammarAccess.getBaseSpecifierListAccess().getGroup(), "rule__BaseSpecifierList__Group__0");
					put(grammarAccess.getBaseSpecifierListAccess().getGroup_2(), "rule__BaseSpecifierList__Group_2__0");
					put(grammarAccess.getBaseSpecifierAccess().getGroup(), "rule__BaseSpecifier__Group__0");
					put(grammarAccess.getBaseSpecifierAccess().getGroup_0_0(), "rule__BaseSpecifier__Group_0_0__0");
					put(grammarAccess.getBaseSpecifierAccess().getGroup_0_1(), "rule__BaseSpecifier__Group_0_1__0");
					put(grammarAccess.getClassOrDeclarationTypeAccess().getGroup_0(), "rule__ClassOrDeclarationType__Group_0__0");
					put(grammarAccess.getOperatorFunctionIdAccess().getGroup(), "rule__OperatorFunctionId__Group__0");
					put(grammarAccess.getOperatorFunctionIdAccess().getGroup_2(), "rule__OperatorFunctionId__Group_2__0");
					put(grammarAccess.getOverloadableOperatorAccess().getGroup_2(), "rule__OverloadableOperator__Group_2__0");
					put(grammarAccess.getOverloadableOperatorAccess().getGroup_3(), "rule__OverloadableOperator__Group_3__0");
					put(grammarAccess.getLiteralOperatorIdAccess().getGroup(), "rule__LiteralOperatorId__Group__0");
					put(grammarAccess.getTemplateDeclarationAccess().getGroup(), "rule__TemplateDeclaration__Group__0");
					put(grammarAccess.getTemplateParameterListAccess().getGroup(), "rule__TemplateParameterList__Group__0");
					put(grammarAccess.getTemplateParameterListAccess().getGroup_1(), "rule__TemplateParameterList__Group_1__0");
					put(grammarAccess.getTypeParameterAccess().getGroup(), "rule__TypeParameter__Group__0");
					put(grammarAccess.getTypeParameterAccess().getGroup_1_0(), "rule__TypeParameter__Group_1_0__0");
					put(grammarAccess.getTypeParameterAccess().getGroup_1_1(), "rule__TypeParameter__Group_1_1__0");
					put(grammarAccess.getSimpleTemplateIdAccess().getGroup(), "rule__SimpleTemplateId__Group__0");
					put(grammarAccess.getTemplateIdAccess().getGroup_1(), "rule__TemplateId__Group_1__0");
					put(grammarAccess.getTemplateArgumentListAccess().getGroup(), "rule__TemplateArgumentList__Group__0");
					put(grammarAccess.getTemplateArgumentListAccess().getGroup_2(), "rule__TemplateArgumentList__Group_2__0");
					put(grammarAccess.getTypenameSpecifierAccess().getGroup(), "rule__TypenameSpecifier__Group__0");
					put(grammarAccess.getTypenameSpecifierAccess().getGroup_3_1(), "rule__TypenameSpecifier__Group_3_1__0");
					put(grammarAccess.getTryBlockAccess().getGroup(), "rule__TryBlock__Group__0");
					put(grammarAccess.getFunctionTryBlockAccess().getGroup(), "rule__FunctionTryBlock__Group__0");
					put(grammarAccess.getHandlerAccess().getGroup(), "rule__Handler__Group__0");
					put(grammarAccess.getExceptionDeclarationAccess().getGroup_0(), "rule__ExceptionDeclaration__Group_0__0");
					put(grammarAccess.getThrowExpressionAccess().getGroup(), "rule__ThrowExpression__Group__0");
					put(grammarAccess.getDynamicExceptionSpecificationAccess().getGroup(), "rule__DynamicExceptionSpecification__Group__0");
					put(grammarAccess.getNoexceptSpecificationAccess().getGroup(), "rule__NoexceptSpecification__Group__0");
					put(grammarAccess.getNoexceptSpecificationAccess().getGroup_1(), "rule__NoexceptSpecification__Group_1__0");
					put(grammarAccess.getExpressionListAccess().getGroup(), "rule__ExpressionList__Group__0");
					put(grammarAccess.getExpressionListAccess().getGroup_1(), "rule__ExpressionList__Group_1__0");
					put(grammarAccess.getBodyAccess().getDeclarationsAssignment_2(), "rule__Body__DeclarationsAssignment_2");
					put(grammarAccess.getDeclarationAccess().getVariaveisAssignment_1_0(), "rule__Declaration__VariaveisAssignment_1_0");
					put(grammarAccess.getDeclarationAccess().getDitryDAssignment_1_1(), "rule__Declaration__DitryDAssignment_1_1");
					put(grammarAccess.getDeclarationAccess().getChamadaAssignment_1_2_0(), "rule__Declaration__ChamadaAssignment_1_2_0");
					put(grammarAccess.getDeclarationAccess().getFuncaoAssignment_1_3(), "rule__Declaration__FuncaoAssignment_1_3");
					put(grammarAccess.getDeclarationAccess().getDirtyEAssignment_1_4(), "rule__Declaration__DirtyEAssignment_1_4");
					put(grammarAccess.getDeclarationAccess().getDirtyAAssignment_1_5(), "rule__Declaration__DirtyAAssignment_1_5");
					put(grammarAccess.getDeclarationAccess().getDirtyBAssignment_1_6(), "rule__Declaration__DirtyBAssignment_1_6");
					put(grammarAccess.getDeclarationAccess().getDirtyCAssignment_1_7(), "rule__Declaration__DirtyCAssignment_1_7");
					put(grammarAccess.getDeclarationAccess().getDirtyDAssignment_1_8(), "rule__Declaration__DirtyDAssignment_1_8");
					put(grammarAccess.getDeclarationAccess().getDirtyAssignment_1_9(), "rule__Declaration__DirtyAssignment_1_9");
					put(grammarAccess.getDeclarationAccess().getDirtyAssignment_1_10(), "rule__Declaration__DirtyAssignment_1_10");
					put(grammarAccess.getNamespaceDefinitionAccess().getDirtyAssignment_4(), "rule__NamespaceDefinition__DirtyAssignment_4");
					put(grammarAccess.getLinkageSpecificationAccess().getDirtyAssignment_3_0(), "rule__LinkageSpecification__DirtyAssignment_3_0");
					put(grammarAccess.getLinkageSpecificationAccess().getDirtyAssignment_3_1_1(), "rule__LinkageSpecification__DirtyAssignment_3_1_1");
					put(grammarAccess.getFunctionDeclarationAccess().getTypeAssignment_2(), "rule__FunctionDeclaration__TypeAssignment_2");
					put(grammarAccess.getFunctionDeclarationAccess().getNameAssignment_3(), "rule__FunctionDeclaration__NameAssignment_3");
					put(grammarAccess.getFunctionDeclarationAccess().getParamsAssignment_5_0(), "rule__FunctionDeclaration__ParamsAssignment_5_0");
					put(grammarAccess.getFunctionDeclarationAccess().getParamsAssignment_5_1_1(), "rule__FunctionDeclaration__ParamsAssignment_5_1_1");
					put(grammarAccess.getFunctionDeclarationAccess().getEscopoAssignment_8(), "rule__FunctionDeclaration__EscopoAssignment_8");
					put(grammarAccess.getFunctionChamadaAccess().getNameAssignment_1(), "rule__FunctionChamada__NameAssignment_1");
					put(grammarAccess.getFunctionChamadaAccess().getParamsAssignment_3_0(), "rule__FunctionChamada__ParamsAssignment_3_0");
					put(grammarAccess.getFunctionChamadaAccess().getParamsAssignment_3_1_1(), "rule__FunctionChamada__ParamsAssignment_3_1_1");
					put(grammarAccess.getNoPtrStatementAccess().getVariaveisAssignment_1_1(), "rule__NoPtrStatement__VariaveisAssignment_1_1");
					put(grammarAccess.getNoPtrStatementAccess().getMudancasAssignment_1_2(), "rule__NoPtrStatement__MudancasAssignment_1_2");
					put(grammarAccess.getNoPtrStatementAccess().getLixoVAssignment_1_3(), "rule__NoPtrStatement__LixoVAssignment_1_3");
					put(grammarAccess.getNoPtrStatementAccess().getSwitchesAssignment_1_4(), "rule__NoPtrStatement__SwitchesAssignment_1_4");
					put(grammarAccess.getNoPtrStatementAccess().getDirtyBAssignment_1_5(), "rule__NoPtrStatement__DirtyBAssignment_1_5");
					put(grammarAccess.getNoPtrStatementAccess().getDirtyAssignment_1_6(), "rule__NoPtrStatement__DirtyAssignment_1_6");
					put(grammarAccess.getNoPtrStatementAccess().getDirtyVAssignment_1_7(), "rule__NoPtrStatement__DirtyVAssignment_1_7");
					put(grammarAccess.getNoPtrMudancaAccess().getNameAssignment_1(), "rule__NoPtrMudanca__NameAssignment_1");
					put(grammarAccess.getNoPtrMudancaAccess().getExprAssignment_2_1(), "rule__NoPtrMudanca__ExprAssignment_2_1");
					put(grammarAccess.getNoPtrExpressionAccess().getLeftAssignment_1(), "rule__NoPtrExpression__LeftAssignment_1");
					put(grammarAccess.getNoPtrExpressionAccess().getOpAssignment_2_0(), "rule__NoPtrExpression__OpAssignment_2_0");
					put(grammarAccess.getNoPtrExpressionAccess().getRightAssignment_2_1(), "rule__NoPtrExpression__RightAssignment_2_1");
					put(grammarAccess.getNoPtrTerminalExpressionAccess().getInsideAssignment_0_3(), "rule__NoPtrTerminalExpression__InsideAssignment_0_3");
					put(grammarAccess.getNoPtrTerminalExpressionAccess().getAtomicAssignment_1_2(), "rule__NoPtrTerminalExpression__AtomicAssignment_1_2");
					put(grammarAccess.getNoPtrSelectAccess().getExprAssignment_3(), "rule__NoPtrSelect__ExprAssignment_3");
					put(grammarAccess.getNoPtrSelectAccess().getCasesAssignment_6(), "rule__NoPtrSelect__CasesAssignment_6");
					put(grammarAccess.getNoPtrCasesAccess().getVAssignment_0_3(), "rule__NoPtrCases__VAssignment_0_3");
					put(grammarAccess.getNoPtrCasesAccess().getExprAssignment_1_2(), "rule__NoPtrCases__ExprAssignment_1_2");
					put(grammarAccess.getNoPtrCasesAccess().getVAssignment_1_4(), "rule__NoPtrCases__VAssignment_1_4");
					put(grammarAccess.getParameterAccess().getTypeAssignment_2(), "rule__Parameter__TypeAssignment_2");
					put(grammarAccess.getParameterAccess().getNameAssignment_4(), "rule__Parameter__NameAssignment_4");
					put(grammarAccess.getParameterAccess().getExprAssignment_6_2(), "rule__Parameter__ExprAssignment_6_2");
					put(grammarAccess.getVarDeclAccess().getTypeAssignment_2(), "rule__VarDecl__TypeAssignment_2");
					put(grammarAccess.getVarDeclAccess().getNameAssignment_4(), "rule__VarDecl__NameAssignment_4");
					put(grammarAccess.getVarDeclAccess().getExprAssignment_6_2(), "rule__VarDecl__ExprAssignment_6_2");
					put(grammarAccess.getTypeAccess().getStsAssignment_1(), "rule__Type__StsAssignment_1");
					put(grammarAccess.getSimple_type_specifierAccess().getNameAssignment_0_1(), "rule__Simple_type_specifier__NameAssignment_0_1");
					put(grammarAccess.getSimple_type_specifierAccess().getNameAssignment_1_1(), "rule__Simple_type_specifier__NameAssignment_1_1");
					put(grammarAccess.getSimple_type_specifierAccess().getNameAssignment_2_1(), "rule__Simple_type_specifier__NameAssignment_2_1");
					put(grammarAccess.getSimple_type_specifierAccess().getNameAssignment_3_1(), "rule__Simple_type_specifier__NameAssignment_3_1");
					put(grammarAccess.getSimple_declarationAccess().getVariavelAssignment_0(), "rule__Simple_declaration__VariavelAssignment_0");
					put(grammarAccess.getReturnAccess().getRettypeAssignment_2(), "rule__Return__RettypeAssignment_2");
					put(grammarAccess.getReturnExprAccess().getValueAssignment_0_1(), "rule__ReturnExpr__ValueAssignment_0_1");
					put(grammarAccess.getReturnExprAccess().getValueAssignment_1_1(), "rule__ReturnExpr__ValueAssignment_1_1");
					put(grammarAccess.getReturnExprAccess().getValueAssignment_2_1(), "rule__ReturnExpr__ValueAssignment_2_1");
					put(grammarAccess.getReturnExprAccess().getCallAssignment_3_1(), "rule__ReturnExpr__CallAssignment_3_1");
					put(grammarAccess.getReturnExprAccess().getNameAssignment_4_1(), "rule__ReturnExpr__NameAssignment_4_1");
					put(grammarAccess.getReturnExprAccess().getExprAssignment_4_2_1(), "rule__ReturnExpr__ExprAssignment_4_2_1");
					put(grammarAccess.getDeclaration_statementAccess().getVariaveisAssignment(), "rule__Declaration_statement__VariaveisAssignment");
					put(grammarAccess.getBlock_declarationAccess().getVariavelAssignment_1(), "rule__Block_declaration__VariavelAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser typedParser = (org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
