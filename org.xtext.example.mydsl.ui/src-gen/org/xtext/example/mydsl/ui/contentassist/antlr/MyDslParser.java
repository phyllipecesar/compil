/*
* generated by Xtext
*/
package org.xtext.example.mydsl.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.example.mydsl.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {
	
	@Inject
	private MyDslGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser createParser() {
		org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser result = new org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getSimple_type_specifierAccess().getAlternatives(), "rule__Simple_type_specifier__Alternatives");
					put(grammarAccess.getNew_lineAccess().getAlternatives(), "rule__New_line__Alternatives");
					put(grammarAccess.getGroup_partAccess().getAlternatives(), "rule__Group_part__Alternatives");
					put(grammarAccess.getIf_groupAccess().getAlternatives(), "rule__If_group__Alternatives");
					put(grammarAccess.getEquality_expressionAccess().getAlternatives_1_0(), "rule__Equality_expression__Alternatives_1_0");
					put(grammarAccess.getRelational_expressionAccess().getAlternatives_1_0(), "rule__Relational_expression__Alternatives_1_0");
					put(grammarAccess.getShift_expressionAccess().getAlternatives_1_0(), "rule__Shift_expression__Alternatives_1_0");
					put(grammarAccess.getMultiplicative_expressionAccess().getAlternatives_1_0(), "rule__Multiplicative_expression__Alternatives_1_0");
					put(grammarAccess.getPm_expressionAccess().getAlternatives_1_0(), "rule__Pm_expression__Alternatives_1_0");
					put(grammarAccess.getUnary_expressionAccess().getAlternatives(), "rule__Unary_expression__Alternatives");
					put(grammarAccess.getUnary_expressionAccess().getAlternatives_1_1(), "rule__Unary_expression__Alternatives_1_1");
					put(grammarAccess.getPostfix_expressionAccess().getAlternatives_1(), "rule__Postfix_expression__Alternatives_1");
					put(grammarAccess.getPostfix_expressionAccess().getAlternatives_1_2_2(), "rule__Postfix_expression__Alternatives_1_2_2");
					put(grammarAccess.getPostfix_expressionAccess().getAlternatives_1_3_2(), "rule__Postfix_expression__Alternatives_1_3_2");
					put(grammarAccess.getPseudo_destructor_nameAccess().getAlternatives(), "rule__Pseudo_destructor_name__Alternatives");
					put(grammarAccess.getClass_or_namespace_nameAccess().getAlternatives(), "rule__Class_or_namespace_name__Alternatives");
					put(grammarAccess.getClass_nameAccess().getAlternatives(), "rule__Class_name__Alternatives");
					put(grammarAccess.getTemplate_argumentAccess().getAlternatives(), "rule__Template_argument__Alternatives");
					put(grammarAccess.getId_expressionAccess().getAlternatives(), "rule__Id_expression__Alternatives");
					put(grammarAccess.getUnqualified_idAccess().getAlternatives(), "rule__Unqualified_id__Alternatives");
					put(grammarAccess.getOperatorAccess().getAlternatives(), "rule__Operator__Alternatives");
					put(grammarAccess.getUnary_operatorAccess().getAlternatives(), "rule__Unary_operator__Alternatives");
					put(grammarAccess.getPreprocessing_tokenAccess().getAlternatives(), "rule__Preprocessing_token__Alternatives");
					put(grammarAccess.getControl_lineAccess().getAlternatives(), "rule__Control_line__Alternatives");
					put(grammarAccess.getSIGNAccess().getAlternatives(), "rule__SIGN__Alternatives");
					put(grammarAccess.getTokenAccess().getAlternatives(), "rule__Token__Alternatives");
					put(grammarAccess.getVarDeclAccess().getGroup(), "rule__VarDecl__Group__0");
					put(grammarAccess.getSimple_type_specifierAccess().getGroup_0(), "rule__Simple_type_specifier__Group_0__0");
					put(grammarAccess.getSimple_type_specifierAccess().getGroup_1(), "rule__Simple_type_specifier__Group_1__0");
					put(grammarAccess.getGroup_partAccess().getGroup_0(), "rule__Group_part__Group_0__0");
					put(grammarAccess.getIf_actionAccess().getGroup(), "rule__If_action__Group__0");
					put(grammarAccess.getIf_groupAccess().getGroup_0(), "rule__If_group__Group_0__0");
					put(grammarAccess.getIf_groupAccess().getGroup_1(), "rule__If_group__Group_1__0");
					put(grammarAccess.getIf_groupAccess().getGroup_2(), "rule__If_group__Group_2__0");
					put(grammarAccess.getElif_groupAccess().getGroup(), "rule__Elif_group__Group__0");
					put(grammarAccess.getStatementAccess().getGroup(), "rule__Statement__Group__0");
					put(grammarAccess.getSimple_declarationAccess().getGroup(), "rule__Simple_declaration__Group__0");
					put(grammarAccess.getBlock_declarationAccess().getGroup(), "rule__Block_declaration__Group__0");
					put(grammarAccess.getConditional_expressionAccess().getGroup(), "rule__Conditional_expression__Group__0");
					put(grammarAccess.getConditional_expressionAccess().getGroup_1(), "rule__Conditional_expression__Group_1__0");
					put(grammarAccess.getLogical_or_expressionAccess().getGroup(), "rule__Logical_or_expression__Group__0");
					put(grammarAccess.getLogical_or_expressionAccess().getGroup_1(), "rule__Logical_or_expression__Group_1__0");
					put(grammarAccess.getLogical_and_expressionAccess().getGroup(), "rule__Logical_and_expression__Group__0");
					put(grammarAccess.getLogical_and_expressionAccess().getGroup_1(), "rule__Logical_and_expression__Group_1__0");
					put(grammarAccess.getInclusive_or_expressionAccess().getGroup(), "rule__Inclusive_or_expression__Group__0");
					put(grammarAccess.getInclusive_or_expressionAccess().getGroup_1(), "rule__Inclusive_or_expression__Group_1__0");
					put(grammarAccess.getExclusive_or_expressionAccess().getGroup(), "rule__Exclusive_or_expression__Group__0");
					put(grammarAccess.getExclusive_or_expressionAccess().getGroup_1(), "rule__Exclusive_or_expression__Group_1__0");
					put(grammarAccess.getAnd_expressionAccess().getGroup(), "rule__And_expression__Group__0");
					put(grammarAccess.getAnd_expressionAccess().getGroup_1(), "rule__And_expression__Group_1__0");
					put(grammarAccess.getEquality_expressionAccess().getGroup(), "rule__Equality_expression__Group__0");
					put(grammarAccess.getEquality_expressionAccess().getGroup_1(), "rule__Equality_expression__Group_1__0");
					put(grammarAccess.getRelational_expressionAccess().getGroup(), "rule__Relational_expression__Group__0");
					put(grammarAccess.getRelational_expressionAccess().getGroup_1(), "rule__Relational_expression__Group_1__0");
					put(grammarAccess.getShift_expressionAccess().getGroup(), "rule__Shift_expression__Group__0");
					put(grammarAccess.getShift_expressionAccess().getGroup_1(), "rule__Shift_expression__Group_1__0");
					put(grammarAccess.getAdditive_expressionAccess().getGroup(), "rule__Additive_expression__Group__0");
					put(grammarAccess.getAdditive_expressionAccess().getGroup_1(), "rule__Additive_expression__Group_1__0");
					put(grammarAccess.getMultiplicative_expressionAccess().getGroup(), "rule__Multiplicative_expression__Group__0");
					put(grammarAccess.getMultiplicative_expressionAccess().getGroup_1(), "rule__Multiplicative_expression__Group_1__0");
					put(grammarAccess.getPm_expressionAccess().getGroup(), "rule__Pm_expression__Group__0");
					put(grammarAccess.getPm_expressionAccess().getGroup_1(), "rule__Pm_expression__Group_1__0");
					put(grammarAccess.getCast_expressionAccess().getGroup(), "rule__Cast_expression__Group__0");
					put(grammarAccess.getCast_expressionAccess().getGroup_0(), "rule__Cast_expression__Group_0__0");
					put(grammarAccess.getUnary_expressionAccess().getGroup_0(), "rule__Unary_expression__Group_0__0");
					put(grammarAccess.getUnary_expressionAccess().getGroup_1(), "rule__Unary_expression__Group_1__0");
					put(grammarAccess.getUnary_expressionAccess().getGroup_2(), "rule__Unary_expression__Group_2__0");
					put(grammarAccess.getUnary_expressionAccess().getGroup_3(), "rule__Unary_expression__Group_3__0");
					put(grammarAccess.getUnary_expressionAccess().getGroup_4(), "rule__Unary_expression__Group_4__0");
					put(grammarAccess.getPostfix_expressionAccess().getGroup(), "rule__Postfix_expression__Group__0");
					put(grammarAccess.getPostfix_expressionAccess().getGroup_1_0(), "rule__Postfix_expression__Group_1_0__0");
					put(grammarAccess.getPostfix_expressionAccess().getGroup_1_1(), "rule__Postfix_expression__Group_1_1__0");
					put(grammarAccess.getPostfix_expressionAccess().getGroup_1_2(), "rule__Postfix_expression__Group_1_2__0");
					put(grammarAccess.getPostfix_expressionAccess().getGroup_1_3(), "rule__Postfix_expression__Group_1_3__0");
					put(grammarAccess.getPseudo_destructor_nameAccess().getGroup_0(), "rule__Pseudo_destructor_name__Group_0__0");
					put(grammarAccess.getPseudo_destructor_nameAccess().getGroup_0_2(), "rule__Pseudo_destructor_name__Group_0_2__0");
					put(grammarAccess.getPseudo_destructor_nameAccess().getGroup_1(), "rule__Pseudo_destructor_name__Group_1__0");
					put(grammarAccess.getNested_name_specifierAccess().getGroup(), "rule__Nested_name_specifier__Group__0");
					put(grammarAccess.getNested_name_specifierAccess().getGroup_2(), "rule__Nested_name_specifier__Group_2__0");
					put(grammarAccess.getTemplate_idAccess().getGroup(), "rule__Template_id__Group__0");
					put(grammarAccess.getTemplate_argument_listAccess().getGroup(), "rule__Template_argument_list__Group__0");
					put(grammarAccess.getTemplate_argument_listAccess().getGroup_1(), "rule__Template_argument_list__Group_1__0");
					put(grammarAccess.getUnqualified_idAccess().getGroup_3(), "rule__Unqualified_id__Group_3__0");
					put(grammarAccess.getOperator_function_idAccess().getGroup(), "rule__Operator_function_id__Group__0");
					put(grammarAccess.getConversion_function_idAccess().getGroup(), "rule__Conversion_function_id__Group__0");
					put(grammarAccess.getConversion_type_idAccess().getGroup(), "rule__Conversion_type_id__Group__0");
					put(grammarAccess.getExpression_listAccess().getGroup(), "rule__Expression_list__Group__0");
					put(grammarAccess.getExpression_listAccess().getGroup_1(), "rule__Expression_list__Group_1__0");
					put(grammarAccess.getElse_groupAccess().getGroup(), "rule__Else_group__Group__0");
					put(grammarAccess.getEndif_lineAccess().getGroup(), "rule__Endif_line__Group__0");
					put(grammarAccess.getControl_lineAccess().getGroup_0(), "rule__Control_line__Group_0__0");
					put(grammarAccess.getControl_lineAccess().getGroup_1(), "rule__Control_line__Group_1__0");
					put(grammarAccess.getControl_lineAccess().getGroup_2(), "rule__Control_line__Group_2__0");
					put(grammarAccess.getControl_lineAccess().getGroup_3(), "rule__Control_line__Group_3__0");
					put(grammarAccess.getControl_lineAccess().getGroup_4(), "rule__Control_line__Group_4__0");
					put(grammarAccess.getControl_lineAccess().getGroup_5(), "rule__Control_line__Group_5__0");
					put(grammarAccess.getControl_lineAccess().getGroup_6(), "rule__Control_line__Group_6__0");
					put(grammarAccess.getControl_lineAccess().getGroup_7(), "rule__Control_line__Group_7__0");
					put(grammarAccess.getModelAccess().getElementsAssignment(), "rule__Model__ElementsAssignment");
					put(grammarAccess.getVarDeclAccess().getTypeAssignment_1(), "rule__VarDecl__TypeAssignment_1");
					put(grammarAccess.getVarDeclAccess().getNameAssignment_2(), "rule__VarDecl__NameAssignment_2");
					put(grammarAccess.getStatementAccess().getVariavelAssignment_1(), "rule__Statement__VariavelAssignment_1");
					put(grammarAccess.getSimple_declarationAccess().getVariavelAssignment_0(), "rule__Simple_declaration__VariavelAssignment_0");
					put(grammarAccess.getDeclaration_statementAccess().getVariaveisAssignment(), "rule__Declaration_statement__VariaveisAssignment");
					put(grammarAccess.getBlock_declarationAccess().getVariavelAssignment_1(), "rule__Block_declaration__VariavelAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser typedParser = (org.xtext.example.mydsl.ui.contentassist.antlr.internal.InternalMyDslParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
