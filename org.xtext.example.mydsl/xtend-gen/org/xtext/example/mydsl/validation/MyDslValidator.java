/**
 * generated by Xtext
 */
package org.xtext.example.mydsl.validation;

import com.google.common.base.Objects;
import java.util.HashSet;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.xbase.lib.Functions.Function0;
import org.xtext.example.mydsl.myDsl.Body;
import org.xtext.example.mydsl.myDsl.FunctionDeclaration;
import org.xtext.example.mydsl.myDsl.Parameter;
import org.xtext.example.mydsl.myDsl.Return;
import org.xtext.example.mydsl.myDsl.Type;
import org.xtext.example.mydsl.myDsl.VarDecl;
import org.xtext.example.mydsl.myDsl.block_declaration;
import org.xtext.example.mydsl.myDsl.declaration_statement;
import org.xtext.example.mydsl.myDsl.simple_declaration;
import org.xtext.example.mydsl.myDsl.simple_type_specifier;
import org.xtext.example.mydsl.myDsl.statement;
import org.xtext.example.mydsl.validation.AbstractMyDslValidator;

/**
 * Custom validation rules.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
@SuppressWarnings("all")
public class MyDslValidator extends AbstractMyDslValidator {
  private HashSet<String> hash = new Function0<HashSet<String>>() {
    public HashSet<String> apply() {
      HashSet<String> _hashSet = new HashSet<String>();
      return _hashSet;
    }
  }.apply();
  
  @Check
  public void checkParamsFunction(final FunctionDeclaration funcao) {
    this.hash.clear();
    EList<Parameter> _params = funcao.getParams();
    for (final Parameter symbol : _params) {
      {
        final String nome = symbol.getName();
        boolean _contains = this.hash.contains(nome);
        if (_contains) {
          Type _type = symbol.getType();
          simple_type_specifier _sts = _type.getSts();
          String _name = _sts.getName();
          String _plus = ("Parameter \'" + _name);
          String _plus_1 = (_plus + " ");
          String _plus_2 = (_plus_1 + nome);
          String _plus_3 = (_plus_2 + "\' already exists");
          this.error(_plus_3, symbol, null, (-1));
        }
        this.hash.add(nome);
      }
    }
    statement _escopo = funcao.getEscopo();
    declaration_statement _variavel = _escopo.getVariavel();
    EList<block_declaration> _variaveis = _variavel.getVariaveis();
    for (final block_declaration block : _variaveis) {
      {
        simple_declaration _variavel_1 = block.getVariavel();
        VarDecl _variavel_2 = _variavel_1.getVariavel();
        final String nome = _variavel_2.getName();
        boolean _contains = this.hash.contains(nome);
        if (_contains) {
          simple_declaration _variavel_3 = block.getVariavel();
          VarDecl _variavel_4 = _variavel_3.getVariavel();
          _variavel_4.getType();
          simple_declaration _variavel_5 = block.getVariavel();
          VarDecl _variavel_6 = _variavel_5.getVariavel();
          this.error((("declaration of variable \'" + nome) + "\' shadows a paramater"), _variavel_6, null, (-1));
        }
      }
    }
  }
  
  private String row;
  
  private int ok;
  
  @Check
  public void checkFunctionAlreadyExists(final Body b) {
    this.hash.clear();
    EList<FunctionDeclaration> _funcoes = b.getFuncoes();
    for (final FunctionDeclaration symbol : _funcoes) {
      {
        String _name = symbol.getName();
        String _plus = (_name + "(");
        this.row = _plus;
        this.ok = 0;
        EList<Parameter> _params = symbol.getParams();
        for (final Parameter symb : _params) {
          {
            if ((this.ok == 1)) {
              this.row = (this.row + ",");
            }
            this.ok = 1;
            Type _type = symb.getType();
            simple_type_specifier _sts = _type.getSts();
            String _name_1 = _sts.getName();
            String _plus_1 = (this.row + _name_1);
            this.row = _plus_1;
          }
        }
        this.row = (this.row + ")");
        boolean _contains = this.hash.contains(this.row);
        if (_contains) {
          this.error((("Function \'" + this.row) + "\' already exists"), symbol, null, (-1));
        }
        this.hash.add(this.row);
      }
    }
  }
  
  @Check
  public void checkReturnOnlyOnFunction(final Return r) {
    EObject _eContainer = r.eContainer();
    boolean _equals = Objects.equal(_eContainer, null);
    if (_equals) {
      this.error("return can only be used inside of functions", r, null, (-1));
    }
    EObject _eContainer_1 = r.eContainer();
    Class<? extends EObject> _class = _eContainer_1.getClass();
    System.out.println(_class);
    EObject _eContainer_2 = r.eContainer();
    EObject _eContainer_3 = _eContainer_2.eContainer();
    boolean _equals_1 = Objects.equal(_eContainer_3, null);
    if (_equals_1) {
      this.error("return can only be used inside of functions", r, null, (-1));
    }
    EObject _eContainer_4 = r.eContainer();
    EObject _eContainer_5 = _eContainer_4.eContainer();
    EObject _eContainer_6 = _eContainer_5.eContainer();
    boolean _equals_2 = Objects.equal(_eContainer_6, null);
    if (_equals_2) {
      this.error("return can only be used inside of functions", r, null, (-1));
    }
    EObject _eContainer_7 = r.eContainer();
    EObject _eContainer_8 = _eContainer_7.eContainer();
    EObject _eContainer_9 = _eContainer_8.eContainer();
    EObject _eContainer_10 = _eContainer_9.eContainer();
    Class<? extends EObject> _class_1 = _eContainer_10.getClass();
    boolean _notEquals = (!Objects.equal(_class_1, FunctionDeclaration.class));
    if (_notEquals) {
      this.error("return can only be used inside of functions", r, null, (-1));
    }
  }
  
  @Check
  public void checkVariableAlreadyExists(final statement st) {
    this.hash.clear();
    declaration_statement _variavel = st.getVariavel();
    EList<block_declaration> _variaveis = _variavel.getVariaveis();
    for (final block_declaration block : _variaveis) {
      {
        simple_declaration _variavel_1 = block.getVariavel();
        VarDecl _variavel_2 = _variavel_1.getVariavel();
        final String nome = _variavel_2.getName();
        boolean _contains = this.hash.contains(nome);
        if (_contains) {
          simple_declaration _variavel_3 = block.getVariavel();
          VarDecl _variavel_4 = _variavel_3.getVariavel();
          this.error((("Variable \'" + nome) + "\' already exists"), _variavel_4, null, (-1));
        }
        this.hash.add(nome);
      }
    }
  }
}
