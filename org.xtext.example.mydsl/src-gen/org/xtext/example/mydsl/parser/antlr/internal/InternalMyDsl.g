/*
* generated by Xtext
*/
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private MyDslGrammarAccess grammarAccess;
 	
    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getModelAccess().getBodyParserRuleCall()); 
    }
    this_Body_0=ruleBody
    { 
        $current = $this_Body_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleBody
entryRuleBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBodyRule()); }
	 iv_ruleBody=ruleBody 
	 { $current=$iv_ruleBody.current; } 
	 EOF 
;

// Rule Body
ruleBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getBodyAccess().getBodyAction_0(),
            $current);
    }
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBodyAccess().getPreprocessing_fileParserRuleCall_1()); 
    }
rulepreprocessing_file
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBodyAccess().getDeclarationsDeclarationParserRuleCall_2_0()); 
	    }
		lv_declarations_2_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBodyRule());
	        }
       		add(
       			$current, 
       			"declarations",
        		lv_declarations_2_0, 
        		"Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleDeclaration
entryRuleDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); }
	 iv_ruleDeclaration=ruleDeclaration 
	 { $current=$iv_ruleDeclaration.current; } 
	 EOF 
;

// Rule Declaration
ruleDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getDeclarationAccess().getDeclarationAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationAccess().getVariaveisVarDeclParserRuleCall_1_0_0()); 
	    }
		lv_variaveis_1_0=ruleVarDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationRule());
	        }
       		set(
       			$current, 
       			"variaveis",
        		lv_variaveis_1_0, 
        		"VarDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationAccess().getDitryDReturnParserRuleCall_1_1_0()); 
	    }
		lv_ditryD_2_0=ruleReturn		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationRule());
	        }
       		set(
       			$current, 
       			"ditryD",
        		lv_ditryD_2_0, 
        		"Return");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationAccess().getChamadaFunctionChamadaParserRuleCall_1_2_0()); 
	    }
		lv_chamada_3_0=ruleFunctionChamada		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationRule());
	        }
       		set(
       			$current, 
       			"chamada",
        		lv_chamada_3_0, 
        		"FunctionChamada");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationAccess().getFuncaoFunctionDeclarationParserRuleCall_1_3_0()); 
	    }
		lv_funcao_4_0=ruleFunctionDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationRule());
	        }
       		set(
       			$current, 
       			"funcao",
        		lv_funcao_4_0, 
        		"FunctionDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationAccess().getDirtyESimpleOrFunctionDeclarationParserRuleCall_1_4_0()); 
	    }
		lv_dirtyE_5_0=ruleSimpleOrFunctionDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationRule());
	        }
       		set(
       			$current, 
       			"dirtyE",
        		lv_dirtyE_5_0, 
        		"SimpleOrFunctionDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationAccess().getDirtyABlockDeclarationParserRuleCall_1_5_0()); 
	    }
		lv_dirtyA_6_0=ruleBlockDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationRule());
	        }
       		set(
       			$current, 
       			"dirtyA",
        		lv_dirtyA_6_0, 
        		"BlockDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationAccess().getDirtyBTemplateDeclarationParserRuleCall_1_6_0()); 
	    }
		lv_dirtyB_7_0=ruleTemplateDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationRule());
	        }
       		set(
       			$current, 
       			"dirtyB",
        		lv_dirtyB_7_0, 
        		"TemplateDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationAccess().getDirtyCExplicitInstantiationParserRuleCall_1_7_0()); 
	    }
		lv_dirtyC_8_0=ruleExplicitInstantiation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationRule());
	        }
       		set(
       			$current, 
       			"dirtyC",
        		lv_dirtyC_8_0, 
        		"ExplicitInstantiation");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationAccess().getDirtyDExplicitSpecializationParserRuleCall_1_8_0()); 
	    }
		lv_dirtyD_9_0=ruleExplicitSpecialization		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationRule());
	        }
       		set(
       			$current, 
       			"dirtyD",
        		lv_dirtyD_9_0, 
        		"ExplicitSpecialization");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationAccess().getDirtyLinkageSpecificationParserRuleCall_1_9_0()); 
	    }
		lv_dirty_10_0=ruleLinkageSpecification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationRule());
	        }
       		set(
       			$current, 
       			"dirty",
        		lv_dirty_10_0, 
        		"LinkageSpecification");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclarationAccess().getDirtyNamespaceDefinitionParserRuleCall_1_10_0()); 
	    }
		lv_dirty_11_0=ruleNamespaceDefinition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclarationRule());
	        }
       		set(
       			$current, 
       			"dirty",
        		lv_dirty_11_0, 
        		"NamespaceDefinition");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleNamespaceDefinition
entryRuleNamespaceDefinition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNamespaceDefinitionRule()); }
	 iv_ruleNamespaceDefinition=ruleNamespaceDefinition 
	 { $current=$iv_ruleNamespaceDefinition.current; } 
	 EOF 
;

// Rule NamespaceDefinition
ruleNamespaceDefinition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='inline' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNamespaceDefinitionAccess().getInlineKeyword_0());
    }
)?	otherlv_1='namespace' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getNamespaceDefinitionAccess().getNamespaceKeyword_1());
    }
(this_ID_2=RULE_ID
    { 
    newLeafNode(this_ID_2, grammarAccess.getNamespaceDefinitionAccess().getIDTerminalRuleCall_2()); 
    }
)?	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getNamespaceDefinitionAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNamespaceDefinitionAccess().getDirtyDeclarationParserRuleCall_4_0()); 
	    }
		lv_dirty_4_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNamespaceDefinitionRule());
	        }
       		set(
       			$current, 
       			"dirty",
        		lv_dirty_4_0, 
        		"Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getNamespaceDefinitionAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleLinkageSpecification
entryRuleLinkageSpecification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLinkageSpecificationRule()); }
	 iv_ruleLinkageSpecification=ruleLinkageSpecification 
	 { $current=$iv_ruleLinkageSpecification.current; } 
	 EOF 
;

// Rule LinkageSpecification
ruleLinkageSpecification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getLinkageSpecificationAccess().getLKSAction_0(),
            $current);
    }
)	otherlv_1='extern' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getLinkageSpecificationAccess().getExternKeyword_1());
    }
this_STRING_LITERAL_2=RULE_STRING_LITERAL
    { 
    newLeafNode(this_STRING_LITERAL_2, grammarAccess.getLinkageSpecificationAccess().getSTRING_LITERALTerminalRuleCall_2()); 
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getLinkageSpecificationAccess().getDirtyDeclarationParserRuleCall_3_0_0()); 
	    }
		lv_dirty_3_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLinkageSpecificationRule());
	        }
       		set(
       			$current, 
       			"dirty",
        		lv_dirty_3_0, 
        		"Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLinkageSpecificationAccess().getLeftCurlyBracketKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLinkageSpecificationAccess().getDirtyDeclarationParserRuleCall_3_1_1_0()); 
	    }
		lv_dirty_5_0=ruleDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLinkageSpecificationRule());
	        }
       		set(
       			$current, 
       			"dirty",
        		lv_dirty_5_0, 
        		"Declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getLinkageSpecificationAccess().getRightCurlyBracketKeyword_3_1_2());
    }
)))
;





// Entry rule entryRuleelif_group
entryRuleelif_group returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getElif_groupRule()); } 
	 iv_ruleelif_group=ruleelif_group 
	 { $current=$iv_ruleelif_group.current.getText(); }  
	 EOF 
;

// Rule elif_group
ruleelif_group returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='#elif' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getElif_groupAccess().getElifKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getElif_groupAccess().getConstant_expressionParserRuleCall_1()); 
    }
    this_constant_expression_1=ruleconstant_expression    {
		$current.merge(this_constant_expression_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getElif_groupAccess().getGroupParserRuleCall_2()); 
    }
    this_group_2=rulegroup    {
		$current.merge(this_group_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;





// Entry rule entryRuleconstant_expression
entryRuleconstant_expression returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstant_expressionRule()); } 
	 iv_ruleconstant_expression=ruleconstant_expression 
	 { $current=$iv_ruleconstant_expression.current.getText(); }  
	 EOF 
;

// Rule constant_expression
ruleconstant_expression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getConstant_expressionAccess().getConditional_expressionParserRuleCall()); 
    }
    this_conditional_expression_0=ruleconditional_expression    {
		$current.merge(this_conditional_expression_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleconditional_expression
entryRuleconditional_expression returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditional_expressionRule()); } 
	 iv_ruleconditional_expression=ruleconditional_expression 
	 { $current=$iv_ruleconditional_expression.current.getText(); }  
	 EOF 
;

// Rule conditional_expression
ruleconditional_expression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='TODO' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConditional_expressionAccess().getTODOKeyword()); 
    }

    ;





// Entry rule entryRulepreprocessing_file
entryRulepreprocessing_file returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPreprocessing_fileRule()); } 
	 iv_rulepreprocessing_file=rulepreprocessing_file 
	 { $current=$iv_rulepreprocessing_file.current.getText(); }  
	 EOF 
;

// Rule preprocessing_file
rulepreprocessing_file returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPreprocessing_fileAccess().getGroupParserRuleCall()); 
    }
    this_group_0=rulegroup    {
		$current.merge(this_group_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
    ;





// Entry rule entryRulepreprocessing_token
entryRulepreprocessing_token returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPreprocessing_tokenRule()); } 
	 iv_rulepreprocessing_token=rulepreprocessing_token 
	 { $current=$iv_rulepreprocessing_token.current.getText(); }  
	 EOF 
;

// Rule preprocessing_token
rulepreprocessing_token returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_HEADER_NAME_0=RULE_HEADER_NAME    {
		$current.merge(this_HEADER_NAME_0);
    }

    { 
    newLeafNode(this_HEADER_NAME_0, grammarAccess.getPreprocessing_tokenAccess().getHEADER_NAMETerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleelse_group
entryRuleelse_group returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getElse_groupRule()); } 
	 iv_ruleelse_group=ruleelse_group 
	 { $current=$iv_ruleelse_group.current.getText(); }  
	 EOF 
;

// Rule else_group
ruleelse_group returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='#else' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getElse_groupAccess().getElseKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getElse_groupAccess().getGroupParserRuleCall_1()); 
    }
    this_group_1=rulegroup    {
		$current.merge(this_group_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;





// Entry rule entryRuleendif_line
entryRuleendif_line returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEndif_lineRule()); } 
	 iv_ruleendif_line=ruleendif_line 
	 { $current=$iv_ruleendif_line.current.getText(); }  
	 EOF 
;

// Rule endif_line
ruleendif_line returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='#endif' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndif_lineAccess().getEndifKeyword()); 
    }

    ;





// Entry rule entryRulecontrol_line
entryRulecontrol_line returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getControl_lineRule()); } 
	 iv_rulecontrol_line=rulecontrol_line 
	 { $current=$iv_rulecontrol_line.current.getText(); }  
	 EOF 
;

// Rule control_line
rulecontrol_line returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='#include' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getControl_lineAccess().getIncludeKeyword_0_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getControl_lineAccess().getPp_tokensParserRuleCall_0_1()); 
    }
    this_pp_tokens_1=rulepp_tokens    {
		$current.merge(this_pp_tokens_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='#define' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getControl_lineAccess().getDefineKeyword_1_0()); 
    }
    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    newLeafNode(this_ID_3, grammarAccess.getControl_lineAccess().getIDTerminalRuleCall_1_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getControl_lineAccess().getReplacement_listParserRuleCall_1_2()); 
    }
    this_replacement_list_4=rulereplacement_list    {
		$current.merge(this_replacement_list_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='#define' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getControl_lineAccess().getDefineKeyword_2_0()); 
    }
    this_ID_6=RULE_ID    {
		$current.merge(this_ID_6);
    }

    { 
    newLeafNode(this_ID_6, grammarAccess.getControl_lineAccess().getIDTerminalRuleCall_2_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getControl_lineAccess().getLparenParserRuleCall_2_2()); 
    }
    this_lparen_7=rulelparen    {
		$current.merge(this_lparen_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(    this_ID_8=RULE_ID    {
		$current.merge(this_ID_8);
    }

    { 
    newLeafNode(this_ID_8, grammarAccess.getControl_lineAccess().getIDTerminalRuleCall_2_3()); 
    }
)?
	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getControl_lineAccess().getRightParenthesisKeyword_2_4()); 
    }

    { 
        newCompositeNode(grammarAccess.getControl_lineAccess().getReplacement_listParserRuleCall_2_5()); 
    }
    this_replacement_list_10=rulereplacement_list    {
		$current.merge(this_replacement_list_10);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='#undef' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getControl_lineAccess().getUndefKeyword_3_0()); 
    }
    this_ID_12=RULE_ID    {
		$current.merge(this_ID_12);
    }

    { 
    newLeafNode(this_ID_12, grammarAccess.getControl_lineAccess().getIDTerminalRuleCall_3_1()); 
    }
)
    |(
	kw='#line' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getControl_lineAccess().getLineKeyword_4_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getControl_lineAccess().getPp_tokensParserRuleCall_4_1()); 
    }
    this_pp_tokens_14=rulepp_tokens    {
		$current.merge(this_pp_tokens_14);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='#error' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getControl_lineAccess().getErrorKeyword_5_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getControl_lineAccess().getPp_tokensParserRuleCall_5_1()); 
    }
    this_pp_tokens_16=rulepp_tokens    {
		$current.merge(this_pp_tokens_16);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    |(
	kw='#pragma' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getControl_lineAccess().getPragmaKeyword_6_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getControl_lineAccess().getPp_tokensParserRuleCall_6_1()); 
    }
    this_pp_tokens_18=rulepp_tokens    {
		$current.merge(this_pp_tokens_18);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    |
	kw='#' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getControl_lineAccess().getNumberSignKeyword_7()); 
    }
)
    ;





// Entry rule entryRulelparen
entryRulelparen returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLparenRule()); } 
	 iv_rulelparen=rulelparen 
	 { $current=$iv_rulelparen.current.getText(); }  
	 EOF 
;

// Rule lparen
rulelparen returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLparenAccess().getLeftParenthesisKeyword()); 
    }

    ;





// Entry rule entryRulereplacement_list
entryRulereplacement_list returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getReplacement_listRule()); } 
	 iv_rulereplacement_list=rulereplacement_list 
	 { $current=$iv_rulereplacement_list.current.getText(); }  
	 EOF 
;

// Rule replacement_list
rulereplacement_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getReplacement_listAccess().getPp_tokensParserRuleCall()); 
    }
    this_pp_tokens_0=rulepp_tokens    {
		$current.merge(this_pp_tokens_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
    ;





// Entry rule entryRulepp_tokens
entryRulepp_tokens returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPp_tokensRule()); } 
	 iv_rulepp_tokens=rulepp_tokens 
	 { $current=$iv_rulepp_tokens.current.getText(); }  
	 EOF 
;

// Rule pp_tokens
rulepp_tokens returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPp_tokensAccess().getPreprocessing_tokenParserRuleCall()); 
    }
    this_preprocessing_token_0=rulepreprocessing_token    {
		$current.merge(this_preprocessing_token_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+
    ;





// Entry rule entryRulegroup
entryRulegroup returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getGroupRule()); } 
	 iv_rulegroup=rulegroup 
	 { $current=$iv_rulegroup.current.getText(); }  
	 EOF 
;

// Rule group
rulegroup returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGroupAccess().getGroup_partParserRuleCall()); 
    }
    this_group_part_0=rulegroup_part    {
		$current.merge(this_group_part_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+
    ;





// Entry rule entryRulegroup_part
entryRulegroup_part returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getGroup_partRule()); } 
	 iv_rulegroup_part=rulegroup_part 
	 { $current=$iv_rulegroup_part.current.getText(); }  
	 EOF 
;

// Rule group_part
rulegroup_part returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGroup_partAccess().getIf_actionParserRuleCall_0()); 
    }
    this_if_action_0=ruleif_action    {
		$current.merge(this_if_action_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getGroup_partAccess().getControl_lineParserRuleCall_1()); 
    }
    this_control_line_1=rulecontrol_line    {
		$current.merge(this_control_line_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleif_action
entryRuleif_action returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIf_actionRule()); } 
	 iv_ruleif_action=ruleif_action 
	 { $current=$iv_ruleif_action.current.getText(); }  
	 EOF 
;

// Rule if_action
ruleif_action returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getIf_actionAccess().getIf_groupParserRuleCall_0()); 
    }
    this_if_group_0=ruleif_group    {
		$current.merge(this_if_group_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getIf_actionAccess().getElif_groupsParserRuleCall_1()); 
    }
    this_elif_groups_1=ruleelif_groups    {
		$current.merge(this_elif_groups_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getIf_actionAccess().getElse_groupParserRuleCall_2()); 
    }
    this_else_group_2=ruleelse_group    {
		$current.merge(this_else_group_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
    { 
        newCompositeNode(grammarAccess.getIf_actionAccess().getEndif_lineParserRuleCall_3()); 
    }
    this_endif_line_3=ruleendif_line    {
		$current.merge(this_endif_line_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleif_group
entryRuleif_group returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIf_groupRule()); } 
	 iv_ruleif_group=ruleif_group 
	 { $current=$iv_ruleif_group.current.getText(); }  
	 EOF 
;

// Rule if_group
ruleif_group returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='#if' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIf_groupAccess().getIfKeyword_0_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getIf_groupAccess().getConstant_expressionParserRuleCall_0_1()); 
    }
    this_constant_expression_1=ruleconstant_expression    {
		$current.merge(this_constant_expression_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getIf_groupAccess().getGroupParserRuleCall_0_2()); 
    }
    this_group_2=rulegroup    {
		$current.merge(this_group_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    |(
	kw='#ifdef' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIf_groupAccess().getIfdefKeyword_1_0()); 
    }
    this_ID_4=RULE_ID    {
		$current.merge(this_ID_4);
    }

    { 
    newLeafNode(this_ID_4, grammarAccess.getIf_groupAccess().getIDTerminalRuleCall_1_1()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getIf_groupAccess().getGroupParserRuleCall_1_2()); 
    }
    this_group_5=rulegroup    {
		$current.merge(this_group_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    |(
	kw='#ifndef' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIf_groupAccess().getIfndefKeyword_2_0()); 
    }
    this_ID_7=RULE_ID    {
		$current.merge(this_ID_7);
    }

    { 
    newLeafNode(this_ID_7, grammarAccess.getIf_groupAccess().getIDTerminalRuleCall_2_1()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getIf_groupAccess().getGroupParserRuleCall_2_2()); 
    }
    this_group_8=rulegroup    {
		$current.merge(this_group_8);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?))
    ;





// Entry rule entryRuleelif_groups
entryRuleelif_groups returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getElif_groupsRule()); } 
	 iv_ruleelif_groups=ruleelif_groups 
	 { $current=$iv_ruleelif_groups.current.getText(); }  
	 EOF 
;

// Rule elif_groups
ruleelif_groups returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getElif_groupsAccess().getElif_groupParserRuleCall()); 
    }
    this_elif_group_0=ruleelif_group    {
		$current.merge(this_elif_group_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+
    ;





// Entry rule entryRuleFunctionDeclaration
entryRuleFunctionDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionDeclarationRule()); }
	 iv_ruleFunctionDeclaration=ruleFunctionDeclaration 
	 { $current=$iv_ruleFunctionDeclaration.current; } 
	 EOF 
;

// Rule FunctionDeclaration
ruleFunctionDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getFunctionDeclarationAccess().getFunctionDeclarationAction_0(),
            $current);
    }
)(	otherlv_1='const' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFunctionDeclarationAccess().getConstKeyword_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getTypeTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_3_0=RULE_ID
		{
			newLeafNode(lv_name_3_0, grammarAccess.getFunctionDeclarationAccess().getNameIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_3_0, 
        		"ID");
	    }

)
)((	'(' 
)=>	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFunctionDeclarationAccess().getLeftParenthesisKeyword_4());
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getParamsParameterParserRuleCall_5_0_0()); 
	    }
		lv_params_5_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_5_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFunctionDeclarationAccess().getCommaKeyword_5_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getParamsParameterParserRuleCall_5_1_1_0()); 
	    }
		lv_params_7_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_7_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getFunctionDeclarationAccess().getRightParenthesisKeyword_6());
    }
	otherlv_9='{' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getFunctionDeclarationAccess().getLeftCurlyBracketKeyword_7());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getEscopoNoPtrStatementParserRuleCall_8_0()); 
	    }
		lv_escopo_10_0=ruleNoPtrStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		set(
       			$current, 
       			"escopo",
        		lv_escopo_10_0, 
        		"NoPtrStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11='}' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getFunctionDeclarationAccess().getRightCurlyBracketKeyword_9());
    }
)
;





// Entry rule entryRuleFunctionChamada
entryRuleFunctionChamada returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionChamadaRule()); }
	 iv_ruleFunctionChamada=ruleFunctionChamada 
	 { $current=$iv_ruleFunctionChamada.current; } 
	 EOF 
;

// Rule FunctionChamada
ruleFunctionChamada returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getFunctionChamadaAccess().getFunctionChamadaAction_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFunctionChamadaAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionChamadaRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFunctionChamadaAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionChamadaAccess().getParamsReturnExprParserRuleCall_3_0_0()); 
	    }
		lv_params_3_0=ruleReturnExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionChamadaRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_3_0, 
        		"ReturnExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getFunctionChamadaAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionChamadaAccess().getParamsReturnExprParserRuleCall_3_1_1_0()); 
	    }
		lv_params_5_0=ruleReturnExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionChamadaRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_5_0, 
        		"ReturnExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=');' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFunctionChamadaAccess().getRightParenthesisSemicolonKeyword_4());
    }
)
;





// Entry rule entryRuleNoPtrStatement
entryRuleNoPtrStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNoPtrStatementRule()); }
	 iv_ruleNoPtrStatement=ruleNoPtrStatement 
	 { $current=$iv_ruleNoPtrStatement.current; } 
	 EOF 
;

// Rule NoPtrStatement
ruleNoPtrStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getNoPtrStatementAccess().getNoPtrStatementAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getNoPtrStatementAccess().getVariaveisVarDeclParserRuleCall_1_0_0()); 
	    }
		lv_variaveis_1_0=ruleVarDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNoPtrStatementRule());
	        }
       		add(
       			$current, 
       			"variaveis",
        		lv_variaveis_1_0, 
        		"VarDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getNoPtrStatementAccess().getDirtyBReturnParserRuleCall_1_1_0()); 
	    }
		lv_dirtyB_2_0=ruleReturn		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNoPtrStatementRule());
	        }
       		add(
       			$current, 
       			"dirtyB",
        		lv_dirtyB_2_0, 
        		"Return");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getNoPtrStatementAccess().getDirtyStatementParserRuleCall_1_2_0()); 
	    }
		lv_dirty_3_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNoPtrStatementRule());
	        }
       		add(
       			$current, 
       			"dirty",
        		lv_dirty_3_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getNoPtrStatementAccess().getDirtyVFunctionChamadaParserRuleCall_1_3_0()); 
	    }
		lv_dirtyV_4_0=ruleFunctionChamada		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNoPtrStatementRule());
	        }
       		add(
       			$current, 
       			"dirtyV",
        		lv_dirtyV_4_0, 
        		"FunctionChamada");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getParameterAccess().getParameterAction_0(),
            $current);
    }
)(	otherlv_1='const' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParameterAccess().getConstKeyword_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_3='*' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getParameterAccess().getAsteriskKeyword_3_0());
    }
)*
    |(	otherlv_4='&' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getParameterAccess().getAmpersandKeyword_3_1());
    }
)*)(
(
		lv_name_5_0=RULE_ID
		{
			newLeafNode(lv_name_5_0, grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_5_0, 
        		"ID");
	    }

)
)(	otherlv_6='[' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getParameterAccess().getLeftSquareBracketKeyword_5_0());
    }
(this_INT_7=RULE_INT
    { 
    newLeafNode(this_INT_7, grammarAccess.getParameterAccess().getINTTerminalRuleCall_5_1()); 
    }
)?	otherlv_8=']' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getParameterAccess().getRightSquareBracketKeyword_5_2());
    }
)*)
;





// Entry rule entryRuleVarDecl
entryRuleVarDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarDeclRule()); }
	 iv_ruleVarDecl=ruleVarDecl 
	 { $current=$iv_ruleVarDecl.current; } 
	 EOF 
;

// Rule VarDecl
ruleVarDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getVarDeclAccess().getVarDeclAction_0(),
            $current);
    }
)(	otherlv_1='const' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getVarDeclAccess().getConstKeyword_1());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getVarDeclAccess().getTypeTypeParserRuleCall_2_0()); 
	    }
		lv_type_2_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarDeclRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_2_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)((	otherlv_3='*' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVarDeclAccess().getAsteriskKeyword_3_0());
    }
)*
    |(	otherlv_4='&' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getVarDeclAccess().getAmpersandKeyword_3_1());
    }
)*)(
(
		lv_name_5_0=RULE_ID
		{
			newLeafNode(lv_name_5_0, grammarAccess.getVarDeclAccess().getNameIDTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarDeclRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_5_0, 
        		"ID");
	    }

)
)(	otherlv_6='[' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getVarDeclAccess().getLeftSquareBracketKeyword_5_0());
    }
this_INT_7=RULE_INT
    { 
    newLeafNode(this_INT_7, grammarAccess.getVarDeclAccess().getINTTerminalRuleCall_5_1()); 
    }
	otherlv_8=']' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getVarDeclAccess().getRightSquareBracketKeyword_5_2());
    }
)*)
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getTypeAccess().getTypeAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTypeAccess().getStsSimple_type_specifierParserRuleCall_1_0()); 
	    }
		lv_sts_1_0=rulesimple_type_specifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTypeRule());
	        }
       		set(
       			$current, 
       			"sts",
        		lv_sts_1_0, 
        		"simple_type_specifier");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulesimple_type_specifier
entryRulesimple_type_specifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimple_type_specifierRule()); }
	 iv_rulesimple_type_specifier=rulesimple_type_specifier 
	 { $current=$iv_rulesimple_type_specifier.current; } 
	 EOF 
;

// Rule simple_type_specifier
rulesimple_type_specifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSimple_type_specifierAccess().getIntTypeAction_0_0(),
            $current);
    }
)(
(
		lv_name_1_0=	'int' 
    {
        newLeafNode(lv_name_1_0, grammarAccess.getSimple_type_specifierAccess().getNameIntKeyword_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimple_type_specifierRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_1_0, "int");
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSimple_type_specifierAccess().getBooleanTypeAction_1_0(),
            $current);
    }
)(
(
		lv_name_3_0=	'bool' 
    {
        newLeafNode(lv_name_3_0, grammarAccess.getSimple_type_specifierAccess().getNameBoolKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimple_type_specifierRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_3_0, "bool");
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSimple_type_specifierAccess().getStringTypeAction_2_0(),
            $current);
    }
)(
(
		lv_name_5_0=	'string' 
    {
        newLeafNode(lv_name_5_0, grammarAccess.getSimple_type_specifierAccess().getNameStringKeyword_2_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimple_type_specifierRule());
	        }
       		setWithLastConsumed($current, "name", lv_name_5_0, "string");
	    }

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSimple_type_specifierAccess().getUnknownTypeAction_3_0(),
            $current);
    }
)(
(
		lv_name_7_0=RULE_ID
		{
			newLeafNode(lv_name_7_0, grammarAccess.getSimple_type_specifierAccess().getNameIDTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSimple_type_specifierRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_7_0, 
        		"ID");
	    }

)
)))
;





// Entry rule entryRulesimple_declaration
entryRulesimple_declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimple_declarationRule()); }
	 iv_rulesimple_declaration=rulesimple_declaration 
	 { $current=$iv_rulesimple_declaration.current; } 
	 EOF 
;

// Rule simple_declaration
rulesimple_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSimple_declarationAccess().getVariavelVarDeclParserRuleCall_0_0()); 
	    }
		lv_variavel_0_0=ruleVarDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimple_declarationRule());
	        }
       		set(
       			$current, 
       			"variavel",
        		lv_variavel_0_0, 
        		"VarDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSimple_declarationAccess().getSemicolonKeyword_1());
    }
)
;





// Entry rule entryRuleReturn
entryRuleReturn returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReturnRule()); }
	 iv_ruleReturn=ruleReturn 
	 { $current=$iv_ruleReturn.current; } 
	 EOF 
;

// Rule Return
ruleReturn returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getReturnAccess().getReturnAction_0(),
            $current);
    }
)	otherlv_1='return' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getReturnAccess().getReturnKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReturnAccess().getRettypeReturnExprParserRuleCall_2_0()); 
	    }
		lv_rettype_2_0=ruleReturnExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReturnRule());
	        }
       		set(
       			$current, 
       			"rettype",
        		lv_rettype_2_0, 
        		"ReturnExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getReturnAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleReturnExpr
entryRuleReturnExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReturnExprRule()); }
	 iv_ruleReturnExpr=ruleReturnExpr 
	 { $current=$iv_ruleReturnExpr.current; } 
	 EOF 
;

// Rule ReturnExpr
ruleReturnExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getReturnExprAccess().getIntTypeAction_0_0(),
            $current);
    }
)this_INT_1=RULE_INT
    { 
    newLeafNode(this_INT_1, grammarAccess.getReturnExprAccess().getINTTerminalRuleCall_0_1()); 
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getReturnExprAccess().getBooleanhTypeAction_1_0(),
            $current);
    }
)(
(
(
		lv_value_3_1=	'false' 
    {
        newLeafNode(lv_value_3_1, grammarAccess.getReturnExprAccess().getValueFalseKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getReturnExprRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_3_1, null);
	    }

    |		lv_value_3_2=	'true' 
    {
        newLeafNode(lv_value_3_2, grammarAccess.getReturnExprAccess().getValueTrueKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getReturnExprRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_3_2, null);
	    }

)

)
))
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getReturnExprAccess().getStringhTypeAction_2_0(),
            $current);
    }
)this_STRING_5=RULE_STRING
    { 
    newLeafNode(this_STRING_5, grammarAccess.getReturnExprAccess().getSTRINGTerminalRuleCall_2_1()); 
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getReturnExprAccess().getVariableAction_3_0(),
            $current);
    }
)(
(
		lv_name_7_0=RULE_ID
		{
			newLeafNode(lv_name_7_0, grammarAccess.getReturnExprAccess().getNameIDTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getReturnExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_7_0, 
        		"ID");
	    }

)
)))
;







// Entry rule entryRuleblock_declaration
entryRuleblock_declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlock_declarationRule()); }
	 iv_ruleblock_declaration=ruleblock_declaration 
	 { $current=$iv_ruleblock_declaration.current; } 
	 EOF 
;

// Rule block_declaration
ruleblock_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getBlock_declarationAccess().getBlock_declarationAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBlock_declarationAccess().getVariavelSimple_declarationParserRuleCall_1_0()); 
	    }
		lv_variavel_1_0=rulesimple_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlock_declarationRule());
	        }
       		set(
       			$current, 
       			"variavel",
        		lv_variavel_1_0, 
        		"simple_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
))
;









// Entry rule entryRuleLiteral
entryRuleLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); } 
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current.getText(); }  
	 EOF 
;

// Rule Literal
ruleLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getLiteralAccess().getINTTerminalRuleCall_0()); 
    }

    |    this_CHARACTER_LITERAL_1=RULE_CHARACTER_LITERAL    {
		$current.merge(this_CHARACTER_LITERAL_1);
    }

    { 
    newLeafNode(this_CHARACTER_LITERAL_1, grammarAccess.getLiteralAccess().getCHARACTER_LITERALTerminalRuleCall_1()); 
    }

    |    this_FLOATING_LITERAL_2=RULE_FLOATING_LITERAL    {
		$current.merge(this_FLOATING_LITERAL_2);
    }

    { 
    newLeafNode(this_FLOATING_LITERAL_2, grammarAccess.getLiteralAccess().getFLOATING_LITERALTerminalRuleCall_2()); 
    }

    |    this_STRING_LITERAL_3=RULE_STRING_LITERAL    {
		$current.merge(this_STRING_LITERAL_3);
    }

    { 
    newLeafNode(this_STRING_LITERAL_3, grammarAccess.getLiteralAccess().getSTRING_LITERALTerminalRuleCall_3()); 
    }

    |((
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLiteralAccess().getTrueKeyword_4_0_0()); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLiteralAccess().getFalseKeyword_4_0_1()); 
    }
)
	kw='nullptr' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLiteralAccess().getNullptrKeyword_4_1()); 
    }
))
    ;





// Entry rule entryRuleStatement
entryRuleStatement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); } 
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current.getText(); }  
	 EOF 
;

// Rule Statement
ruleStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getLabeledStatementParserRuleCall_0()); 
    }
    this_LabeledStatement_0=ruleLabeledStatement    {
		$current.merge(this_LabeledStatement_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getExpressionStatementParserRuleCall_1()); 
    }
    this_ExpressionStatement_1=ruleExpressionStatement    {
		$current.merge(this_ExpressionStatement_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getCompoundStatementParserRuleCall_2()); 
    }
    this_CompoundStatement_2=ruleCompoundStatement    {
		$current.merge(this_CompoundStatement_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getSelectionStatementParserRuleCall_3()); 
    }
    this_SelectionStatement_3=ruleSelectionStatement    {
		$current.merge(this_SelectionStatement_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getIterationStatementParserRuleCall_4()); 
    }
    this_IterationStatement_4=ruleIterationStatement    {
		$current.merge(this_IterationStatement_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getJumpStatementParserRuleCall_5()); 
    }
    this_JumpStatement_5=ruleJumpStatement    {
		$current.merge(this_JumpStatement_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getDeclarationStatementParserRuleCall_6()); 
    }
    this_DeclarationStatement_6=ruleDeclarationStatement    {
		$current.merge(this_DeclarationStatement_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStatementAccess().getTryBlockParserRuleCall_7()); 
    }
    this_TryBlock_7=ruleTryBlock    {
		$current.merge(this_TryBlock_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleLabeledStatement
entryRuleLabeledStatement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLabeledStatementRule()); } 
	 iv_ruleLabeledStatement=ruleLabeledStatement 
	 { $current=$iv_ruleLabeledStatement.current.getText(); }  
	 EOF 
;

// Rule LabeledStatement
ruleLabeledStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getLabeledStatementAccess().getIDTerminalRuleCall_0_0()); 
    }

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLabeledStatementAccess().getColonKeyword_0_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getLabeledStatementAccess().getStatementParserRuleCall_0_2()); 
    }
    this_Statement_2=ruleStatement    {
		$current.merge(this_Statement_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='case' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLabeledStatementAccess().getCaseKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getLabeledStatementAccess().getConstantExpressionParserRuleCall_1_1()); 
    }
    this_ConstantExpression_4=ruleConstantExpression    {
		$current.merge(this_ConstantExpression_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLabeledStatementAccess().getColonKeyword_1_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getLabeledStatementAccess().getStatementParserRuleCall_1_3()); 
    }
    this_Statement_6=ruleStatement    {
		$current.merge(this_Statement_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='default' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLabeledStatementAccess().getDefaultKeyword_2_0()); 
    }

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLabeledStatementAccess().getColonKeyword_2_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getLabeledStatementAccess().getStatementParserRuleCall_2_2()); 
    }
    this_Statement_9=ruleStatement    {
		$current.merge(this_Statement_9);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))
    ;





// Entry rule entryRuleExpressionStatement
entryRuleExpressionStatement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionStatementRule()); } 
	 iv_ruleExpressionStatement=ruleExpressionStatement 
	 { $current=$iv_ruleExpressionStatement.current.getText(); }  
	 EOF 
;

// Rule ExpressionStatement
ruleExpressionStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionStatementAccess().getExpressionParserRuleCall_0()); 
    }
    this_Expression_0=ruleExpression    {
		$current.merge(this_Expression_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpressionStatementAccess().getSemicolonKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleCompoundStatement
entryRuleCompoundStatement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompoundStatementRule()); } 
	 iv_ruleCompoundStatement=ruleCompoundStatement 
	 { $current=$iv_ruleCompoundStatement.current.getText(); }  
	 EOF 
;

// Rule CompoundStatement
ruleCompoundStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompoundStatementAccess().getLeftCurlyBracketKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getCompoundStatementAccess().getStatementParserRuleCall_1()); 
    }
    this_Statement_1=ruleStatement    {
		$current.merge(this_Statement_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompoundStatementAccess().getRightCurlyBracketKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleSelectionStatement
entryRuleSelectionStatement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSelectionStatementRule()); } 
	 iv_ruleSelectionStatement=ruleSelectionStatement 
	 { $current=$iv_ruleSelectionStatement.current.getText(); }  
	 EOF 
;

// Rule SelectionStatement
ruleSelectionStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='if' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSelectionStatementAccess().getIfKeyword_0_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSelectionStatementAccess().getLeftParenthesisKeyword_0_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getSelectionStatementAccess().getConditionParserRuleCall_0_2()); 
    }
    this_Condition_2=ruleCondition    {
		$current.merge(this_Condition_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSelectionStatementAccess().getRightParenthesisKeyword_0_3()); 
    }

    { 
        newCompositeNode(grammarAccess.getSelectionStatementAccess().getStatementParserRuleCall_0_4()); 
    }
    this_Statement_4=ruleStatement    {
		$current.merge(this_Statement_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(((
	'else' 
)=>
	kw='else' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSelectionStatementAccess().getElseKeyword_0_5_0()); 
    }
)
    { 
        newCompositeNode(grammarAccess.getSelectionStatementAccess().getStatementParserRuleCall_0_5_1()); 
    }
    this_Statement_6=ruleStatement    {
		$current.merge(this_Statement_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    |(
	kw='switch' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSelectionStatementAccess().getSwitchKeyword_1_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSelectionStatementAccess().getLeftParenthesisKeyword_1_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getSelectionStatementAccess().getConditionParserRuleCall_1_2()); 
    }
    this_Condition_9=ruleCondition    {
		$current.merge(this_Condition_9);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSelectionStatementAccess().getRightParenthesisKeyword_1_3()); 
    }

    { 
        newCompositeNode(grammarAccess.getSelectionStatementAccess().getStatementParserRuleCall_1_4()); 
    }
    this_Statement_11=ruleStatement    {
		$current.merge(this_Statement_11);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))
    ;





// Entry rule entryRuleCondition
entryRuleCondition returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionRule()); } 
	 iv_ruleCondition=ruleCondition 
	 { $current=$iv_ruleCondition.current.getText(); }  
	 EOF 
;

// Rule Condition
ruleCondition returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getConditionAccess().getExpressionParserRuleCall_0()); 
    }
    this_Expression_0=ruleExpression    {
		$current.merge(this_Expression_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |((
    { 
        newCompositeNode(grammarAccess.getConditionAccess().getDeclarationSpecifierParserRuleCall_1_0()); 
    }
    this_DeclarationSpecifier_1=ruleDeclarationSpecifier    {
		$current.merge(this_DeclarationSpecifier_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+
    { 
        newCompositeNode(grammarAccess.getConditionAccess().getDeclaratorIdParserRuleCall_1_1()); 
    }
    this_DeclaratorId_2=ruleDeclaratorId    {
		$current.merge(this_DeclaratorId_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
((
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConditionAccess().getEqualsSignKeyword_1_2_0_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getConditionAccess().getInitializerClauseParserRuleCall_1_2_0_1()); 
    }
    this_InitializerClause_4=ruleInitializerClause    {
		$current.merge(this_InitializerClause_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getConditionAccess().getBracedInitializerListParserRuleCall_1_2_1()); 
    }
    this_BracedInitializerList_5=ruleBracedInitializerList    {
		$current.merge(this_BracedInitializerList_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)))
    ;





// Entry rule entryRuleIterationStatement
entryRuleIterationStatement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIterationStatementRule()); } 
	 iv_ruleIterationStatement=ruleIterationStatement 
	 { $current=$iv_ruleIterationStatement.current.getText(); }  
	 EOF 
;

// Rule IterationStatement
ruleIterationStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='while' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIterationStatementAccess().getWhileKeyword_0_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIterationStatementAccess().getLeftParenthesisKeyword_0_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getIterationStatementAccess().getConditionParserRuleCall_0_2()); 
    }
    this_Condition_2=ruleCondition    {
		$current.merge(this_Condition_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIterationStatementAccess().getRightParenthesisKeyword_0_3()); 
    }

    { 
        newCompositeNode(grammarAccess.getIterationStatementAccess().getStatementParserRuleCall_0_4()); 
    }
    this_Statement_4=ruleStatement    {
		$current.merge(this_Statement_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='do' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIterationStatementAccess().getDoKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getIterationStatementAccess().getStatementParserRuleCall_1_1()); 
    }
    this_Statement_6=ruleStatement    {
		$current.merge(this_Statement_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='while' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIterationStatementAccess().getWhileKeyword_1_2()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIterationStatementAccess().getLeftParenthesisKeyword_1_3()); 
    }

    { 
        newCompositeNode(grammarAccess.getIterationStatementAccess().getExpressionParserRuleCall_1_4()); 
    }
    this_Expression_9=ruleExpression    {
		$current.merge(this_Expression_9);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIterationStatementAccess().getRightParenthesisKeyword_1_5()); 
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIterationStatementAccess().getSemicolonKeyword_1_6()); 
    }
)
    |(
	kw='for' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIterationStatementAccess().getForKeyword_2_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIterationStatementAccess().getLeftParenthesisKeyword_2_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getIterationStatementAccess().getForInitializationStatementParserRuleCall_2_2()); 
    }
    this_ForInitializationStatement_14=ruleForInitializationStatement    {
		$current.merge(this_ForInitializationStatement_14);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getIterationStatementAccess().getConditionParserRuleCall_2_3()); 
    }
    this_Condition_15=ruleCondition    {
		$current.merge(this_Condition_15);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIterationStatementAccess().getSemicolonKeyword_2_4()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getIterationStatementAccess().getExpressionParserRuleCall_2_5()); 
    }
    this_Expression_17=ruleExpression    {
		$current.merge(this_Expression_17);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIterationStatementAccess().getRightParenthesisKeyword_2_6()); 
    }

    { 
        newCompositeNode(grammarAccess.getIterationStatementAccess().getStatementParserRuleCall_2_7()); 
    }
    this_Statement_19=ruleStatement    {
		$current.merge(this_Statement_19);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))
    ;





// Entry rule entryRuleForInitializationStatement
entryRuleForInitializationStatement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getForInitializationStatementRule()); } 
	 iv_ruleForInitializationStatement=ruleForInitializationStatement 
	 { $current=$iv_ruleForInitializationStatement.current.getText(); }  
	 EOF 
;

// Rule ForInitializationStatement
ruleForInitializationStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getForInitializationStatementAccess().getExpressionStatementParserRuleCall_0()); 
    }
    this_ExpressionStatement_0=ruleExpressionStatement    {
		$current.merge(this_ExpressionStatement_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getForInitializationStatementAccess().getSimpleDeclarationParserRuleCall_1()); 
    }
    this_SimpleDeclaration_1=ruleSimpleDeclaration    {
		$current.merge(this_SimpleDeclaration_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleJumpStatement
entryRuleJumpStatement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getJumpStatementRule()); } 
	 iv_ruleJumpStatement=ruleJumpStatement 
	 { $current=$iv_ruleJumpStatement.current.getText(); }  
	 EOF 
;

// Rule JumpStatement
ruleJumpStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='break' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getJumpStatementAccess().getBreakKeyword_0_0()); 
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getJumpStatementAccess().getSemicolonKeyword_0_1()); 
    }
)
    |(
	kw='continue' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getJumpStatementAccess().getContinueKeyword_1_0()); 
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getJumpStatementAccess().getSemicolonKeyword_1_1()); 
    }
)
    |(
	kw='goto' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getJumpStatementAccess().getGotoKeyword_2_0()); 
    }
    this_ID_5=RULE_ID    {
		$current.merge(this_ID_5);
    }

    { 
    newLeafNode(this_ID_5, grammarAccess.getJumpStatementAccess().getIDTerminalRuleCall_2_1()); 
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getJumpStatementAccess().getSemicolonKeyword_2_2()); 
    }
))
    ;





// Entry rule entryRuleDeclarationStatement
entryRuleDeclarationStatement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclarationStatementRule()); } 
	 iv_ruleDeclarationStatement=ruleDeclarationStatement 
	 { $current=$iv_ruleDeclarationStatement.current.getText(); }  
	 EOF 
;

// Rule DeclarationStatement
ruleDeclarationStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDeclarationStatementAccess().getSimpleDeclarationParserRuleCall_0()); 
    }
    this_SimpleDeclaration_0=ruleSimpleDeclaration    {
		$current.merge(this_SimpleDeclaration_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationStatementAccess().getBlockDeclarationParserRuleCall_1()); 
    }
    this_BlockDeclaration_1=ruleBlockDeclaration    {
		$current.merge(this_BlockDeclaration_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleBlockDeclaration
entryRuleBlockDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlockDeclarationRule()); } 
	 iv_ruleBlockDeclaration=ruleBlockDeclaration 
	 { $current=$iv_ruleBlockDeclaration.current.getText(); }  
	 EOF 
;

// Rule BlockDeclaration
ruleBlockDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBlockDeclarationAccess().getAsmDefinitionParserRuleCall_0()); 
    }
    this_AsmDefinition_0=ruleAsmDefinition    {
		$current.merge(this_AsmDefinition_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBlockDeclarationAccess().getNamespaceAliasDefinitionParserRuleCall_1()); 
    }
    this_NamespaceAliasDefinition_1=ruleNamespaceAliasDefinition    {
		$current.merge(this_NamespaceAliasDefinition_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBlockDeclarationAccess().getUsingDeclarationParserRuleCall_2()); 
    }
    this_UsingDeclaration_2=ruleUsingDeclaration    {
		$current.merge(this_UsingDeclaration_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBlockDeclarationAccess().getStaticAssertDeclarationParserRuleCall_3()); 
    }
    this_StaticAssertDeclaration_3=ruleStaticAssertDeclaration    {
		$current.merge(this_StaticAssertDeclaration_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getBlockDeclarationAccess().getAliasDeclarationParserRuleCall_4()); 
    }
    this_AliasDeclaration_4=ruleAliasDeclaration    {
		$current.merge(this_AliasDeclaration_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleAliasDeclaration
entryRuleAliasDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAliasDeclarationRule()); } 
	 iv_ruleAliasDeclaration=ruleAliasDeclaration 
	 { $current=$iv_ruleAliasDeclaration.current.getText(); }  
	 EOF 
;

// Rule AliasDeclaration
ruleAliasDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='using' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAliasDeclarationAccess().getUsingKeyword_0()); 
    }
    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getAliasDeclarationAccess().getIDTerminalRuleCall_1()); 
    }

	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAliasDeclarationAccess().getEqualsSignKeyword_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getAliasDeclarationAccess().getTypeIdParserRuleCall_3()); 
    }
    this_TypeId_3=ruleTypeId    {
		$current.merge(this_TypeId_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAliasDeclarationAccess().getSemicolonKeyword_4()); 
    }
)
    ;





// Entry rule entryRuleSimpleDeclaration
entryRuleSimpleDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleDeclarationRule()); } 
	 iv_ruleSimpleDeclaration=ruleSimpleDeclaration 
	 { $current=$iv_ruleSimpleDeclaration.current.getText(); }  
	 EOF 
;

// Rule SimpleDeclaration
ruleSimpleDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getSimpleDeclarationAccess().getDeclarationSpecifierParserRuleCall_0()); 
    }
    this_DeclarationSpecifier_0=ruleDeclarationSpecifier    {
		$current.merge(this_DeclarationSpecifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
    { 
        newCompositeNode(grammarAccess.getSimpleDeclarationAccess().getSimpleDeclarationSuffixParserRuleCall_1()); 
    }
    this_SimpleDeclarationSuffix_1=ruleSimpleDeclarationSuffix    {
		$current.merge(this_SimpleDeclarationSuffix_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleSimpleOrFunctionDeclaration
entryRuleSimpleOrFunctionDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleOrFunctionDeclarationRule()); } 
	 iv_ruleSimpleOrFunctionDeclaration=ruleSimpleOrFunctionDeclaration 
	 { $current=$iv_ruleSimpleOrFunctionDeclaration.current.getText(); }  
	 EOF 
;

// Rule SimpleOrFunctionDeclaration
ruleSimpleOrFunctionDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getSimpleOrFunctionDeclarationAccess().getDeclarationSpecifierParserRuleCall_0()); 
    }
    this_DeclarationSpecifier_0=ruleDeclarationSpecifier    {
		$current.merge(this_DeclarationSpecifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*(
    { 
        newCompositeNode(grammarAccess.getSimpleOrFunctionDeclarationAccess().getSimpleDeclarationSuffixParserRuleCall_1_0()); 
    }
    this_SimpleDeclarationSuffix_1=ruleSimpleDeclarationSuffix    {
		$current.merge(this_SimpleDeclarationSuffix_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getSimpleOrFunctionDeclarationAccess().getFunctionDeclarationSuffixParserRuleCall_1_1()); 
    }
    this_FunctionDeclarationSuffix_2=ruleFunctionDeclarationSuffix    {
		$current.merge(this_FunctionDeclarationSuffix_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))
    ;





// Entry rule entryRuleSimpleDeclarationSuffix
entryRuleSimpleDeclarationSuffix returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleDeclarationSuffixRule()); } 
	 iv_ruleSimpleDeclarationSuffix=ruleSimpleDeclarationSuffix 
	 { $current=$iv_ruleSimpleDeclarationSuffix.current.getText(); }  
	 EOF 
;

// Rule SimpleDeclarationSuffix
ruleSimpleDeclarationSuffix returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getSimpleDeclarationSuffixAccess().getInitDeclaratorListParserRuleCall_0()); 
    }
    this_InitDeclaratorList_0=ruleInitDeclaratorList    {
		$current.merge(this_InitDeclaratorList_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpleDeclarationSuffixAccess().getSemicolonKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleFunctionDeclarationSuffix
entryRuleFunctionDeclarationSuffix returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionDeclarationSuffixRule()); } 
	 iv_ruleFunctionDeclarationSuffix=ruleFunctionDeclarationSuffix 
	 { $current=$iv_ruleFunctionDeclarationSuffix.current.getText(); }  
	 EOF 
;

// Rule FunctionDeclarationSuffix
ruleFunctionDeclarationSuffix returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFunctionDeclarationSuffixAccess().getFunctionDeclaratorParserRuleCall_0()); 
    }
    this_FunctionDeclarator_0=ruleFunctionDeclarator    {
		$current.merge(this_FunctionDeclarator_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getFunctionDeclarationSuffixAccess().getFunctionBodyParserRuleCall_1_0()); 
    }
    this_FunctionBody_1=ruleFunctionBody    {
		$current.merge(this_FunctionBody_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |(
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunctionDeclarationSuffixAccess().getEqualsSignKeyword_1_1_0()); 
    }

	kw='default' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunctionDeclarationSuffixAccess().getDefaultKeyword_1_1_1()); 
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunctionDeclarationSuffixAccess().getSemicolonKeyword_1_1_2()); 
    }
)
    |(
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunctionDeclarationSuffixAccess().getEqualsSignKeyword_1_2_0()); 
    }

	kw='delete' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunctionDeclarationSuffixAccess().getDeleteKeyword_1_2_1()); 
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunctionDeclarationSuffixAccess().getSemicolonKeyword_1_2_2()); 
    }
)))
    ;





// Entry rule entryRuleStaticAssertDeclaration
entryRuleStaticAssertDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStaticAssertDeclarationRule()); } 
	 iv_ruleStaticAssertDeclaration=ruleStaticAssertDeclaration 
	 { $current=$iv_ruleStaticAssertDeclaration.current.getText(); }  
	 EOF 
;

// Rule StaticAssertDeclaration
ruleStaticAssertDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='static_assert' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStaticAssertDeclarationAccess().getStatic_assertKeyword_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStaticAssertDeclarationAccess().getLeftParenthesisKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getStaticAssertDeclarationAccess().getConstantExpressionParserRuleCall_2()); 
    }
    this_ConstantExpression_2=ruleConstantExpression    {
		$current.merge(this_ConstantExpression_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStaticAssertDeclarationAccess().getCommaKeyword_3()); 
    }
    this_STRING_LITERAL_4=RULE_STRING_LITERAL    {
		$current.merge(this_STRING_LITERAL_4);
    }

    { 
    newLeafNode(this_STRING_LITERAL_4, grammarAccess.getStaticAssertDeclarationAccess().getSTRING_LITERALTerminalRuleCall_4()); 
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStaticAssertDeclarationAccess().getRightParenthesisKeyword_5()); 
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStaticAssertDeclarationAccess().getSemicolonKeyword_6()); 
    }
)
    ;





// Entry rule entryRuleDeclarationSpecifier
entryRuleDeclarationSpecifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclarationSpecifierRule()); } 
	 iv_ruleDeclarationSpecifier=ruleDeclarationSpecifier 
	 { $current=$iv_ruleDeclarationSpecifier.current.getText(); }  
	 EOF 
;

// Rule DeclarationSpecifier
ruleDeclarationSpecifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getDeclarationSpecifierAccess().getStorageClassSpecifierParserRuleCall_0()); 
    }
    this_StorageClassSpecifier_0=ruleStorageClassSpecifier    {
		$current.merge(this_StorageClassSpecifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationSpecifierAccess().getTypeSpecifierParserRuleCall_1()); 
    }
    this_TypeSpecifier_1=ruleTypeSpecifier    {
		$current.merge(this_TypeSpecifier_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getDeclarationSpecifierAccess().getFunctionSpecifierParserRuleCall_2()); 
    }
    this_FunctionSpecifier_2=ruleFunctionSpecifier    {
		$current.merge(this_FunctionSpecifier_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw='friend' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDeclarationSpecifierAccess().getFriendKeyword_3()); 
    }

    |
	kw='typedef' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDeclarationSpecifierAccess().getTypedefKeyword_4()); 
    }

    |
	kw='constexpr' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDeclarationSpecifierAccess().getConstexprKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleStorageClassSpecifier
entryRuleStorageClassSpecifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getStorageClassSpecifierRule()); } 
	 iv_ruleStorageClassSpecifier=ruleStorageClassSpecifier 
	 { $current=$iv_ruleStorageClassSpecifier.current.getText(); }  
	 EOF 
;

// Rule StorageClassSpecifier
ruleStorageClassSpecifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='register' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStorageClassSpecifierAccess().getRegisterKeyword_0()); 
    }

    |
	kw='static' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStorageClassSpecifierAccess().getStaticKeyword_1()); 
    }

    |
	kw='thread_local' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStorageClassSpecifierAccess().getThread_localKeyword_2()); 
    }

    |
	kw='extern' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStorageClassSpecifierAccess().getExternKeyword_3()); 
    }

    |
	kw='mutable' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getStorageClassSpecifierAccess().getMutableKeyword_4()); 
    }
)
    ;





// Entry rule entryRuleFunctionSpecifier
entryRuleFunctionSpecifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionSpecifierRule()); } 
	 iv_ruleFunctionSpecifier=ruleFunctionSpecifier 
	 { $current=$iv_ruleFunctionSpecifier.current.getText(); }  
	 EOF 
;

// Rule FunctionSpecifier
ruleFunctionSpecifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='inline' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunctionSpecifierAccess().getInlineKeyword_0()); 
    }

    |
	kw='virtual' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunctionSpecifierAccess().getVirtualKeyword_1()); 
    }

    |
	kw='explicit' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunctionSpecifierAccess().getExplicitKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleTypeSpecifier
entryRuleTypeSpecifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeSpecifierRule()); } 
	 iv_ruleTypeSpecifier=ruleTypeSpecifier 
	 { $current=$iv_ruleTypeSpecifier.current.getText(); }  
	 EOF 
;

// Rule TypeSpecifier
ruleTypeSpecifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeSpecifierAccess().getTrailingTypeSpecifierParserRuleCall_0()); 
    }
    this_TrailingTypeSpecifier_0=ruleTrailingTypeSpecifier    {
		$current.merge(this_TrailingTypeSpecifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeSpecifierAccess().getClassSpecifierParserRuleCall_1()); 
    }
    this_ClassSpecifier_1=ruleClassSpecifier    {
		$current.merge(this_ClassSpecifier_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTypeSpecifierAccess().getEnumSpecifierParserRuleCall_2()); 
    }
    this_EnumSpecifier_2=ruleEnumSpecifier    {
		$current.merge(this_EnumSpecifier_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleTrailingTypeSpecifier
entryRuleTrailingTypeSpecifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTrailingTypeSpecifierRule()); } 
	 iv_ruleTrailingTypeSpecifier=ruleTrailingTypeSpecifier 
	 { $current=$iv_ruleTrailingTypeSpecifier.current.getText(); }  
	 EOF 
;

// Rule TrailingTypeSpecifier
ruleTrailingTypeSpecifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTrailingTypeSpecifierAccess().getSimpleTypeSpecifierParserRuleCall_0()); 
    }
    this_SimpleTypeSpecifier_0=ruleSimpleTypeSpecifier    {
		$current.merge(this_SimpleTypeSpecifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTrailingTypeSpecifierAccess().getTypenameSpecifierParserRuleCall_1()); 
    }
    this_TypenameSpecifier_1=ruleTypenameSpecifier    {
		$current.merge(this_TypenameSpecifier_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTrailingTypeSpecifierAccess().getCvQualifierParserRuleCall_2()); 
    }
    this_CvQualifier_2=ruleCvQualifier    {
		$current.merge(this_CvQualifier_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleSimpleTypeSpecifier
entryRuleSimpleTypeSpecifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleTypeSpecifierRule()); } 
	 iv_ruleSimpleTypeSpecifier=ruleSimpleTypeSpecifier 
	 { $current=$iv_ruleSimpleTypeSpecifier.current.getText(); }  
	 EOF 
;

// Rule SimpleTypeSpecifier
ruleSimpleTypeSpecifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	kw='::' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpleTypeSpecifierAccess().getColonColonKeyword_0_0()); 
    }
)?(
    { 
        newCompositeNode(grammarAccess.getSimpleTypeSpecifierAccess().getTypeNameParserRuleCall_0_1_0()); 
    }
    this_TypeName_1=ruleTypeName    {
		$current.merge(this_TypeName_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |(
    { 
        newCompositeNode(grammarAccess.getSimpleTypeSpecifierAccess().getNestedNameSpecifierParserRuleCall_0_1_1_0()); 
    }
    this_NestedNameSpecifier_2=ruleNestedNameSpecifier    {
		$current.merge(this_NestedNameSpecifier_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getSimpleTypeSpecifierAccess().getTypeNameParserRuleCall_0_1_1_1_0()); 
    }
    this_TypeName_3=ruleTypeName    {
		$current.merge(this_TypeName_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |(
	kw='template' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpleTypeSpecifierAccess().getTemplateKeyword_0_1_1_1_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getSimpleTypeSpecifierAccess().getSimpleTemplateIdParserRuleCall_0_1_1_1_1_1()); 
    }
    this_SimpleTemplateId_5=ruleSimpleTemplateId    {
		$current.merge(this_SimpleTemplateId_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)))))
    |
	kw='char16_t' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpleTypeSpecifierAccess().getChar16_tKeyword_1()); 
    }

    |
	kw='char32_t' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpleTypeSpecifierAccess().getChar32_tKeyword_2()); 
    }

    |
	kw='wchar_t' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpleTypeSpecifierAccess().getWchar_tKeyword_3()); 
    }

    |
	kw='bool' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpleTypeSpecifierAccess().getBoolKeyword_4()); 
    }

    |
	kw='short' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpleTypeSpecifierAccess().getShortKeyword_5()); 
    }

    |
	kw='int' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpleTypeSpecifierAccess().getIntKeyword_6()); 
    }

    |
	kw='long' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpleTypeSpecifierAccess().getLongKeyword_7()); 
    }

    |
	kw='signed' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpleTypeSpecifierAccess().getSignedKeyword_8()); 
    }

    |
	kw='unsigned' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpleTypeSpecifierAccess().getUnsignedKeyword_9()); 
    }

    |
	kw='float' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpleTypeSpecifierAccess().getFloatKeyword_10()); 
    }

    |
	kw='double' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpleTypeSpecifierAccess().getDoubleKeyword_11()); 
    }

    |
	kw='auto' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpleTypeSpecifierAccess().getAutoKeyword_12()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getSimpleTypeSpecifierAccess().getDeclarationTypeSpecifierParserRuleCall_13()); 
    }
    this_DeclarationTypeSpecifier_18=ruleDeclarationTypeSpecifier    {
		$current.merge(this_DeclarationTypeSpecifier_18);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleTypeName
entryRuleTypeName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeNameRule()); } 
	 iv_ruleTypeName=ruleTypeName 
	 { $current=$iv_ruleTypeName.current.getText(); }  
	 EOF 
;

// Rule TypeName
ruleTypeName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeNameAccess().getSimpleTemplateIdParserRuleCall_0()); 
    }
    this_SimpleTemplateId_0=ruleSimpleTemplateId    {
		$current.merge(this_SimpleTemplateId_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getTypeNameAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleDeclarationTypeSpecifier
entryRuleDeclarationTypeSpecifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclarationTypeSpecifierRule()); } 
	 iv_ruleDeclarationTypeSpecifier=ruleDeclarationTypeSpecifier 
	 { $current=$iv_ruleDeclarationTypeSpecifier.current.getText(); }  
	 EOF 
;

// Rule DeclarationTypeSpecifier
ruleDeclarationTypeSpecifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='decltype' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDeclarationTypeSpecifierAccess().getDecltypeKeyword_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDeclarationTypeSpecifierAccess().getLeftParenthesisKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getDeclarationTypeSpecifierAccess().getExpressionParserRuleCall_2()); 
    }
    this_Expression_2=ruleExpression    {
		$current.merge(this_Expression_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDeclarationTypeSpecifierAccess().getRightParenthesisKeyword_3()); 
    }
)
    ;







// Entry rule entryRuleEnumSpecifier
entryRuleEnumSpecifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumSpecifierRule()); } 
	 iv_ruleEnumSpecifier=ruleEnumSpecifier 
	 { $current=$iv_ruleEnumSpecifier.current.getText(); }  
	 EOF 
;

// Rule EnumSpecifier
ruleEnumSpecifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEnumSpecifierAccess().getEnumHeadParserRuleCall_0()); 
    }
    this_EnumHead_0=ruleEnumHead    {
		$current.merge(this_EnumHead_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumSpecifierAccess().getLeftCurlyBracketKeyword_1()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getEnumSpecifierAccess().getEnumeratorListParserRuleCall_2_0()); 
    }
    this_EnumeratorList_2=ruleEnumeratorList    {
		$current.merge(this_EnumeratorList_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumSpecifierAccess().getCommaKeyword_2_1()); 
    }
)?)?
	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumSpecifierAccess().getRightCurlyBracketKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleEnumHead
entryRuleEnumHead returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumHeadRule()); } 
	 iv_ruleEnumHead=ruleEnumHead 
	 { $current=$iv_ruleEnumHead.current.getText(); }  
	 EOF 
;

// Rule EnumHead
ruleEnumHead returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEnumHeadAccess().getEnumKeyParserRuleCall_0()); 
    }
    this_EnumKey_0=ruleEnumKey    {
		$current.merge(this_EnumKey_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
((    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEnumHeadAccess().getIDTerminalRuleCall_1_0()); 
    }
)?
    |(
    { 
        newCompositeNode(grammarAccess.getEnumHeadAccess().getNestedNameSpecifierParserRuleCall_1_1_0()); 
    }
    this_NestedNameSpecifier_2=ruleNestedNameSpecifier    {
		$current.merge(this_NestedNameSpecifier_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    newLeafNode(this_ID_3, grammarAccess.getEnumHeadAccess().getIDTerminalRuleCall_1_1_1()); 
    }
))(
    { 
        newCompositeNode(grammarAccess.getEnumHeadAccess().getEnumBaseParserRuleCall_2()); 
    }
    this_EnumBase_4=ruleEnumBase    {
		$current.merge(this_EnumBase_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;





// Entry rule entryRuleEnumKey
entryRuleEnumKey returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumKeyRule()); } 
	 iv_ruleEnumKey=ruleEnumKey 
	 { $current=$iv_ruleEnumKey.current.getText(); }  
	 EOF 
;

// Rule EnumKey
ruleEnumKey returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='enum' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumKeyAccess().getEnumKeyword_0()); 
    }

    |(
	kw='enum' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumKeyAccess().getEnumKeyword_1_0()); 
    }

	kw='class' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumKeyAccess().getClassKeyword_1_1()); 
    }
)
    |(
	kw='enum' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumKeyAccess().getEnumKeyword_2_0()); 
    }

	kw='struct' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumKeyAccess().getStructKeyword_2_1()); 
    }
))
    ;





// Entry rule entryRuleEnumBase
entryRuleEnumBase returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumBaseRule()); } 
	 iv_ruleEnumBase=ruleEnumBase 
	 { $current=$iv_ruleEnumBase.current.getText(); }  
	 EOF 
;

// Rule EnumBase
ruleEnumBase returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumBaseAccess().getColonKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getEnumBaseAccess().getTypeSpecifierParserRuleCall_1()); 
    }
    this_TypeSpecifier_1=ruleTypeSpecifier    {
		$current.merge(this_TypeSpecifier_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+)
    ;





// Entry rule entryRuleEnumeratorList
entryRuleEnumeratorList returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumeratorListRule()); } 
	 iv_ruleEnumeratorList=ruleEnumeratorList 
	 { $current=$iv_ruleEnumeratorList.current.getText(); }  
	 EOF 
;

// Rule EnumeratorList
ruleEnumeratorList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEnumeratorListAccess().getEnumerationDefinitionParserRuleCall_0()); 
    }
    this_EnumerationDefinition_0=ruleEnumerationDefinition    {
		$current.merge(this_EnumerationDefinition_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumeratorListAccess().getCommaKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getEnumeratorListAccess().getEnumerationDefinitionParserRuleCall_1_1()); 
    }
    this_EnumerationDefinition_2=ruleEnumerationDefinition    {
		$current.merge(this_EnumerationDefinition_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleEnumerationDefinition
entryRuleEnumerationDefinition returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumerationDefinitionRule()); } 
	 iv_ruleEnumerationDefinition=ruleEnumerationDefinition 
	 { $current=$iv_ruleEnumerationDefinition.current.getText(); }  
	 EOF 
;

// Rule EnumerationDefinition
ruleEnumerationDefinition returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEnumerationDefinitionAccess().getEnumeratorParserRuleCall_0()); 
    }
    this_Enumerator_0=ruleEnumerator    {
		$current.merge(this_Enumerator_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEnumerationDefinitionAccess().getEqualsSignKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getEnumerationDefinitionAccess().getConstantExpressionParserRuleCall_1_1()); 
    }
    this_ConstantExpression_2=ruleConstantExpression    {
		$current.merge(this_ConstantExpression_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;





// Entry rule entryRuleEnumerator
entryRuleEnumerator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEnumeratorRule()); } 
	 iv_ruleEnumerator=ruleEnumerator 
	 { $current=$iv_ruleEnumerator.current.getText(); }  
	 EOF 
;

// Rule Enumerator
ruleEnumerator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getEnumeratorAccess().getIDTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleNamespaceAliasDefinition
entryRuleNamespaceAliasDefinition returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNamespaceAliasDefinitionRule()); } 
	 iv_ruleNamespaceAliasDefinition=ruleNamespaceAliasDefinition 
	 { $current=$iv_ruleNamespaceAliasDefinition.current.getText(); }  
	 EOF 
;

// Rule NamespaceAliasDefinition
ruleNamespaceAliasDefinition returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='namespace' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNamespaceAliasDefinitionAccess().getNamespaceKeyword_0()); 
    }
    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getNamespaceAliasDefinitionAccess().getIDTerminalRuleCall_1()); 
    }

	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNamespaceAliasDefinitionAccess().getEqualsSignKeyword_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getNamespaceAliasDefinitionAccess().getQualifiedNamespaceSpecifierParserRuleCall_3()); 
    }
    this_QualifiedNamespaceSpecifier_3=ruleQualifiedNamespaceSpecifier    {
		$current.merge(this_QualifiedNamespaceSpecifier_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNamespaceAliasDefinitionAccess().getSemicolonKeyword_4()); 
    }
)
    ;





// Entry rule entryRuleQualifiedNamespaceSpecifier
entryRuleQualifiedNamespaceSpecifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNamespaceSpecifierRule()); } 
	 iv_ruleQualifiedNamespaceSpecifier=ruleQualifiedNamespaceSpecifier 
	 { $current=$iv_ruleQualifiedNamespaceSpecifier.current.getText(); }  
	 EOF 
;

// Rule QualifiedNamespaceSpecifier
ruleQualifiedNamespaceSpecifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='::' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNamespaceSpecifierAccess().getColonColonKeyword_0()); 
    }
)?(
    { 
        newCompositeNode(grammarAccess.getQualifiedNamespaceSpecifierAccess().getNestedNameSpecifierParserRuleCall_1()); 
    }
    this_NestedNameSpecifier_1=ruleNestedNameSpecifier    {
		$current.merge(this_NestedNameSpecifier_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNamespaceSpecifierAccess().getIDTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRuleUsingDeclaration
entryRuleUsingDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUsingDeclarationRule()); } 
	 iv_ruleUsingDeclaration=ruleUsingDeclaration 
	 { $current=$iv_ruleUsingDeclaration.current.getText(); }  
	 EOF 
;

// Rule UsingDeclaration
ruleUsingDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='using' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUsingDeclarationAccess().getUsingKeyword_0()); 
    }
(
	kw='::' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUsingDeclarationAccess().getColonColonKeyword_1_0()); 
    }

    |((
	kw='typename' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUsingDeclarationAccess().getTypenameKeyword_1_1_0()); 
    }
)?(
	kw='::' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUsingDeclarationAccess().getColonColonKeyword_1_1_1()); 
    }
)?
    { 
        newCompositeNode(grammarAccess.getUsingDeclarationAccess().getNestedNameSpecifierParserRuleCall_1_1_2()); 
    }
    this_NestedNameSpecifier_4=ruleNestedNameSpecifier    {
		$current.merge(this_NestedNameSpecifier_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))
    { 
        newCompositeNode(grammarAccess.getUsingDeclarationAccess().getUnqualifiedIdParserRuleCall_2()); 
    }
    this_UnqualifiedId_5=ruleUnqualifiedId    {
		$current.merge(this_UnqualifiedId_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUsingDeclarationAccess().getSemicolonKeyword_3()); 
    }
)
    ;







// Entry rule entryRuleAsmDefinition
entryRuleAsmDefinition returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAsmDefinitionRule()); } 
	 iv_ruleAsmDefinition=ruleAsmDefinition 
	 { $current=$iv_ruleAsmDefinition.current.getText(); }  
	 EOF 
;

// Rule AsmDefinition
ruleAsmDefinition returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='asm' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAsmDefinitionAccess().getAsmKeyword_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAsmDefinitionAccess().getLeftParenthesisKeyword_1()); 
    }
    this_STRING_LITERAL_2=RULE_STRING_LITERAL    {
		$current.merge(this_STRING_LITERAL_2);
    }

    { 
    newLeafNode(this_STRING_LITERAL_2, grammarAccess.getAsmDefinitionAccess().getSTRING_LITERALTerminalRuleCall_2()); 
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAsmDefinitionAccess().getRightParenthesisKeyword_3()); 
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAsmDefinitionAccess().getSemicolonKeyword_4()); 
    }
)
    ;





// Entry rule entryRuleInitDeclaratorList
entryRuleInitDeclaratorList returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInitDeclaratorListRule()); } 
	 iv_ruleInitDeclaratorList=ruleInitDeclaratorList 
	 { $current=$iv_ruleInitDeclaratorList.current.getText(); }  
	 EOF 
;

// Rule InitDeclaratorList
ruleInitDeclaratorList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getInitDeclaratorListAccess().getInitDeclaratorParserRuleCall_0()); 
    }
    this_InitDeclarator_0=ruleInitDeclarator    {
		$current.merge(this_InitDeclarator_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(((
	',' 
)=>
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInitDeclaratorListAccess().getCommaKeyword_1_0()); 
    }
)
    { 
        newCompositeNode(grammarAccess.getInitDeclaratorListAccess().getInitDeclaratorParserRuleCall_1_1()); 
    }
    this_InitDeclarator_2=ruleInitDeclarator    {
		$current.merge(this_InitDeclarator_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleInitDeclarator
entryRuleInitDeclarator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInitDeclaratorRule()); } 
	 iv_ruleInitDeclarator=ruleInitDeclarator 
	 { $current=$iv_ruleInitDeclarator.current.getText(); }  
	 EOF 
;

// Rule InitDeclarator
ruleInitDeclarator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getInitDeclaratorAccess().getDeclaratorIdParserRuleCall_0()); 
    }
    this_DeclaratorId_0=ruleDeclaratorId    {
		$current.merge(this_DeclaratorId_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getInitDeclaratorAccess().getInitializerParserRuleCall_1()); 
    }
    this_Initializer_1=ruleInitializer    {
		$current.merge(this_Initializer_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;





// Entry rule entryRuleFunctionDeclarator
entryRuleFunctionDeclarator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionDeclaratorRule()); } 
	 iv_ruleFunctionDeclarator=ruleFunctionDeclarator 
	 { $current=$iv_ruleFunctionDeclarator.current.getText(); }  
	 EOF 
;

// Rule FunctionDeclarator
ruleFunctionDeclarator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFunctionDeclaratorAccess().getDeclaratorIdParserRuleCall_0()); 
    }
    this_DeclaratorId_0=ruleDeclaratorId    {
		$current.merge(this_DeclaratorId_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getFunctionDeclaratorAccess().getParametersAndQualifiersParserRuleCall_1()); 
    }
    this_ParametersAndQualifiers_1=ruleParametersAndQualifiers    {
		$current.merge(this_ParametersAndQualifiers_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleParametersAndQualifiers
entryRuleParametersAndQualifiers returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getParametersAndQualifiersRule()); } 
	 iv_ruleParametersAndQualifiers=ruleParametersAndQualifiers 
	 { $current=$iv_ruleParametersAndQualifiers.current.getText(); }  
	 EOF 
;

// Rule ParametersAndQualifiers
ruleParametersAndQualifiers returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getParametersAndQualifiersAccess().getLeftParenthesisKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getParametersAndQualifiersAccess().getParameterDeclarationClauseParserRuleCall_1()); 
    }
    this_ParameterDeclarationClause_1=ruleParameterDeclarationClause    {
		$current.merge(this_ParameterDeclarationClause_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getParametersAndQualifiersAccess().getRightParenthesisKeyword_2()); 
    }
(
	kw='const' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getParametersAndQualifiersAccess().getConstKeyword_3_0()); 
    }

    |
	kw='volatile' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getParametersAndQualifiersAccess().getVolatileKeyword_3_1()); 
    }
)?(
	kw='&' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getParametersAndQualifiersAccess().getAmpersandKeyword_4_0()); 
    }

    |
	kw='&&' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getParametersAndQualifiersAccess().getAmpersandAmpersandKeyword_4_1()); 
    }
)?(
    { 
        newCompositeNode(grammarAccess.getParametersAndQualifiersAccess().getExceptionSpecificationParserRuleCall_5()); 
    }
    this_ExceptionSpecification_7=ruleExceptionSpecification    {
		$current.merge(this_ExceptionSpecification_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;





// Entry rule entryRuleDeclaratorId
entryRuleDeclaratorId returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclaratorIdRule()); } 
	 iv_ruleDeclaratorId=ruleDeclaratorId 
	 { $current=$iv_ruleDeclaratorId.current.getText(); }  
	 EOF 
;

// Rule DeclaratorId
ruleDeclaratorId returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='...' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDeclaratorIdAccess().getFullStopFullStopFullStopKeyword_0()); 
    }
)?
    { 
        newCompositeNode(grammarAccess.getDeclaratorIdAccess().getIdExpressionParserRuleCall_1()); 
    }
    this_IdExpression_1=ruleIdExpression    {
		$current.merge(this_IdExpression_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleTypeId
entryRuleTypeId returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeIdRule()); } 
	 iv_ruleTypeId=ruleTypeId 
	 { $current=$iv_ruleTypeId.current.getText(); }  
	 EOF 
;

// Rule TypeId
ruleTypeId returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTypeIdAccess().getTypeSpecifierParserRuleCall()); 
    }
    this_TypeSpecifier_0=ruleTypeSpecifier    {
		$current.merge(this_TypeSpecifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+
    ;





// Entry rule entryRuleParameterDeclarationClause
entryRuleParameterDeclarationClause returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterDeclarationClauseRule()); } 
	 iv_ruleParameterDeclarationClause=ruleParameterDeclarationClause 
	 { $current=$iv_ruleParameterDeclarationClause.current.getText(); }  
	 EOF 
;

// Rule ParameterDeclarationClause
ruleParameterDeclarationClause returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='...' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getParameterDeclarationClauseAccess().getFullStopFullStopFullStopKeyword_0()); 
    }

    |(
    { 
        newCompositeNode(grammarAccess.getParameterDeclarationClauseAccess().getParameterDeclarationListParserRuleCall_1_0()); 
    }
    this_ParameterDeclarationList_1=ruleParameterDeclarationList    {
		$current.merge(this_ParameterDeclarationList_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
((
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getParameterDeclarationClauseAccess().getCommaKeyword_1_1_0()); 
    }
)?
	kw='...' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getParameterDeclarationClauseAccess().getFullStopFullStopFullStopKeyword_1_1_1()); 
    }
)?))
    ;





// Entry rule entryRuleParameterDeclarationList
entryRuleParameterDeclarationList returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterDeclarationListRule()); } 
	 iv_ruleParameterDeclarationList=ruleParameterDeclarationList 
	 { $current=$iv_ruleParameterDeclarationList.current.getText(); }  
	 EOF 
;

// Rule ParameterDeclarationList
ruleParameterDeclarationList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getParameterDeclarationListAccess().getParameterDeclarationParserRuleCall_0()); 
    }
    this_ParameterDeclaration_0=ruleParameterDeclaration    {
		$current.merge(this_ParameterDeclaration_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getParameterDeclarationListAccess().getCommaKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getParameterDeclarationListAccess().getParameterDeclarationParserRuleCall_1_1()); 
    }
    this_ParameterDeclaration_2=ruleParameterDeclaration    {
		$current.merge(this_ParameterDeclaration_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleParameterDeclaration
entryRuleParameterDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterDeclarationRule()); } 
	 iv_ruleParameterDeclaration=ruleParameterDeclaration 
	 { $current=$iv_ruleParameterDeclaration.current.getText(); }  
	 EOF 
;

// Rule ParameterDeclaration
ruleParameterDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getParameterDeclarationAccess().getDeclarationSpecifierParserRuleCall_0()); 
    }
    this_DeclarationSpecifier_0=ruleDeclarationSpecifier    {
		$current.merge(this_DeclarationSpecifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+
    { 
        newCompositeNode(grammarAccess.getParameterDeclarationAccess().getInitDeclaratorParserRuleCall_1()); 
    }
    this_InitDeclarator_1=ruleInitDeclarator    {
		$current.merge(this_InitDeclarator_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleFunctionBody
entryRuleFunctionBody returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionBodyRule()); } 
	 iv_ruleFunctionBody=ruleFunctionBody 
	 { $current=$iv_ruleFunctionBody.current.getText(); }  
	 EOF 
;

// Rule FunctionBody
ruleFunctionBody returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    { 
        newCompositeNode(grammarAccess.getFunctionBodyAccess().getCtorInitializerParserRuleCall_0_0()); 
    }
    this_CtorInitializer_0=ruleCtorInitializer    {
		$current.merge(this_CtorInitializer_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
    { 
        newCompositeNode(grammarAccess.getFunctionBodyAccess().getCompoundStatementParserRuleCall_0_1()); 
    }
    this_CompoundStatement_1=ruleCompoundStatement    {
		$current.merge(this_CompoundStatement_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getFunctionBodyAccess().getFunctionTryBlockParserRuleCall_1()); 
    }
    this_FunctionTryBlock_2=ruleFunctionTryBlock    {
		$current.merge(this_FunctionTryBlock_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleInitializer
entryRuleInitializer returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInitializerRule()); } 
	 iv_ruleInitializer=ruleInitializer 
	 { $current=$iv_ruleInitializer.current.getText(); }  
	 EOF 
;

// Rule Initializer
ruleInitializer returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getInitializerAccess().getBraceOrEqualInitializerParserRuleCall_0()); 
    }
    this_BraceOrEqualInitializer_0=ruleBraceOrEqualInitializer    {
		$current.merge(this_BraceOrEqualInitializer_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |(
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInitializerAccess().getLeftParenthesisKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getInitializerAccess().getExpressionListParserRuleCall_1_1()); 
    }
    this_ExpressionList_2=ruleExpressionList    {
		$current.merge(this_ExpressionList_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInitializerAccess().getRightParenthesisKeyword_1_2()); 
    }
))
    ;





// Entry rule entryRuleBraceOrEqualInitializer
entryRuleBraceOrEqualInitializer returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBraceOrEqualInitializerRule()); } 
	 iv_ruleBraceOrEqualInitializer=ruleBraceOrEqualInitializer 
	 { $current=$iv_ruleBraceOrEqualInitializer.current.getText(); }  
	 EOF 
;

// Rule BraceOrEqualInitializer
ruleBraceOrEqualInitializer returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBraceOrEqualInitializerAccess().getEqualsSignKeyword_0_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getBraceOrEqualInitializerAccess().getInitializerClauseParserRuleCall_0_1()); 
    }
    this_InitializerClause_1=ruleInitializerClause    {
		$current.merge(this_InitializerClause_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getBraceOrEqualInitializerAccess().getBracedInitializerListParserRuleCall_1()); 
    }
    this_BracedInitializerList_2=ruleBracedInitializerList    {
		$current.merge(this_BracedInitializerList_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleInitializerClause
entryRuleInitializerClause returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInitializerClauseRule()); } 
	 iv_ruleInitializerClause=ruleInitializerClause 
	 { $current=$iv_ruleInitializerClause.current.getText(); }  
	 EOF 
;

// Rule InitializerClause
ruleInitializerClause returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getInitializerClauseAccess().getAssignmentExpressionParserRuleCall_0()); 
    }
    this_AssignmentExpression_0=ruleAssignmentExpression    {
		$current.merge(this_AssignmentExpression_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getInitializerClauseAccess().getBracedInitializerListParserRuleCall_1()); 
    }
    this_BracedInitializerList_1=ruleBracedInitializerList    {
		$current.merge(this_BracedInitializerList_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleInitializerList
entryRuleInitializerList returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getInitializerListRule()); } 
	 iv_ruleInitializerList=ruleInitializerList 
	 { $current=$iv_ruleInitializerList.current.getText(); }  
	 EOF 
;

// Rule InitializerList
ruleInitializerList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getInitializerListAccess().getInitializerClauseParserRuleCall_0()); 
    }
    this_InitializerClause_0=ruleInitializerClause    {
		$current.merge(this_InitializerClause_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='...' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInitializerListAccess().getFullStopFullStopFullStopKeyword_1()); 
    }
)?(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInitializerListAccess().getCommaKeyword_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getInitializerListAccess().getInitializerClauseParserRuleCall_2_1()); 
    }
    this_InitializerClause_3=ruleInitializerClause    {
		$current.merge(this_InitializerClause_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='...' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInitializerListAccess().getFullStopFullStopFullStopKeyword_2_2()); 
    }
)?)*)
    ;





// Entry rule entryRuleBracedInitializerList
entryRuleBracedInitializerList returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBracedInitializerListRule()); } 
	 iv_ruleBracedInitializerList=ruleBracedInitializerList 
	 { $current=$iv_ruleBracedInitializerList.current.getText(); }  
	 EOF 
;

// Rule BracedInitializerList
ruleBracedInitializerList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBracedInitializerListAccess().getLeftCurlyBracketKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getBracedInitializerListAccess().getInitializerListParserRuleCall_1_0()); 
    }
    this_InitializerList_1=ruleInitializerList    {
		$current.merge(this_InitializerList_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBracedInitializerListAccess().getCommaKeyword_1_1()); 
    }
)?)?
	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBracedInitializerListAccess().getRightCurlyBracketKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleClassSpecifier
entryRuleClassSpecifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassSpecifierRule()); } 
	 iv_ruleClassSpecifier=ruleClassSpecifier 
	 { $current=$iv_ruleClassSpecifier.current.getText(); }  
	 EOF 
;

// Rule ClassSpecifier
ruleClassSpecifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getClassSpecifierAccess().getClassHeadParserRuleCall_0()); 
    }
    this_ClassHead_0=ruleClassHead    {
		$current.merge(this_ClassHead_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getClassSpecifierAccess().getLeftCurlyBracketKeyword_1()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getClassSpecifierAccess().getMemberSpecificationParserRuleCall_2()); 
    }
    this_MemberSpecification_2=ruleMemberSpecification    {
		$current.merge(this_MemberSpecification_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getClassSpecifierAccess().getRightCurlyBracketKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleClassHead
entryRuleClassHead returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassHeadRule()); } 
	 iv_ruleClassHead=ruleClassHead 
	 { $current=$iv_ruleClassHead.current.getText(); }  
	 EOF 
;

// Rule ClassHead
ruleClassHead returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getClassHeadAccess().getClassKeyParserRuleCall_0()); 
    }
    this_ClassKey_0=ruleClassKey    {
		$current.merge(this_ClassKey_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
((
    { 
        newCompositeNode(grammarAccess.getClassHeadAccess().getNestedNameSpecifierParserRuleCall_1_0()); 
    }
    this_NestedNameSpecifier_1=ruleNestedNameSpecifier    {
		$current.merge(this_NestedNameSpecifier_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
    { 
        newCompositeNode(grammarAccess.getClassHeadAccess().getTypeNameParserRuleCall_1_1()); 
    }
    this_TypeName_2=ruleTypeName    {
		$current.merge(this_TypeName_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getClassHeadAccess().getClassVirtualSpecifierParserRuleCall_1_2()); 
    }
    this_ClassVirtualSpecifier_3=ruleClassVirtualSpecifier    {
		$current.merge(this_ClassVirtualSpecifier_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)?(
    { 
        newCompositeNode(grammarAccess.getClassHeadAccess().getBaseClauseParserRuleCall_2()); 
    }
    this_BaseClause_4=ruleBaseClause    {
		$current.merge(this_BaseClause_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;





// Entry rule entryRuleClassVirtualSpecifier
entryRuleClassVirtualSpecifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassVirtualSpecifierRule()); } 
	 iv_ruleClassVirtualSpecifier=ruleClassVirtualSpecifier 
	 { $current=$iv_ruleClassVirtualSpecifier.current.getText(); }  
	 EOF 
;

// Rule ClassVirtualSpecifier
ruleClassVirtualSpecifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='final' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getClassVirtualSpecifierAccess().getFinalKeyword_0()); 
    }

    |
	kw='explicit' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getClassVirtualSpecifierAccess().getExplicitKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleClassKey
entryRuleClassKey returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassKeyRule()); } 
	 iv_ruleClassKey=ruleClassKey 
	 { $current=$iv_ruleClassKey.current.getText(); }  
	 EOF 
;

// Rule ClassKey
ruleClassKey returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='class' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getClassKeyAccess().getClassKeyword_0()); 
    }

    |
	kw='struct' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getClassKeyAccess().getStructKeyword_1()); 
    }

    |
	kw='union' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getClassKeyAccess().getUnionKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleMemberSpecification
entryRuleMemberSpecification returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMemberSpecificationRule()); } 
	 iv_ruleMemberSpecification=ruleMemberSpecification 
	 { $current=$iv_ruleMemberSpecification.current.getText(); }  
	 EOF 
;

// Rule MemberSpecification
ruleMemberSpecification returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getMemberSpecificationAccess().getMemberDeclarationParserRuleCall_0_0()); 
    }
    this_MemberDeclaration_0=ruleMemberDeclaration    {
		$current.merge(this_MemberDeclaration_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |(
    { 
        newCompositeNode(grammarAccess.getMemberSpecificationAccess().getAccessSpecifierParserRuleCall_0_1_0()); 
    }
    this_AccessSpecifier_1=ruleAccessSpecifier    {
		$current.merge(this_AccessSpecifier_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMemberSpecificationAccess().getColonKeyword_0_1_1()); 
    }
))(
    { 
        newCompositeNode(grammarAccess.getMemberSpecificationAccess().getMemberSpecificationParserRuleCall_1()); 
    }
    this_MemberSpecification_3=ruleMemberSpecification    {
		$current.merge(this_MemberSpecification_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;





// Entry rule entryRuleMemberDeclaration
entryRuleMemberDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMemberDeclarationRule()); } 
	 iv_ruleMemberDeclaration=ruleMemberDeclaration 
	 { $current=$iv_ruleMemberDeclaration.current.getText(); }  
	 EOF 
;

// Rule MemberDeclaration
ruleMemberDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMemberDeclarationAccess().getMemberOrFunctionDeclarationParserRuleCall_0()); 
    }
    this_MemberOrFunctionDeclaration_0=ruleMemberOrFunctionDeclaration    {
		$current.merge(this_MemberOrFunctionDeclaration_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMemberDeclarationAccess().getUsingDeclarationParserRuleCall_1()); 
    }
    this_UsingDeclaration_1=ruleUsingDeclaration    {
		$current.merge(this_UsingDeclaration_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMemberDeclarationAccess().getStaticAssertDeclarationParserRuleCall_2()); 
    }
    this_StaticAssertDeclaration_2=ruleStaticAssertDeclaration    {
		$current.merge(this_StaticAssertDeclaration_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMemberDeclarationAccess().getTemplateDeclarationParserRuleCall_3()); 
    }
    this_TemplateDeclaration_3=ruleTemplateDeclaration    {
		$current.merge(this_TemplateDeclaration_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getMemberDeclarationAccess().getAliasDeclarationParserRuleCall_4()); 
    }
    this_AliasDeclaration_4=ruleAliasDeclaration    {
		$current.merge(this_AliasDeclaration_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleMemberOrFunctionDeclaration
entryRuleMemberOrFunctionDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMemberOrFunctionDeclarationRule()); } 
	 iv_ruleMemberOrFunctionDeclaration=ruleMemberOrFunctionDeclaration 
	 { $current=$iv_ruleMemberOrFunctionDeclaration.current.getText(); }  
	 EOF 
;

// Rule MemberOrFunctionDeclaration
ruleMemberOrFunctionDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getMemberOrFunctionDeclarationAccess().getDeclarationSpecifierParserRuleCall_0()); 
    }
    this_DeclarationSpecifier_0=ruleDeclarationSpecifier    {
		$current.merge(this_DeclarationSpecifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*(
    { 
        newCompositeNode(grammarAccess.getMemberOrFunctionDeclarationAccess().getFunctionDeclarationSuffixParserRuleCall_1_0()); 
    }
    this_FunctionDeclarationSuffix_1=ruleFunctionDeclarationSuffix    {
		$current.merge(this_FunctionDeclarationSuffix_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |(
    { 
        newCompositeNode(grammarAccess.getMemberOrFunctionDeclarationAccess().getMemberDeclarationSuffixParserRuleCall_1_1_0()); 
    }
    this_MemberDeclarationSuffix_2=ruleMemberDeclarationSuffix    {
		$current.merge(this_MemberDeclarationSuffix_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=';' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMemberOrFunctionDeclarationAccess().getSemicolonKeyword_1_1_1()); 
    }
)))
    ;





// Entry rule entryRuleMemberDeclarationSuffix
entryRuleMemberDeclarationSuffix returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMemberDeclarationSuffixRule()); } 
	 iv_ruleMemberDeclarationSuffix=ruleMemberDeclarationSuffix 
	 { $current=$iv_ruleMemberDeclarationSuffix.current.getText(); }  
	 EOF 
;

// Rule MemberDeclarationSuffix
ruleMemberDeclarationSuffix returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMemberDeclarationSuffixAccess().getMemberDeclaratorListParserRuleCall()); 
    }
    this_MemberDeclaratorList_0=ruleMemberDeclaratorList    {
		$current.merge(this_MemberDeclaratorList_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
    ;





// Entry rule entryRuleMemberDeclaratorList
entryRuleMemberDeclaratorList returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMemberDeclaratorListRule()); } 
	 iv_ruleMemberDeclaratorList=ruleMemberDeclaratorList 
	 { $current=$iv_ruleMemberDeclaratorList.current.getText(); }  
	 EOF 
;

// Rule MemberDeclaratorList
ruleMemberDeclaratorList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMemberDeclaratorListAccess().getMemberDeclaratorParserRuleCall_0()); 
    }
    this_MemberDeclarator_0=ruleMemberDeclarator    {
		$current.merge(this_MemberDeclarator_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getMemberDeclaratorListAccess().getCommaKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getMemberDeclaratorListAccess().getMemberDeclaratorParserRuleCall_1_1()); 
    }
    this_MemberDeclarator_2=ruleMemberDeclarator    {
		$current.merge(this_MemberDeclarator_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleMemberDeclarator
entryRuleMemberDeclarator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getMemberDeclaratorRule()); } 
	 iv_ruleMemberDeclarator=ruleMemberDeclarator 
	 { $current=$iv_ruleMemberDeclarator.current.getText(); }  
	 EOF 
;

// Rule MemberDeclarator
ruleMemberDeclarator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMemberDeclaratorAccess().getDeclaratorIdParserRuleCall_0()); 
    }
    this_DeclaratorId_0=ruleDeclaratorId    {
		$current.merge(this_DeclaratorId_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getMemberDeclaratorAccess().getVirtualSpecifierParserRuleCall_1()); 
    }
    this_VirtualSpecifier_1=ruleVirtualSpecifier    {
		$current.merge(this_VirtualSpecifier_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*((
    { 
        newCompositeNode(grammarAccess.getMemberDeclaratorAccess().getPureSpecifierParserRuleCall_2_0()); 
    }
    this_PureSpecifier_2=rulePureSpecifier    {
		$current.merge(this_PureSpecifier_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
    |
    { 
        newCompositeNode(grammarAccess.getMemberDeclaratorAccess().getBraceOrEqualInitializerParserRuleCall_2_1()); 
    }
    this_BraceOrEqualInitializer_3=ruleBraceOrEqualInitializer    {
		$current.merge(this_BraceOrEqualInitializer_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))
    ;





// Entry rule entryRuleVirtualSpecifier
entryRuleVirtualSpecifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVirtualSpecifierRule()); } 
	 iv_ruleVirtualSpecifier=ruleVirtualSpecifier 
	 { $current=$iv_ruleVirtualSpecifier.current.getText(); }  
	 EOF 
;

// Rule VirtualSpecifier
ruleVirtualSpecifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='override' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVirtualSpecifierAccess().getOverrideKeyword_0()); 
    }

    |
	kw='final' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVirtualSpecifierAccess().getFinalKeyword_1()); 
    }

    |
	kw='new' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getVirtualSpecifierAccess().getNewKeyword_2()); 
    }
)
    ;





// Entry rule entryRulePureSpecifier
entryRulePureSpecifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPureSpecifierRule()); } 
	 iv_rulePureSpecifier=rulePureSpecifier 
	 { $current=$iv_rulePureSpecifier.current.getText(); }  
	 EOF 
;

// Rule PureSpecifier
rulePureSpecifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPureSpecifierAccess().getEqualsSignKeyword_0()); 
    }

	kw='0' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPureSpecifierAccess().getDigitZeroKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleBaseClause
entryRuleBaseClause returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBaseClauseRule()); } 
	 iv_ruleBaseClause=ruleBaseClause 
	 { $current=$iv_ruleBaseClause.current.getText(); }  
	 EOF 
;

// Rule BaseClause
ruleBaseClause returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBaseClauseAccess().getColonKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getBaseClauseAccess().getBaseSpecifierListParserRuleCall_1()); 
    }
    this_BaseSpecifierList_1=ruleBaseSpecifierList    {
		$current.merge(this_BaseSpecifierList_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleBaseSpecifierList
entryRuleBaseSpecifierList returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBaseSpecifierListRule()); } 
	 iv_ruleBaseSpecifierList=ruleBaseSpecifierList 
	 { $current=$iv_ruleBaseSpecifierList.current.getText(); }  
	 EOF 
;

// Rule BaseSpecifierList
ruleBaseSpecifierList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getBaseSpecifierListAccess().getBaseSpecifierParserRuleCall_0()); 
    }
    this_BaseSpecifier_0=ruleBaseSpecifier    {
		$current.merge(this_BaseSpecifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='...' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBaseSpecifierListAccess().getFullStopFullStopFullStopKeyword_1()); 
    }
)?(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBaseSpecifierListAccess().getCommaKeyword_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getBaseSpecifierListAccess().getBaseSpecifierParserRuleCall_2_1()); 
    }
    this_BaseSpecifier_3=ruleBaseSpecifier    {
		$current.merge(this_BaseSpecifier_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='...' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBaseSpecifierListAccess().getFullStopFullStopFullStopKeyword_2_2()); 
    }
)?)*)
    ;





// Entry rule entryRuleBaseSpecifier
entryRuleBaseSpecifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getBaseSpecifierRule()); } 
	 iv_ruleBaseSpecifier=ruleBaseSpecifier 
	 { $current=$iv_ruleBaseSpecifier.current.getText(); }  
	 EOF 
;

// Rule BaseSpecifier
ruleBaseSpecifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	kw='virtual' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBaseSpecifierAccess().getVirtualKeyword_0_0_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getBaseSpecifierAccess().getAccessSpecifierParserRuleCall_0_0_1()); 
    }
    this_AccessSpecifier_1=ruleAccessSpecifier    {
		$current.merge(this_AccessSpecifier_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    |(
    { 
        newCompositeNode(grammarAccess.getBaseSpecifierAccess().getAccessSpecifierParserRuleCall_0_1_0()); 
    }
    this_AccessSpecifier_2=ruleAccessSpecifier    {
		$current.merge(this_AccessSpecifier_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='virtual' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getBaseSpecifierAccess().getVirtualKeyword_0_1_1()); 
    }
)?))?
    { 
        newCompositeNode(grammarAccess.getBaseSpecifierAccess().getClassOrDeclarationTypeParserRuleCall_1()); 
    }
    this_ClassOrDeclarationType_4=ruleClassOrDeclarationType    {
		$current.merge(this_ClassOrDeclarationType_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleClassOrDeclarationType
entryRuleClassOrDeclarationType returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassOrDeclarationTypeRule()); } 
	 iv_ruleClassOrDeclarationType=ruleClassOrDeclarationType 
	 { $current=$iv_ruleClassOrDeclarationType.current.getText(); }  
	 EOF 
;

// Rule ClassOrDeclarationType
ruleClassOrDeclarationType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	kw='::' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getClassOrDeclarationTypeAccess().getColonColonKeyword_0_0()); 
    }
)?(
    { 
        newCompositeNode(grammarAccess.getClassOrDeclarationTypeAccess().getNestedNameSpecifierParserRuleCall_0_1()); 
    }
    this_NestedNameSpecifier_1=ruleNestedNameSpecifier    {
		$current.merge(this_NestedNameSpecifier_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
    { 
        newCompositeNode(grammarAccess.getClassOrDeclarationTypeAccess().getTypeNameParserRuleCall_0_2()); 
    }
    this_TypeName_2=ruleTypeName    {
		$current.merge(this_TypeName_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getClassOrDeclarationTypeAccess().getDeclarationTypeSpecifierParserRuleCall_1()); 
    }
    this_DeclarationTypeSpecifier_3=ruleDeclarationTypeSpecifier    {
		$current.merge(this_DeclarationTypeSpecifier_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleAccessSpecifier
entryRuleAccessSpecifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAccessSpecifierRule()); } 
	 iv_ruleAccessSpecifier=ruleAccessSpecifier 
	 { $current=$iv_ruleAccessSpecifier.current.getText(); }  
	 EOF 
;

// Rule AccessSpecifier
ruleAccessSpecifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='private' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAccessSpecifierAccess().getPrivateKeyword_0()); 
    }

    |
	kw='protected' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAccessSpecifierAccess().getProtectedKeyword_1()); 
    }

    |
	kw='public' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAccessSpecifierAccess().getPublicKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleOperatorFunctionId
entryRuleOperatorFunctionId returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperatorFunctionIdRule()); } 
	 iv_ruleOperatorFunctionId=ruleOperatorFunctionId 
	 { $current=$iv_ruleOperatorFunctionId.current.getText(); }  
	 EOF 
;

// Rule OperatorFunctionId
ruleOperatorFunctionId returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='operator' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorFunctionIdAccess().getOperatorKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getOperatorFunctionIdAccess().getOverloadableOperatorParserRuleCall_1()); 
    }
    this_OverloadableOperator_1=ruleOverloadableOperator    {
		$current.merge(this_OverloadableOperator_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorFunctionIdAccess().getLessThanSignKeyword_2_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getOperatorFunctionIdAccess().getConstantExpressionParserRuleCall_2_1_0()); 
    }
    this_ConstantExpression_3=ruleConstantExpression    {
		$current.merge(this_ConstantExpression_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getOperatorFunctionIdAccess().getTypeSpecifierParserRuleCall_2_1_1()); 
    }
    this_TypeSpecifier_4=ruleTypeSpecifier    {
		$current.merge(this_TypeSpecifier_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getOperatorFunctionIdAccess().getIdExpressionParserRuleCall_2_1_2()); 
    }
    this_IdExpression_5=ruleIdExpression    {
		$current.merge(this_IdExpression_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorFunctionIdAccess().getGreaterThanSignKeyword_2_2()); 
    }
)?)
    ;





// Entry rule entryRuleOverloadableOperator
entryRuleOverloadableOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOverloadableOperatorRule()); } 
	 iv_ruleOverloadableOperator=ruleOverloadableOperator 
	 { $current=$iv_ruleOverloadableOperator.current.getText(); }  
	 EOF 
;

// Rule OverloadableOperator
ruleOverloadableOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='new' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getNewKeyword_0()); 
    }

    |
	kw='delete' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getDeleteKeyword_1()); 
    }

    |(
	kw='new' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getNewKeyword_2_0()); 
    }

	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getLeftSquareBracketKeyword_2_1()); 
    }

	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getRightSquareBracketKeyword_2_2()); 
    }
)
    |(
	kw='delete' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getDeleteKeyword_3_0()); 
    }

	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getLeftSquareBracketKeyword_3_1()); 
    }

	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getRightSquareBracketKeyword_3_2()); 
    }
)
    |
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getPlusSignKeyword_4()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getHyphenMinusKeyword_5()); 
    }

    |
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getAsteriskKeyword_6()); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getSolidusKeyword_7()); 
    }

    |
	kw='%' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getPercentSignKeyword_8()); 
    }

    |
	kw='^' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getCircumflexAccentKeyword_9()); 
    }

    |
	kw='&' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getAmpersandKeyword_10()); 
    }

    |
	kw='|' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getVerticalLineKeyword_11()); 
    }

    |
	kw='~' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getTildeKeyword_12()); 
    }

    |
	kw='!' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getExclamationMarkKeyword_13()); 
    }

    |
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getEqualsSignKeyword_14()); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getLessThanSignKeyword_15()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getGreaterThanSignKeyword_16()); 
    }

    |
	kw='+=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getPlusSignEqualsSignKeyword_17()); 
    }

    |
	kw='-=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getHyphenMinusEqualsSignKeyword_18()); 
    }

    |
	kw='*=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getAsteriskEqualsSignKeyword_19()); 
    }

    |
	kw='/=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getSolidusEqualsSignKeyword_20()); 
    }

    |
	kw='%=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getPercentSignEqualsSignKeyword_21()); 
    }

    |
	kw='^=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getCircumflexAccentEqualsSignKeyword_22()); 
    }

    |
	kw='&=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getAmpersandEqualsSignKeyword_23()); 
    }

    |
	kw='|=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getVerticalLineEqualsSignKeyword_24()); 
    }

    |
	kw='<<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getLessThanSignLessThanSignKeyword_25()); 
    }

    |
	kw='>>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getGreaterThanSignGreaterThanSignKeyword_26()); 
    }

    |
	kw='>>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getGreaterThanSignGreaterThanSignEqualsSignKeyword_27()); 
    }

    |
	kw='<<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getLessThanSignLessThanSignEqualsSignKeyword_28()); 
    }

    |
	kw='==' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getEqualsSignEqualsSignKeyword_29()); 
    }

    |
	kw='!=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getExclamationMarkEqualsSignKeyword_30()); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getLessThanSignEqualsSignKeyword_31()); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getGreaterThanSignEqualsSignKeyword_32()); 
    }

    |
	kw='&&' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getAmpersandAmpersandKeyword_33()); 
    }

    |
	kw='||' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getVerticalLineVerticalLineKeyword_34()); 
    }

    |
	kw='++' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getPlusSignPlusSignKeyword_35()); 
    }

    |
	kw='--' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getHyphenMinusHyphenMinusKeyword_36()); 
    }

    |
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getCommaKeyword_37()); 
    }

    |
	kw='->*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getHyphenMinusGreaterThanSignAsteriskKeyword_38()); 
    }

    |
	kw='->' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getHyphenMinusGreaterThanSignKeyword_39()); 
    }

    |
	kw='()' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getLeftParenthesisRightParenthesisKeyword_40()); 
    }

    |
	kw='[]' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getLeftSquareBracketRightSquareBracketKeyword_41()); 
    }
)
    ;





// Entry rule entryRuleLiteralOperatorId
entryRuleLiteralOperatorId returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralOperatorIdRule()); } 
	 iv_ruleLiteralOperatorId=ruleLiteralOperatorId 
	 { $current=$iv_ruleLiteralOperatorId.current.getText(); }  
	 EOF 
;

// Rule LiteralOperatorId
ruleLiteralOperatorId returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='operator' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLiteralOperatorIdAccess().getOperatorKeyword_0()); 
    }

	kw='"' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLiteralOperatorIdAccess().getQuotationMarkKeyword_1()); 
    }

	kw='"' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLiteralOperatorIdAccess().getQuotationMarkKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleTemplateDeclaration
entryRuleTemplateDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTemplateDeclarationRule()); } 
	 iv_ruleTemplateDeclaration=ruleTemplateDeclaration 
	 { $current=$iv_ruleTemplateDeclaration.current.getText(); }  
	 EOF 
;

// Rule TemplateDeclaration
ruleTemplateDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='template' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTemplateDeclarationAccess().getTemplateKeyword_0()); 
    }

	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTemplateDeclarationAccess().getLessThanSignKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getTemplateDeclarationAccess().getTemplateParameterListParserRuleCall_2()); 
    }
    this_TemplateParameterList_2=ruleTemplateParameterList    {
		$current.merge(this_TemplateParameterList_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTemplateDeclarationAccess().getGreaterThanSignKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleTemplateParameterList
entryRuleTemplateParameterList returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTemplateParameterListRule()); } 
	 iv_ruleTemplateParameterList=ruleTemplateParameterList 
	 { $current=$iv_ruleTemplateParameterList.current.getText(); }  
	 EOF 
;

// Rule TemplateParameterList
ruleTemplateParameterList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTemplateParameterListAccess().getTemplateParameterParserRuleCall_0()); 
    }
    this_TemplateParameter_0=ruleTemplateParameter    {
		$current.merge(this_TemplateParameter_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTemplateParameterListAccess().getCommaKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getTemplateParameterListAccess().getTemplateParameterParserRuleCall_1_1()); 
    }
    this_TemplateParameter_2=ruleTemplateParameter    {
		$current.merge(this_TemplateParameter_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleTemplateParameter
entryRuleTemplateParameter returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTemplateParameterRule()); } 
	 iv_ruleTemplateParameter=ruleTemplateParameter 
	 { $current=$iv_ruleTemplateParameter.current.getText(); }  
	 EOF 
;

// Rule TemplateParameter
ruleTemplateParameter returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTemplateParameterAccess().getTypeParameterParserRuleCall_0()); 
    }
    this_TypeParameter_0=ruleTypeParameter    {
		$current.merge(this_TypeParameter_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTemplateParameterAccess().getParameterDeclarationParserRuleCall_1()); 
    }
    this_ParameterDeclaration_1=ruleParameterDeclaration    {
		$current.merge(this_ParameterDeclaration_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleTypeParameter
entryRuleTypeParameter returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeParameterRule()); } 
	 iv_ruleTypeParameter=ruleTypeParameter 
	 { $current=$iv_ruleTypeParameter.current.getText(); }  
	 EOF 
;

// Rule TypeParameter
ruleTypeParameter returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='class' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeParameterAccess().getClassKeyword_0_0()); 
    }

    |
	kw='typename' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeParameterAccess().getTypenameKeyword_0_1()); 
    }
)(((
	kw='...' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeParameterAccess().getFullStopFullStopFullStopKeyword_1_0_0()); 
    }
)?(    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    newLeafNode(this_ID_3, grammarAccess.getTypeParameterAccess().getIDTerminalRuleCall_1_0_1()); 
    }
)?)
    |((    this_ID_4=RULE_ID    {
		$current.merge(this_ID_4);
    }

    { 
    newLeafNode(this_ID_4, grammarAccess.getTypeParameterAccess().getIDTerminalRuleCall_1_1_0()); 
    }
)?
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeParameterAccess().getEqualsSignKeyword_1_1_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getTypeParameterAccess().getTypeIdParserRuleCall_1_1_2()); 
    }
    this_TypeId_6=ruleTypeId    {
		$current.merge(this_TypeId_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)))
    ;





// Entry rule entryRuleSimpleTemplateId
entryRuleSimpleTemplateId returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleTemplateIdRule()); } 
	 iv_ruleSimpleTemplateId=ruleSimpleTemplateId 
	 { $current=$iv_ruleSimpleTemplateId.current.getText(); }  
	 EOF 
;

// Rule SimpleTemplateId
ruleSimpleTemplateId returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getSimpleTemplateIdAccess().getIDTerminalRuleCall_0()); 
    }

	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpleTemplateIdAccess().getLessThanSignKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getSimpleTemplateIdAccess().getTemplateArgumentListParserRuleCall_2()); 
    }
    this_TemplateArgumentList_2=ruleTemplateArgumentList    {
		$current.merge(this_TemplateArgumentList_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpleTemplateIdAccess().getGreaterThanSignKeyword_3()); 
    }
)
    ;







// Entry rule entryRuleTemplateArgumentList
entryRuleTemplateArgumentList returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTemplateArgumentListRule()); } 
	 iv_ruleTemplateArgumentList=ruleTemplateArgumentList 
	 { $current=$iv_ruleTemplateArgumentList.current.getText(); }  
	 EOF 
;

// Rule TemplateArgumentList
ruleTemplateArgumentList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTemplateArgumentListAccess().getTemplateArgumentParserRuleCall_0()); 
    }
    this_TemplateArgument_0=ruleTemplateArgument    {
		$current.merge(this_TemplateArgument_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='...' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTemplateArgumentListAccess().getFullStopFullStopFullStopKeyword_1()); 
    }
)?(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTemplateArgumentListAccess().getCommaKeyword_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getTemplateArgumentListAccess().getTemplateArgumentParserRuleCall_2_1()); 
    }
    this_TemplateArgument_3=ruleTemplateArgument    {
		$current.merge(this_TemplateArgument_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='...' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTemplateArgumentListAccess().getFullStopFullStopFullStopKeyword_2_2()); 
    }
)?)*)
    ;





// Entry rule entryRuleTemplateArgument
entryRuleTemplateArgument returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTemplateArgumentRule()); } 
	 iv_ruleTemplateArgument=ruleTemplateArgument 
	 { $current=$iv_ruleTemplateArgument.current.getText(); }  
	 EOF 
;

// Rule TemplateArgument
ruleTemplateArgument returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTemplateArgumentAccess().getConstantExpressionParserRuleCall_0()); 
    }
    this_ConstantExpression_0=ruleConstantExpression    {
		$current.merge(this_ConstantExpression_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTemplateArgumentAccess().getTypeIdParserRuleCall_1()); 
    }
    this_TypeId_1=ruleTypeId    {
		$current.merge(this_TypeId_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTemplateArgumentAccess().getIdExpressionParserRuleCall_2()); 
    }
    this_IdExpression_2=ruleIdExpression    {
		$current.merge(this_IdExpression_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleTypenameSpecifier
entryRuleTypenameSpecifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypenameSpecifierRule()); } 
	 iv_ruleTypenameSpecifier=ruleTypenameSpecifier 
	 { $current=$iv_ruleTypenameSpecifier.current.getText(); }  
	 EOF 
;

// Rule TypenameSpecifier
ruleTypenameSpecifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='typename' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypenameSpecifierAccess().getTypenameKeyword_0()); 
    }
(
	kw='::' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypenameSpecifierAccess().getColonColonKeyword_1()); 
    }
)?
    { 
        newCompositeNode(grammarAccess.getTypenameSpecifierAccess().getNestedNameSpecifierParserRuleCall_2()); 
    }
    this_NestedNameSpecifier_2=ruleNestedNameSpecifier    {
		$current.merge(this_NestedNameSpecifier_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    newLeafNode(this_ID_3, grammarAccess.getTypenameSpecifierAccess().getIDTerminalRuleCall_3_0()); 
    }

    |((
	kw='template' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypenameSpecifierAccess().getTemplateKeyword_3_1_0()); 
    }
)?    this_ID_5=RULE_ID    {
		$current.merge(this_ID_5);
    }

    { 
    newLeafNode(this_ID_5, grammarAccess.getTypenameSpecifierAccess().getIDTerminalRuleCall_3_1_1()); 
    }

	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypenameSpecifierAccess().getLessThanSignKeyword_3_1_2()); 
    }

    { 
        newCompositeNode(grammarAccess.getTypenameSpecifierAccess().getTemplateArgumentListParserRuleCall_3_1_3()); 
    }
    this_TemplateArgumentList_7=ruleTemplateArgumentList    {
		$current.merge(this_TemplateArgumentList_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypenameSpecifierAccess().getGreaterThanSignKeyword_3_1_4()); 
    }
)))
    ;





// Entry rule entryRuleTryBlock
entryRuleTryBlock returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTryBlockRule()); } 
	 iv_ruleTryBlock=ruleTryBlock 
	 { $current=$iv_ruleTryBlock.current.getText(); }  
	 EOF 
;

// Rule TryBlock
ruleTryBlock returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='try' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTryBlockAccess().getTryKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getTryBlockAccess().getCompoundStatementParserRuleCall_1()); 
    }
    this_CompoundStatement_1=ruleCompoundStatement    {
		$current.merge(this_CompoundStatement_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getTryBlockAccess().getHandlerParserRuleCall_2()); 
    }
    this_Handler_2=ruleHandler    {
		$current.merge(this_Handler_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+)
    ;





// Entry rule entryRuleFunctionTryBlock
entryRuleFunctionTryBlock returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionTryBlockRule()); } 
	 iv_ruleFunctionTryBlock=ruleFunctionTryBlock 
	 { $current=$iv_ruleFunctionTryBlock.current.getText(); }  
	 EOF 
;

// Rule FunctionTryBlock
ruleFunctionTryBlock returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='try' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFunctionTryBlockAccess().getTryKeyword_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getFunctionTryBlockAccess().getCtorInitializerParserRuleCall_1()); 
    }
    this_CtorInitializer_1=ruleCtorInitializer    {
		$current.merge(this_CtorInitializer_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
    { 
        newCompositeNode(grammarAccess.getFunctionTryBlockAccess().getCompoundStatementParserRuleCall_2()); 
    }
    this_CompoundStatement_2=ruleCompoundStatement    {
		$current.merge(this_CompoundStatement_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getFunctionTryBlockAccess().getHandlerParserRuleCall_3()); 
    }
    this_Handler_3=ruleHandler    {
		$current.merge(this_Handler_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+)
    ;





// Entry rule entryRuleHandler
entryRuleHandler returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getHandlerRule()); } 
	 iv_ruleHandler=ruleHandler 
	 { $current=$iv_ruleHandler.current.getText(); }  
	 EOF 
;

// Rule Handler
ruleHandler returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='catch' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getHandlerAccess().getCatchKeyword_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getHandlerAccess().getLeftParenthesisKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getHandlerAccess().getExceptionDeclarationParserRuleCall_2()); 
    }
    this_ExceptionDeclaration_2=ruleExceptionDeclaration    {
		$current.merge(this_ExceptionDeclaration_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getHandlerAccess().getRightParenthesisKeyword_3()); 
    }

    { 
        newCompositeNode(grammarAccess.getHandlerAccess().getCompoundStatementParserRuleCall_4()); 
    }
    this_CompoundStatement_4=ruleCompoundStatement    {
		$current.merge(this_CompoundStatement_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleExceptionDeclaration
entryRuleExceptionDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExceptionDeclarationRule()); } 
	 iv_ruleExceptionDeclaration=ruleExceptionDeclaration 
	 { $current=$iv_ruleExceptionDeclaration.current.getText(); }  
	 EOF 
;

// Rule ExceptionDeclaration
ruleExceptionDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    { 
        newCompositeNode(grammarAccess.getExceptionDeclarationAccess().getTypeSpecifierParserRuleCall_0_0()); 
    }
    this_TypeSpecifier_0=ruleTypeSpecifier    {
		$current.merge(this_TypeSpecifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+(
    { 
        newCompositeNode(grammarAccess.getExceptionDeclarationAccess().getDeclaratorIdParserRuleCall_0_1()); 
    }
    this_DeclaratorId_1=ruleDeclaratorId    {
		$current.merge(this_DeclaratorId_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    |
	kw='...' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExceptionDeclarationAccess().getFullStopFullStopFullStopKeyword_1()); 
    }
)
    ;







// Entry rule entryRuleExceptionSpecification
entryRuleExceptionSpecification returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExceptionSpecificationRule()); } 
	 iv_ruleExceptionSpecification=ruleExceptionSpecification 
	 { $current=$iv_ruleExceptionSpecification.current.getText(); }  
	 EOF 
;

// Rule ExceptionSpecification
ruleExceptionSpecification returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExceptionSpecificationAccess().getDynamicExceptionSpecificationParserRuleCall_0()); 
    }
    this_DynamicExceptionSpecification_0=ruleDynamicExceptionSpecification    {
		$current.merge(this_DynamicExceptionSpecification_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExceptionSpecificationAccess().getNoexceptSpecificationParserRuleCall_1()); 
    }
    this_NoexceptSpecification_1=ruleNoexceptSpecification    {
		$current.merge(this_NoexceptSpecification_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleDynamicExceptionSpecification
entryRuleDynamicExceptionSpecification returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDynamicExceptionSpecificationRule()); } 
	 iv_ruleDynamicExceptionSpecification=ruleDynamicExceptionSpecification 
	 { $current=$iv_ruleDynamicExceptionSpecification.current.getText(); }  
	 EOF 
;

// Rule DynamicExceptionSpecification
ruleDynamicExceptionSpecification returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='throw' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDynamicExceptionSpecificationAccess().getThrowKeyword_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDynamicExceptionSpecificationAccess().getLeftParenthesisKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getDynamicExceptionSpecificationAccess().getTypeIdListParserRuleCall_2()); 
    }
    this_TypeIdList_2=ruleTypeIdList    {
		$current.merge(this_TypeIdList_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDynamicExceptionSpecificationAccess().getRightParenthesisKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleNoexceptSpecification
entryRuleNoexceptSpecification returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNoexceptSpecificationRule()); } 
	 iv_ruleNoexceptSpecification=ruleNoexceptSpecification 
	 { $current=$iv_ruleNoexceptSpecification.current.getText(); }  
	 EOF 
;

// Rule NoexceptSpecification
ruleNoexceptSpecification returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='noexcept' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNoexceptSpecificationAccess().getNoexceptKeyword_0()); 
    }
(
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNoexceptSpecificationAccess().getLeftParenthesisKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getNoexceptSpecificationAccess().getConstantExpressionParserRuleCall_1_1()); 
    }
    this_ConstantExpression_2=ruleConstantExpression    {
		$current.merge(this_ConstantExpression_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNoexceptSpecificationAccess().getRightParenthesisKeyword_1_2()); 
    }
)?)
    ;





// Entry rule entryRuleExpression
entryRuleExpression returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); } 
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current.getText(); }  
	 EOF 
;

// Rule Expression
ruleExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='Expression' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpressionAccess().getExpressionKeyword()); 
    }

    ;





// Entry rule entryRuleExpressionList
entryRuleExpressionList returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionListRule()); } 
	 iv_ruleExpressionList=ruleExpressionList 
	 { $current=$iv_ruleExpressionList.current.getText(); }  
	 EOF 
;

// Rule ExpressionList
ruleExpressionList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionListAccess().getExpressionParserRuleCall_0()); 
    }
    this_Expression_0=ruleExpression    {
		$current.merge(this_Expression_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExpressionListAccess().getCommaKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getExpressionListAccess().getExpressionParserRuleCall_1_1()); 
    }
    this_Expression_2=ruleExpression    {
		$current.merge(this_Expression_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleExplicitSpecialization
entryRuleExplicitSpecialization returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExplicitSpecializationRule()); } 
	 iv_ruleExplicitSpecialization=ruleExplicitSpecialization 
	 { $current=$iv_ruleExplicitSpecialization.current.getText(); }  
	 EOF 
;

// Rule ExplicitSpecialization
ruleExplicitSpecialization returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='ExplicitSpecialization' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExplicitSpecializationAccess().getExplicitSpecializationKeyword()); 
    }

    ;





// Entry rule entryRuleExplicitInstantiation
entryRuleExplicitInstantiation returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExplicitInstantiationRule()); } 
	 iv_ruleExplicitInstantiation=ruleExplicitInstantiation 
	 { $current=$iv_ruleExplicitInstantiation.current.getText(); }  
	 EOF 
;

// Rule ExplicitInstantiation
ruleExplicitInstantiation returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='ExplicitInstantiation' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExplicitInstantiationAccess().getExplicitInstantiationKeyword()); 
    }

    ;





// Entry rule entryRuleCvQualifier
entryRuleCvQualifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCvQualifierRule()); } 
	 iv_ruleCvQualifier=ruleCvQualifier 
	 { $current=$iv_ruleCvQualifier.current.getText(); }  
	 EOF 
;

// Rule CvQualifier
ruleCvQualifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='CvQualifier' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCvQualifierAccess().getCvQualifierKeyword()); 
    }

    ;





// Entry rule entryRuleConstantExpression
entryRuleConstantExpression returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantExpressionRule()); } 
	 iv_ruleConstantExpression=ruleConstantExpression 
	 { $current=$iv_ruleConstantExpression.current.getText(); }  
	 EOF 
;

// Rule ConstantExpression
ruleConstantExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='ConstantExpression' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstantExpressionAccess().getConstantExpressionKeyword()); 
    }

    ;





// Entry rule entryRuleIdExpression
entryRuleIdExpression returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdExpressionRule()); } 
	 iv_ruleIdExpression=ruleIdExpression 
	 { $current=$iv_ruleIdExpression.current.getText(); }  
	 EOF 
;

// Rule IdExpression
ruleIdExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='IdExpression' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIdExpressionAccess().getIdExpressionKeyword()); 
    }

    ;





// Entry rule entryRuleNestedNameSpecifier
entryRuleNestedNameSpecifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNestedNameSpecifierRule()); } 
	 iv_ruleNestedNameSpecifier=ruleNestedNameSpecifier 
	 { $current=$iv_ruleNestedNameSpecifier.current.getText(); }  
	 EOF 
;

// Rule NestedNameSpecifier
ruleNestedNameSpecifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='NestedNameSpecifier' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNestedNameSpecifierAccess().getNestedNameSpecifierKeyword()); 
    }

    ;





// Entry rule entryRuleAssignmentExpression
entryRuleAssignmentExpression returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentExpressionRule()); } 
	 iv_ruleAssignmentExpression=ruleAssignmentExpression 
	 { $current=$iv_ruleAssignmentExpression.current.getText(); }  
	 EOF 
;

// Rule AssignmentExpression
ruleAssignmentExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='AssignmentExpression' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionKeyword()); 
    }

    ;





// Entry rule entryRuleCtorInitializer
entryRuleCtorInitializer returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCtorInitializerRule()); } 
	 iv_ruleCtorInitializer=ruleCtorInitializer 
	 { $current=$iv_ruleCtorInitializer.current.getText(); }  
	 EOF 
;

// Rule CtorInitializer
ruleCtorInitializer returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='CtorInitializer' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCtorInitializerAccess().getCtorInitializerKeyword()); 
    }

    ;





// Entry rule entryRuleTypeIdList
entryRuleTypeIdList returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeIdListRule()); } 
	 iv_ruleTypeIdList=ruleTypeIdList 
	 { $current=$iv_ruleTypeIdList.current.getText(); }  
	 EOF 
;

// Rule TypeIdList
ruleTypeIdList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='TypeIdList' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeIdListAccess().getTypeIdListKeyword()); 
    }

    ;





// Entry rule entryRuleUnqualifiedId
entryRuleUnqualifiedId returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getUnqualifiedIdRule()); } 
	 iv_ruleUnqualifiedId=ruleUnqualifiedId 
	 { $current=$iv_ruleUnqualifiedId.current.getText(); }  
	 EOF 
;

// Rule UnqualifiedId
ruleUnqualifiedId returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='UnqualifiedId' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getUnqualifiedIdAccess().getUnqualifiedIdKeyword()); 
    }

    ;





RULE_HEADER_NAME : ('<' (RULE_ID|'.') '>'|'"' (RULE_ID|'.') '"');

fragment RULE_HEX_QUAD : RULE_HEXADECIMAL_DIGIT RULE_HEXADECIMAL_DIGIT RULE_HEXADECIMAL_DIGIT RULE_HEXADECIMAL_DIGIT;

fragment RULE_UNIVERSAL_CHARACTER_NAME : ('\\u' RULE_HEX_QUAD|'\\U' RULE_HEX_QUAD RULE_HEX_QUAD);

RULE_KEYWORD : ('alignas'|'alignof'|'asm'|'auto'|'bool'|'break'|'case'|'catch'|'char16_t'|'char32_t'|'class'|'const'|'constexpr'|'const_cast'|'continue'|'decltype'|'default'|'delete'|'do'|'double'|'dynamic_cast'|'else'|'enum'|'explicit'|'export'|'false'|'float'|'for'|'friend'|'goto'|'if'|'inline'|'int'|'long'|'mutable'|'namespace'|'new'|'noexcept'|'nullptr'|'operator'|'private'|'protected'|'public'|'register'|'reinterpret_cast'|'return'|'short'|'signed'|'sizeof'|'static'|'static_assert'|'static_cast'|'struct'|'switch'|'template'|'this'|'thread_local'|'throw'|'true'|'try'|'typedef'|'typeid'|'typename'|'union'|'unsigned'|'using'|'virtual'|'volatile'|'wchar_t'|'while');

RULE_PREPROCESSING_OP_OR_PUNC : ('{'|'}'|'['|']'|'#'|'##'|'('|')'|'<:'|':>'|'<%'|'%>'|'%:'|'%:%:'|';'|':'|'...'|'new'|'delete'|'?'|'::'|'.'|'.*'|'+'|'-'|'*'|'/'|'%'|'^'|'&'|'|'|'~'|'!'|'='|'<'|'>'|'+='|'-='|'*='|'/='|'%='|'^='|'&='|'|='|'<<'|'>>'|'<<='|'>>='|'=='|'!='|'<='|'>='|'&&'|'||'|'++'|'--'|','|'->*'|'->'|'and'|'and_eq'|'bitand'|'bitor'|'compl'|'not'|'not_eq'|'or'|'or_eq'|'xor'|'xor_eq');

RULE_ID : (RULE_NONDIGIT|RULE_UNIVERSAL_CHARACTER_NAME) ('0'..'9'|RULE_NONDIGIT|RULE_UNIVERSAL_CHARACTER_NAME)*;

fragment RULE_NONDIGIT : ('a'..'z'|'A'..'Z'|'_');

fragment RULE_DECIMAL_LITERAL : '1'..'9' ('0'..'9')*;

fragment RULE_OCTAL_LITERAL : '0' RULE_OCTAL_DIGIT*;

fragment RULE_HEXADECIMAL_LITERAL : ('0x'|'0X') RULE_HEXADECIMAL_DIGIT+;

fragment RULE_OCTAL_DIGIT : '0'..'7';

fragment RULE_HEXADECIMAL_DIGIT : ('0'..'9'|'A'..'F');

fragment RULE_INTEGER_SUFFIX : (('u'|'U') ('l'|'L'|'ll'|'LL')?|('l'|'L'|'ll'|'LL') ('u'|'U')?);

RULE_CHARACTER_LITERAL : ('u'|'U'|'L')? '\'' RULE_C_CHAR+ '\'';

fragment RULE_C_CHAR : (~(('\''|'\\'|'\n'))|RULE_ESCAPE_SEQUENCE|RULE_UNIVERSAL_CHARACTER_NAME);

fragment RULE_ESCAPE_SEQUENCE : (RULE_SIMPLE_ESCAPE_SEQUENCE|RULE_OCTAL_ESCAPE_SEQUENCE|RULE_HEXADECIMAL_ESCAPE_SEQUENCE);

fragment RULE_SIMPLE_ESCAPE_SEQUENCE : '\\' ('\''|'"'|'?'|'\\'|'a'|'b'|'f'|'n'|'r'|'t'|'v');

fragment RULE_OCTAL_ESCAPE_SEQUENCE : '\\' RULE_OCTAL_DIGIT RULE_OCTAL_DIGIT RULE_OCTAL_DIGIT;

fragment RULE_HEXADECIMAL_ESCAPE_SEQUENCE : '\\x' RULE_HEXADECIMAL_DIGIT+;

RULE_FLOATING_LITERAL : (RULE_FRACTIONAL_CONSTANT RULE_EXPONENT_PART?|('0'..'9')+ RULE_EXPONENT_PART) ('f'|'l'|'F'|'L')?;

fragment RULE_FRACTIONAL_CONSTANT : (('0'..'9')* '.' ('0'..'9')+|('0'..'9')+ '.');

fragment RULE_EXPONENT_PART : ('e'|'E') ('+'|'-')? ('0'..'9')+;

RULE_STRING_LITERAL : RULE_ENC_PREFIX? '"' RULE_SCHAR+ '"';

fragment RULE_ENC_PREFIX : ('u8'|'u'|'U'|'L');

fragment RULE_SCHAR : (~(('"'|'\\'|'\n'))|RULE_ESCAPE_SEQUENCE|RULE_UNIVERSAL_CHARACTER_NAME);

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


