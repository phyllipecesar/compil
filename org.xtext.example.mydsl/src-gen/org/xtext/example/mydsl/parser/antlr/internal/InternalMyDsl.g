/*
* generated by Xtext
*/
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 
 	private MyDslGrammarAccess grammarAccess;
 	
    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getModelAccess().getBodyParserRuleCall()); 
    }
    this_Body_0=ruleBody
    { 
        $current = $this_Body_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleBody
entryRuleBody returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBodyRule()); }
	 iv_ruleBody=ruleBody 
	 { $current=$iv_ruleBody.current; } 
	 EOF 
;

// Rule Body
ruleBody returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getBodyAccess().getBodyAction_0(),
            $current);
    }
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBodyAccess().getPreprocessing_fileParserRuleCall_1()); 
    }
rulepreprocessing_file
    { 
        afterParserOrEnumRuleCall();
    }
(this_WS_2=RULE_WS
    { 
    newLeafNode(this_WS_2, grammarAccess.getBodyAccess().getWSTerminalRuleCall_2()); 
    }
)*(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBodyAccess().getNew_lineParserRuleCall_3()); 
    }
rulenew_line
    { 
        afterParserOrEnumRuleCall();
    }
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getBodyAccess().getFuncoesFunctionDeclarationParserRuleCall_4_0()); 
	    }
		lv_funcoes_4_0=ruleFunctionDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBodyRule());
	        }
       		add(
       			$current, 
       			"funcoes",
        		lv_funcoes_4_0, 
        		"FunctionDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleFunctionDeclaration
entryRuleFunctionDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionDeclarationRule()); }
	 iv_ruleFunctionDeclaration=ruleFunctionDeclaration 
	 { $current=$iv_ruleFunctionDeclaration.current; } 
	 EOF 
;

// Rule FunctionDeclaration
ruleFunctionDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getFunctionDeclarationAccess().getFunctionDeclarationAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getTypeTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getFunctionDeclarationAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionDeclarationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFunctionDeclarationAccess().getLeftParenthesisKeyword_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getParamsParameterParserRuleCall_4_0_0()); 
	    }
		lv_params_4_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_4_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFunctionDeclarationAccess().getCommaKeyword_4_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getParamsParameterParserRuleCall_4_1_1_0()); 
	    }
		lv_params_6_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_6_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFunctionDeclarationAccess().getRightParenthesisKeyword_5());
    }
	otherlv_8='{' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getFunctionDeclarationAccess().getLeftCurlyBracketKeyword_6());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getNew_lineParserRuleCall_7()); 
    }
rulenew_line
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFunctionDeclarationAccess().getEscopoStatementParserRuleCall_8_0()); 
	    }
		lv_escopo_10_0=rulestatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFunctionDeclarationRule());
	        }
       		set(
       			$current, 
       			"escopo",
        		lv_escopo_10_0, 
        		"statement");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11='}' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getFunctionDeclarationAccess().getRightCurlyBracketKeyword_9());
    }
)
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getParameterAccess().getParameterAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterAccess().getTypeTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleVarDecl
entryRuleVarDecl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVarDeclRule()); }
	 iv_ruleVarDecl=ruleVarDecl 
	 { $current=$iv_ruleVarDecl.current; } 
	 EOF 
;

// Rule VarDecl
ruleVarDecl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getVarDeclAccess().getVarDeclAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getVarDeclAccess().getTypeTypeParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleType		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getVarDeclRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"Type");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getVarDeclAccess().getNameIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVarDeclRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleType
entryRuleType returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	 iv_ruleType=ruleType 
	 { $current=$iv_ruleType.current; } 
	 EOF 
;

// Rule Type
ruleType returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTypeAccess().getSimple_type_specifierParserRuleCall()); 
    }
    this_simple_type_specifier_0=rulesimple_type_specifier
    { 
        $current = $this_simple_type_specifier_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRulesimple_type_specifier
entryRulesimple_type_specifier returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimple_type_specifierRule()); }
	 iv_rulesimple_type_specifier=rulesimple_type_specifier 
	 { $current=$iv_rulesimple_type_specifier.current; } 
	 EOF 
;

// Rule simple_type_specifier
rulesimple_type_specifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSimple_type_specifierAccess().getIntTypeAction_0_0(),
            $current);
    }
)	otherlv_1='int' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSimple_type_specifierAccess().getIntKeyword_0_1());
    }
)
    |((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getSimple_type_specifierAccess().getBoolTypeAction_1_0(),
            $current);
    }
)	otherlv_3='bool' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSimple_type_specifierAccess().getBoolKeyword_1_1());
    }
))
;





// Entry rule entryRulenew_line
entryRulenew_line returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNew_lineRule()); } 
	 iv_rulenew_line=rulenew_line 
	 { $current=$iv_rulenew_line.current.getText(); }  
	 EOF 
;

// Rule new_line
rulenew_line returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='\n' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNew_lineAccess().getControl000aKeyword_0()); 
    }

    |
	kw='\r\n' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNew_lineAccess().getControl000dControl000aKeyword_1()); 
    }
)
    ;





// Entry rule entryRulepreprocessing_file
entryRulepreprocessing_file returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPreprocessing_fileRule()); } 
	 iv_rulepreprocessing_file=rulepreprocessing_file 
	 { $current=$iv_rulepreprocessing_file.current.getText(); }  
	 EOF 
;

// Rule preprocessing_file
rulepreprocessing_file returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPreprocessing_fileAccess().getGroupParserRuleCall()); 
    }
    this_group_0=rulegroup    {
		$current.merge(this_group_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
    ;





// Entry rule entryRulegroup
entryRulegroup returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getGroupRule()); } 
	 iv_rulegroup=rulegroup 
	 { $current=$iv_rulegroup.current.getText(); }  
	 EOF 
;

// Rule group
rulegroup returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGroupAccess().getGroup_partParserRuleCall()); 
    }
    this_group_part_0=rulegroup_part    {
		$current.merge(this_group_part_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+
    ;





// Entry rule entryRulegroup_part
entryRulegroup_part returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getGroup_partRule()); } 
	 iv_rulegroup_part=rulegroup_part 
	 { $current=$iv_rulegroup_part.current.getText(); }  
	 EOF 
;

// Rule group_part
rulegroup_part returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getGroup_partAccess().getIf_actionParserRuleCall_0()); 
    }
    this_if_action_0=ruleif_action    {
		$current.merge(this_if_action_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getGroup_partAccess().getControl_lineParserRuleCall_1()); 
    }
    this_control_line_1=rulecontrol_line    {
		$current.merge(this_control_line_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleif_action
entryRuleif_action returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIf_actionRule()); } 
	 iv_ruleif_action=ruleif_action 
	 { $current=$iv_ruleif_action.current.getText(); }  
	 EOF 
;

// Rule if_action
ruleif_action returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getIf_actionAccess().getIf_groupParserRuleCall_0()); 
    }
    this_if_group_0=ruleif_group    {
		$current.merge(this_if_group_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getIf_actionAccess().getElif_groupsParserRuleCall_1()); 
    }
    this_elif_groups_1=ruleelif_groups    {
		$current.merge(this_elif_groups_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?(
    { 
        newCompositeNode(grammarAccess.getIf_actionAccess().getElse_groupParserRuleCall_2()); 
    }
    this_else_group_2=ruleelse_group    {
		$current.merge(this_else_group_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
    { 
        newCompositeNode(grammarAccess.getIf_actionAccess().getEndif_lineParserRuleCall_3()); 
    }
    this_endif_line_3=ruleendif_line    {
		$current.merge(this_endif_line_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleif_group
entryRuleif_group returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIf_groupRule()); } 
	 iv_ruleif_group=ruleif_group 
	 { $current=$iv_ruleif_group.current.getText(); }  
	 EOF 
;

// Rule if_group
ruleif_group returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='#if' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIf_groupAccess().getIfKeyword_0_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getIf_groupAccess().getConstant_expressionParserRuleCall_0_1()); 
    }
    this_constant_expression_1=ruleconstant_expression    {
		$current.merge(this_constant_expression_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getIf_groupAccess().getNew_lineParserRuleCall_0_2()); 
    }
    this_new_line_2=rulenew_line    {
		$current.merge(this_new_line_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getIf_groupAccess().getGroupParserRuleCall_0_3()); 
    }
    this_group_3=rulegroup    {
		$current.merge(this_group_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    |(
	kw='#ifdef' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIf_groupAccess().getIfdefKeyword_1_0()); 
    }
    this_ID_5=RULE_ID    {
		$current.merge(this_ID_5);
    }

    { 
    newLeafNode(this_ID_5, grammarAccess.getIf_groupAccess().getIDTerminalRuleCall_1_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getIf_groupAccess().getNew_lineParserRuleCall_1_2()); 
    }
    this_new_line_6=rulenew_line    {
		$current.merge(this_new_line_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getIf_groupAccess().getGroupParserRuleCall_1_3()); 
    }
    this_group_7=rulegroup    {
		$current.merge(this_group_7);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    |(
	kw='#ifndef' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIf_groupAccess().getIfndefKeyword_2_0()); 
    }
    this_ID_9=RULE_ID    {
		$current.merge(this_ID_9);
    }

    { 
    newLeafNode(this_ID_9, grammarAccess.getIf_groupAccess().getIDTerminalRuleCall_2_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getIf_groupAccess().getNew_lineParserRuleCall_2_2()); 
    }
    this_new_line_10=rulenew_line    {
		$current.merge(this_new_line_10);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getIf_groupAccess().getGroupParserRuleCall_2_3()); 
    }
    this_group_11=rulegroup    {
		$current.merge(this_group_11);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?))
    ;





// Entry rule entryRuleelif_groups
entryRuleelif_groups returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getElif_groupsRule()); } 
	 iv_ruleelif_groups=ruleelif_groups 
	 { $current=$iv_ruleelif_groups.current.getText(); }  
	 EOF 
;

// Rule elif_groups
ruleelif_groups returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getElif_groupsAccess().getElif_groupParserRuleCall()); 
    }
    this_elif_group_0=ruleelif_group    {
		$current.merge(this_elif_group_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+
    ;





// Entry rule entryRuleelif_group
entryRuleelif_group returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getElif_groupRule()); } 
	 iv_ruleelif_group=ruleelif_group 
	 { $current=$iv_ruleelif_group.current.getText(); }  
	 EOF 
;

// Rule elif_group
ruleelif_group returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='#elif' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getElif_groupAccess().getElifKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getElif_groupAccess().getConstant_expressionParserRuleCall_1()); 
    }
    this_constant_expression_1=ruleconstant_expression    {
		$current.merge(this_constant_expression_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getElif_groupAccess().getNew_lineParserRuleCall_2()); 
    }
    this_new_line_2=rulenew_line    {
		$current.merge(this_new_line_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getElif_groupAccess().getGroupParserRuleCall_3()); 
    }
    this_group_3=rulegroup    {
		$current.merge(this_group_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;





// Entry rule entryRulestatement
entryRulestatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_rulestatement=rulestatement 
	 { $current=$iv_rulestatement.current; } 
	 EOF 
;

// Rule statement
rulestatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getStatementAccess().getStatementAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getVariavelDeclaration_statementParserRuleCall_1_0()); 
	    }
		lv_variavel_1_0=ruledeclaration_statement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"variavel",
        		lv_variavel_1_0, 
        		"declaration_statement");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulesimple_declaration
entryRulesimple_declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimple_declarationRule()); }
	 iv_rulesimple_declaration=rulesimple_declaration 
	 { $current=$iv_rulesimple_declaration.current; } 
	 EOF 
;

// Rule simple_declaration
rulesimple_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSimple_declarationAccess().getVariavelVarDeclParserRuleCall_0_0()); 
	    }
		lv_variavel_0_0=ruleVarDecl		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimple_declarationRule());
	        }
       		set(
       			$current, 
       			"variavel",
        		lv_variavel_0_0, 
        		"VarDecl");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1=';' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSimple_declarationAccess().getSemicolonKeyword_1());
    }

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getSimple_declarationAccess().getNew_lineParserRuleCall_2()); 
    }
rulenew_line
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuledeclaration_statement
entryRuledeclaration_statement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclaration_statementRule()); }
	 iv_ruledeclaration_statement=ruledeclaration_statement 
	 { $current=$iv_ruledeclaration_statement.current; } 
	 EOF 
;

// Rule declaration_statement
ruledeclaration_statement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getDeclaration_statementAccess().getVariaveisBlock_declarationParserRuleCall_0()); 
	    }
		lv_variaveis_0_0=ruleblock_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDeclaration_statementRule());
	        }
       		add(
       			$current, 
       			"variaveis",
        		lv_variaveis_0_0, 
        		"block_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
)+
;





// Entry rule entryRuleblock_declaration
entryRuleblock_declaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBlock_declarationRule()); }
	 iv_ruleblock_declaration=ruleblock_declaration 
	 { $current=$iv_ruleblock_declaration.current; } 
	 EOF 
;

// Rule block_declaration
ruleblock_declaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getBlock_declarationAccess().getBlock_declarationAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBlock_declarationAccess().getVariavelSimple_declarationParserRuleCall_1_0()); 
	    }
		lv_variavel_1_0=rulesimple_declaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBlock_declarationRule());
	        }
       		set(
       			$current, 
       			"variavel",
        		lv_variavel_1_0, 
        		"simple_declaration");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleconstant_expression
entryRuleconstant_expression returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstant_expressionRule()); } 
	 iv_ruleconstant_expression=ruleconstant_expression 
	 { $current=$iv_ruleconstant_expression.current.getText(); }  
	 EOF 
;

// Rule constant_expression
ruleconstant_expression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getConstant_expressionAccess().getConditional_expressionParserRuleCall()); 
    }
    this_conditional_expression_0=ruleconditional_expression    {
		$current.merge(this_conditional_expression_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    ;





// Entry rule entryRuleconditional_expression
entryRuleconditional_expression returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditional_expressionRule()); } 
	 iv_ruleconditional_expression=ruleconditional_expression 
	 { $current=$iv_ruleconditional_expression.current.getText(); }  
	 EOF 
;

// Rule conditional_expression
ruleconditional_expression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='TODO' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConditional_expressionAccess().getTODOKeyword()); 
    }

    ;





// Entry rule entryRulepreprocessing_token
entryRulepreprocessing_token returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPreprocessing_tokenRule()); } 
	 iv_rulepreprocessing_token=rulepreprocessing_token 
	 { $current=$iv_rulepreprocessing_token.current.getText(); }  
	 EOF 
;

// Rule preprocessing_token
rulepreprocessing_token returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getPreprocessing_tokenAccess().getIDTerminalRuleCall_0()); 
    }

    |    this_HEADERNAME_1=RULE_HEADERNAME    {
		$current.merge(this_HEADERNAME_1);
    }

    { 
    newLeafNode(this_HEADERNAME_1, grammarAccess.getPreprocessing_tokenAccess().getHEADERNAMETerminalRuleCall_1()); 
    }

    |    this_PREPROCESSING_OP_OR_PUNC_2=RULE_PREPROCESSING_OP_OR_PUNC    {
		$current.merge(this_PREPROCESSING_OP_OR_PUNC_2);
    }

    { 
    newLeafNode(this_PREPROCESSING_OP_OR_PUNC_2, grammarAccess.getPreprocessing_tokenAccess().getPREPROCESSING_OP_OR_PUNCTerminalRuleCall_2()); 
    }
)
    ;





// Entry rule entryRuleelse_group
entryRuleelse_group returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getElse_groupRule()); } 
	 iv_ruleelse_group=ruleelse_group 
	 { $current=$iv_ruleelse_group.current.getText(); }  
	 EOF 
;

// Rule else_group
ruleelse_group returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='#else' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getElse_groupAccess().getElseKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getElse_groupAccess().getNew_lineParserRuleCall_1()); 
    }
    this_new_line_1=rulenew_line    {
		$current.merge(this_new_line_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
    { 
        newCompositeNode(grammarAccess.getElse_groupAccess().getGroupParserRuleCall_2()); 
    }
    this_group_2=rulegroup    {
		$current.merge(this_group_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?)
    ;





// Entry rule entryRuleendif_line
entryRuleendif_line returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEndif_lineRule()); } 
	 iv_ruleendif_line=ruleendif_line 
	 { $current=$iv_ruleendif_line.current.getText(); }  
	 EOF 
;

// Rule endif_line
ruleendif_line returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='#endif' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEndif_lineAccess().getEndifKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getEndif_lineAccess().getNew_lineParserRuleCall_1()); 
    }
    this_new_line_1=rulenew_line    {
		$current.merge(this_new_line_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRulecontrol_line
entryRulecontrol_line returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getControl_lineRule()); } 
	 iv_rulecontrol_line=rulecontrol_line 
	 { $current=$iv_rulecontrol_line.current.getText(); }  
	 EOF 
;

// Rule control_line
rulecontrol_line returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='#include' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getControl_lineAccess().getIncludeKeyword_0_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getControl_lineAccess().getPp_tokensParserRuleCall_0_1()); 
    }
    this_pp_tokens_1=rulepp_tokens    {
		$current.merge(this_pp_tokens_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getControl_lineAccess().getNew_lineParserRuleCall_0_2()); 
    }
    this_new_line_2=rulenew_line    {
		$current.merge(this_new_line_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='#define' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getControl_lineAccess().getDefineKeyword_1_0()); 
    }
    this_ID_4=RULE_ID    {
		$current.merge(this_ID_4);
    }

    { 
    newLeafNode(this_ID_4, grammarAccess.getControl_lineAccess().getIDTerminalRuleCall_1_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getControl_lineAccess().getReplacement_listParserRuleCall_1_2()); 
    }
    this_replacement_list_5=rulereplacement_list    {
		$current.merge(this_replacement_list_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getControl_lineAccess().getNew_lineParserRuleCall_1_3()); 
    }
    this_new_line_6=rulenew_line    {
		$current.merge(this_new_line_6);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='#define' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getControl_lineAccess().getDefineKeyword_2_0()); 
    }
    this_ID_8=RULE_ID    {
		$current.merge(this_ID_8);
    }

    { 
    newLeafNode(this_ID_8, grammarAccess.getControl_lineAccess().getIDTerminalRuleCall_2_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getControl_lineAccess().getLparenParserRuleCall_2_2()); 
    }
    this_lparen_9=rulelparen    {
		$current.merge(this_lparen_9);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(    this_ID_10=RULE_ID    {
		$current.merge(this_ID_10);
    }

    { 
    newLeafNode(this_ID_10, grammarAccess.getControl_lineAccess().getIDTerminalRuleCall_2_3()); 
    }
)?
	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getControl_lineAccess().getRightParenthesisKeyword_2_4()); 
    }

    { 
        newCompositeNode(grammarAccess.getControl_lineAccess().getReplacement_listParserRuleCall_2_5()); 
    }
    this_replacement_list_12=rulereplacement_list    {
		$current.merge(this_replacement_list_12);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getControl_lineAccess().getNew_lineParserRuleCall_2_6()); 
    }
    this_new_line_13=rulenew_line    {
		$current.merge(this_new_line_13);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='#undef' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getControl_lineAccess().getUndefKeyword_3_0()); 
    }
    this_ID_15=RULE_ID    {
		$current.merge(this_ID_15);
    }

    { 
    newLeafNode(this_ID_15, grammarAccess.getControl_lineAccess().getIDTerminalRuleCall_3_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getControl_lineAccess().getNew_lineParserRuleCall_3_2()); 
    }
    this_new_line_16=rulenew_line    {
		$current.merge(this_new_line_16);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='#line' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getControl_lineAccess().getLineKeyword_4_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getControl_lineAccess().getPp_tokensParserRuleCall_4_1()); 
    }
    this_pp_tokens_18=rulepp_tokens    {
		$current.merge(this_pp_tokens_18);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    { 
        newCompositeNode(grammarAccess.getControl_lineAccess().getNew_lineParserRuleCall_4_2()); 
    }
    this_new_line_19=rulenew_line    {
		$current.merge(this_new_line_19);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='#error' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getControl_lineAccess().getErrorKeyword_5_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getControl_lineAccess().getPp_tokensParserRuleCall_5_1()); 
    }
    this_pp_tokens_21=rulepp_tokens    {
		$current.merge(this_pp_tokens_21);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
    { 
        newCompositeNode(grammarAccess.getControl_lineAccess().getNew_lineParserRuleCall_5_2()); 
    }
    this_new_line_22=rulenew_line    {
		$current.merge(this_new_line_22);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='#pragma' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getControl_lineAccess().getPragmaKeyword_6_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getControl_lineAccess().getPp_tokensParserRuleCall_6_1()); 
    }
    this_pp_tokens_24=rulepp_tokens    {
		$current.merge(this_pp_tokens_24);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
    { 
        newCompositeNode(grammarAccess.getControl_lineAccess().getNew_lineParserRuleCall_6_2()); 
    }
    this_new_line_25=rulenew_line    {
		$current.merge(this_new_line_25);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    |(
	kw='#' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getControl_lineAccess().getNumberSignKeyword_7_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getControl_lineAccess().getNew_lineParserRuleCall_7_1()); 
    }
    this_new_line_27=rulenew_line    {
		$current.merge(this_new_line_27);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))
    ;





// Entry rule entryRulelparen
entryRulelparen returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLparenRule()); } 
	 iv_rulelparen=rulelparen 
	 { $current=$iv_rulelparen.current.getText(); }  
	 EOF 
;

// Rule lparen
rulelparen returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLparenAccess().getLeftParenthesisKeyword()); 
    }

    ;





// Entry rule entryRulereplacement_list
entryRulereplacement_list returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getReplacement_listRule()); } 
	 iv_rulereplacement_list=rulereplacement_list 
	 { $current=$iv_rulereplacement_list.current.getText(); }  
	 EOF 
;

// Rule replacement_list
rulereplacement_list returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getReplacement_listAccess().getPp_tokensParserRuleCall()); 
    }
    this_pp_tokens_0=rulepp_tokens    {
		$current.merge(this_pp_tokens_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?
    ;





// Entry rule entryRulepp_tokens
entryRulepp_tokens returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPp_tokensRule()); } 
	 iv_rulepp_tokens=rulepp_tokens 
	 { $current=$iv_rulepp_tokens.current.getText(); }  
	 EOF 
;

// Rule pp_tokens
rulepp_tokens returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPp_tokensAccess().getPreprocessing_tokenParserRuleCall()); 
    }
    this_preprocessing_token_0=rulepreprocessing_token    {
		$current.merge(this_preprocessing_token_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+
    ;











// Entry rule entryRuleLiteral
entryRuleLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); } 
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current.getText(); }  
	 EOF 
;

// Rule Literal
ruleLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getLiteralAccess().getINTTerminalRuleCall_0()); 
    }

    |    this_CHARACTER_LITERAL_1=RULE_CHARACTER_LITERAL    {
		$current.merge(this_CHARACTER_LITERAL_1);
    }

    { 
    newLeafNode(this_CHARACTER_LITERAL_1, grammarAccess.getLiteralAccess().getCHARACTER_LITERALTerminalRuleCall_1()); 
    }

    |    this_FLOATING_LITERAL_2=RULE_FLOATING_LITERAL    {
		$current.merge(this_FLOATING_LITERAL_2);
    }

    { 
    newLeafNode(this_FLOATING_LITERAL_2, grammarAccess.getLiteralAccess().getFLOATING_LITERALTerminalRuleCall_2()); 
    }

    |    this_STRING_LITERAL_3=RULE_STRING_LITERAL    {
		$current.merge(this_STRING_LITERAL_3);
    }

    { 
    newLeafNode(this_STRING_LITERAL_3, grammarAccess.getLiteralAccess().getSTRING_LITERALTerminalRuleCall_3()); 
    }

    |(
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLiteralAccess().getTrueKeyword_4_0()); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLiteralAccess().getFalseKeyword_4_1()); 
    }
))
    ;





RULE_HEADERNAME : (RULE_STRING|'<' ('a'..'z'|'A'..'Z'|'.')+ '>');

fragment RULE_HEX_QUAD : RULE_HEXADECIMAL_DIGIT RULE_HEXADECIMAL_DIGIT RULE_HEXADECIMAL_DIGIT RULE_HEXADECIMAL_DIGIT;

fragment RULE_UNIVERSAL_CHARACTER_NAME : ('\\u' RULE_HEX_QUAD|'\\U' RULE_HEX_QUAD RULE_HEX_QUAD);

RULE_HEADER_NAME : ('<' RULE_H_CHAR+ '>'|'"' RULE_Q_CHAR+ '"');

fragment RULE_H_CHAR : ~(('\n'|'>'));

fragment RULE_Q_CHAR : ~(('\n'|'"'));

RULE_KEYWORD : ('alignas'|'alignof'|'asm'|'auto'|'bool'|'break'|'case'|'catch'|'char'|'char16_t'|'char32_t'|'class'|'const'|'constexpr'|'const_cast'|'continue'|'decltype'|'default'|'delete'|'do'|'double'|'dynamic_cast'|'else'|'enum'|'explicit'|'export'|'extern'|'false'|'float'|'for'|'friend'|'goto'|'if'|'inline'|'int'|'long'|'mutable'|'namespace'|'new'|'noexcept'|'nullptr'|'operator'|'private'|'protected'|'public'|'register'|'reinterpret_cast'|'return'|'short'|'signed'|'sizeof'|'static'|'static_assert'|'static_cast'|'struct'|'switch'|'template'|'this'|'thread_local'|'throw'|'true'|'try'|'typedef'|'typeid'|'typename'|'union'|'unsigned'|'using'|'virtual'|'void'|'volatile'|'wchar_t'|'while');

RULE_PREPROCESSING_OP_OR_PUNC : ('{'|'}'|'['|']'|'#'|'##'|'('|')'|'<:'|':>'|'<%'|'%>'|'%:'|'%:%:'|';'|':'|'...'|'new'|'delete'|'?'|'::'|'.'|'.*'|'+'|'-'|'*'|'/'|'%'|'^'|'&'|'|'|'~'|'!'|'='|'<'|'>'|'+='|'-='|'*='|'/='|'%='|'^='|'&='|'|='|'<<'|'>>'|'<<='|'>>='|'=='|'!='|'<='|'>='|'&&'|'||'|'++'|'--'|','|'->*'|'->'|'and'|'and_eq'|'bitand'|'bitor'|'compl'|'not'|'not_eq'|'or'|'or_eq'|'xor'|'xor_eq');

RULE_INT : (RULE_DECIMAL_LITERAL|RULE_OCTAL_LITERAL|RULE_HEXADECIMAL_LITERAL) RULE_INTEGER_SUFFIX?;

fragment RULE_DECIMAL_LITERAL : '1'..'9' RULE_DIGIT*;

fragment RULE_OCTAL_LITERAL : '0' RULE_OCTAL_DIGIT*;

fragment RULE_HEXADECIMAL_LITERAL : ('0x'|'0X') RULE_HEXADECIMAL_DIGIT+;

fragment RULE_OCTAL_DIGIT : '0'..'7';

fragment RULE_HEXADECIMAL_DIGIT : ('0'..'9'|'A'..'F');

fragment RULE_INTEGER_SUFFIX : (('u'|'U') ('l'|'L'|'ll'|'LL')?|('l'|'L'|'ll'|'LL') ('u'|'U')?);

RULE_CHARACTER_LITERAL : ('u'|'U'|'L')? '\'' RULE_C_CHAR+ '\'';

fragment RULE_C_CHAR : (~(('\''|'\\'|'\n'))|RULE_ESCAPE_SEQUENCE|RULE_UNIVERSAL_CHARACTER_NAME);

fragment RULE_ESCAPE_SEQUENCE : (RULE_SIMPLE_ESCAPE_SEQUENCE|RULE_OCTAL_ESCAPE_SEQUENCE|RULE_HEXADECIMAL_ESCAPE_SEQUENCE);

fragment RULE_SIMPLE_ESCAPE_SEQUENCE : '\\' ('\''|'"'|'?'|'\\'|'a'|'b'|'f'|'n'|'r'|'t'|'v');

fragment RULE_OCTAL_ESCAPE_SEQUENCE : '\\' RULE_OCTAL_DIGIT RULE_OCTAL_DIGIT RULE_OCTAL_DIGIT;

fragment RULE_HEXADECIMAL_ESCAPE_SEQUENCE : '\\x' RULE_HEXADECIMAL_DIGIT+;

RULE_ID : (RULE_NONDIGIT|RULE_UNIVERSAL_CHARACTER_NAME) (RULE_DIGIT|RULE_NONDIGIT|RULE_UNIVERSAL_CHARACTER_NAME)*;

RULE_DIGIT : '0'..'9';

RULE_NONDIGIT : ('a'..'z'|'A'..'Z'|'_');

RULE_FLOATING_LITERAL : (RULE_FRACTIONAL_CONSTANT RULE_EXPONENT_PART?|RULE_DIGIT+ RULE_EXPONENT_PART) ('f'|'l'|'F'|'L')?;

fragment RULE_FRACTIONAL_CONSTANT : (RULE_DIGIT* '.' RULE_DIGIT+|RULE_DIGIT+ '.');

fragment RULE_EXPONENT_PART : ('e'|'E') ('+'|'-')? RULE_DIGIT+;

RULE_STRING_LITERAL : RULE_ENC_PREFIX? '"' RULE_SCHAR+ '"';

fragment RULE_ENC_PREFIX : ('u8'|'u'|'U'|'L');

fragment RULE_SCHAR : (~(('"'|'\\'|'\n'))|RULE_ESCAPE_SEQUENCE|RULE_UNIVERSAL_CHARACTER_NAME);

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


