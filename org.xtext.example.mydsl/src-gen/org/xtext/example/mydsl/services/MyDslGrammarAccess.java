/*
* generated by Xtext
*/
package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cGreetingsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cGreetingsStatementParserRuleCall_0 = (RuleCall)cGreetingsAssignment.eContents().get(0);
		
		/// *
		// * SO FAR
		// * 
		// * LEX.PPNUMBER     [OK]
		// * LEX.NAME         [OK]
		// * LEX.KEY          [OK]
		// * LEX.OPERATORS    [OK]
		// * Lex.Token        [OK]
		// *
		// * / Model:
		//	greetings+=statement;
		public ParserRule getRule() { return rule; }

		//greetings+=statement
		public Assignment getGreetingsAssignment() { return cGreetingsAssignment; }

		//statement
		public RuleCall getGreetingsStatementParserRuleCall_0() { return cGreetingsStatementParserRuleCall_0; }
	}

	public class GreetingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Greeting");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHelloKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Greeting:
		//	"Hello" name=ID "!";
		public ParserRule getRule() { return rule; }

		//"Hello" name=ID "!"
		public Group getGroup() { return cGroup; }

		//"Hello"
		public Keyword getHelloKeyword_0() { return cHelloKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_2() { return cExclamationMarkKeyword_2; }
	}

	public class New_lineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "new_line");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cControl000aKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cControl000dControl000aKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//new_line:
		//	"\n" | "\r\n";
		public ParserRule getRule() { return rule; }

		//"\n" | "\r\n"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"\n"
		public Keyword getControl000aKeyword_0() { return cControl000aKeyword_0; }

		//"\r\n"
		public Keyword getControl000dControl000aKeyword_1() { return cControl000dControl000aKeyword_1; }
	}

	public class Preprocessing_fileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "preprocessing_file");
		private final RuleCall cGroupParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//preprocessing_file:
		//	group?;
		public ParserRule getRule() { return rule; }

		//group?
		public RuleCall getGroupParserRuleCall() { return cGroupParserRuleCall; }
	}

	public class GroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "group");
		private final RuleCall cGroup_partParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//group:
		//	group_part+;
		public ParserRule getRule() { return rule; }

		//group_part+
		public RuleCall getGroup_partParserRuleCall() { return cGroup_partParserRuleCall; }
	}

	public class Group_partElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "group_part");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cPp_tokensParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final RuleCall cNew_lineParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cIf_actionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cControl_lineParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//group_part:
		//	pp_tokens? new_line | if_action | control_line;
		public ParserRule getRule() { return rule; }

		//pp_tokens? new_line | if_action | control_line
		public Alternatives getAlternatives() { return cAlternatives; }

		//pp_tokens? new_line
		public Group getGroup_0() { return cGroup_0; }

		//pp_tokens?
		public RuleCall getPp_tokensParserRuleCall_0_0() { return cPp_tokensParserRuleCall_0_0; }

		//new_line
		public RuleCall getNew_lineParserRuleCall_0_1() { return cNew_lineParserRuleCall_0_1; }

		//if_action
		public RuleCall getIf_actionParserRuleCall_1() { return cIf_actionParserRuleCall_1; }

		//control_line
		public RuleCall getControl_lineParserRuleCall_2() { return cControl_lineParserRuleCall_2; }
	}

	public class If_actionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "if_action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIf_groupParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cElif_groupsParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cElse_groupParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cEndif_lineParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//if_action:
		//	if_group elif_groups? else_group? endif_line;
		public ParserRule getRule() { return rule; }

		//if_group elif_groups? else_group? endif_line
		public Group getGroup() { return cGroup; }

		//if_group
		public RuleCall getIf_groupParserRuleCall_0() { return cIf_groupParserRuleCall_0; }

		//elif_groups?
		public RuleCall getElif_groupsParserRuleCall_1() { return cElif_groupsParserRuleCall_1; }

		//else_group?
		public RuleCall getElse_groupParserRuleCall_2() { return cElse_groupParserRuleCall_2; }

		//endif_line
		public RuleCall getEndif_lineParserRuleCall_3() { return cEndif_lineParserRuleCall_3; }
	}

	public class If_groupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "if_group");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cIfKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cConstant_expressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cNew_lineParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cGroupParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cIfdefKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cNew_lineParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cGroupParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cIfndefKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cNew_lineParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final RuleCall cGroupParserRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		
		//if_group:
		//	"#if" constant_expression new_line group? | "#ifdef" IDENTIFIER new_line group? | "#ifndef" IDENTIFIER new_line
		//	group?;
		public ParserRule getRule() { return rule; }

		//"#if" constant_expression new_line group? | "#ifdef" IDENTIFIER new_line group? | "#ifndef" IDENTIFIER new_line group?
		public Alternatives getAlternatives() { return cAlternatives; }

		//"#if" constant_expression new_line group?
		public Group getGroup_0() { return cGroup_0; }

		//"#if"
		public Keyword getIfKeyword_0_0() { return cIfKeyword_0_0; }

		//constant_expression
		public RuleCall getConstant_expressionParserRuleCall_0_1() { return cConstant_expressionParserRuleCall_0_1; }

		//new_line
		public RuleCall getNew_lineParserRuleCall_0_2() { return cNew_lineParserRuleCall_0_2; }

		//group?
		public RuleCall getGroupParserRuleCall_0_3() { return cGroupParserRuleCall_0_3; }

		//"#ifdef" IDENTIFIER new_line group?
		public Group getGroup_1() { return cGroup_1; }

		//"#ifdef"
		public Keyword getIfdefKeyword_1_0() { return cIfdefKeyword_1_0; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_1_1() { return cIDENTIFIERTerminalRuleCall_1_1; }

		//new_line
		public RuleCall getNew_lineParserRuleCall_1_2() { return cNew_lineParserRuleCall_1_2; }

		//group?
		public RuleCall getGroupParserRuleCall_1_3() { return cGroupParserRuleCall_1_3; }

		//"#ifndef" IDENTIFIER new_line group?
		public Group getGroup_2() { return cGroup_2; }

		//"#ifndef"
		public Keyword getIfndefKeyword_2_0() { return cIfndefKeyword_2_0; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_2_1() { return cIDENTIFIERTerminalRuleCall_2_1; }

		//new_line
		public RuleCall getNew_lineParserRuleCall_2_2() { return cNew_lineParserRuleCall_2_2; }

		//group?
		public RuleCall getGroupParserRuleCall_2_3() { return cGroupParserRuleCall_2_3; }
	}

	public class Elif_groupsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "elif_groups");
		private final RuleCall cElif_groupParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//elif_groups:
		//	elif_group+;
		public ParserRule getRule() { return rule; }

		//elif_group+
		public RuleCall getElif_groupParserRuleCall() { return cElif_groupParserRuleCall; }
	}

	public class Elif_groupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "elif_group");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElifKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cConstant_expressionParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cNew_lineParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cGroupParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//elif_group:
		//	"#elif" constant_expression new_line group?;
		public ParserRule getRule() { return rule; }

		//"#elif" constant_expression new_line group?
		public Group getGroup() { return cGroup; }

		//"#elif"
		public Keyword getElifKeyword_0() { return cElifKeyword_0; }

		//constant_expression
		public RuleCall getConstant_expressionParserRuleCall_1() { return cConstant_expressionParserRuleCall_1; }

		//new_line
		public RuleCall getNew_lineParserRuleCall_2() { return cNew_lineParserRuleCall_2; }

		//group?
		public RuleCall getGroupParserRuleCall_3() { return cGroupParserRuleCall_3; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpression_statementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCompound_statementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cJump_statementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDeclaration_statementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSelection_statementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//// A.5
		//statement:
		//	expression_statement | compound_statement | jump_statement | declaration_statement | selection_statement;
		public ParserRule getRule() { return rule; }

		//expression_statement | compound_statement | jump_statement | declaration_statement | selection_statement
		public Alternatives getAlternatives() { return cAlternatives; }

		//expression_statement
		public RuleCall getExpression_statementParserRuleCall_0() { return cExpression_statementParserRuleCall_0; }

		//compound_statement
		public RuleCall getCompound_statementParserRuleCall_1() { return cCompound_statementParserRuleCall_1; }

		//jump_statement
		public RuleCall getJump_statementParserRuleCall_2() { return cJump_statementParserRuleCall_2; }

		//declaration_statement
		public RuleCall getDeclaration_statementParserRuleCall_3() { return cDeclaration_statementParserRuleCall_3; }

		//selection_statement
		public RuleCall getSelection_statementParserRuleCall_4() { return cSelection_statementParserRuleCall_4; }
	}

	public class Iteration_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "iteration_statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cWhileKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cConditionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cStatementParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cDoKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cStatementParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cWhileKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Keyword cRightParenthesisSemicolonKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cForKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cFor_init_statementParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cConditionParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final Keyword cSemicolonKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final RuleCall cExpressionParserRuleCall_2_4 = (RuleCall)cGroup_2.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_2_5 = (Keyword)cGroup_2.eContents().get(5);
		private final RuleCall cStatementParserRuleCall_2_6 = (RuleCall)cGroup_2.eContents().get(6);
		
		//iteration_statement:
		//	"while (" condition ")" statement | "do" statement "while (" expression ");" | "for ( " for_init_statement condition?
		//	";" expression? ")" statement;
		public ParserRule getRule() { return rule; }

		//"while (" condition ")" statement | "do" statement "while (" expression ");" | "for ( " for_init_statement condition?
		//";" expression? ")" statement
		public Alternatives getAlternatives() { return cAlternatives; }

		//"while (" condition ")" statement
		public Group getGroup_0() { return cGroup_0; }

		//"while ("
		public Keyword getWhileKeyword_0_0() { return cWhileKeyword_0_0; }

		//condition
		public RuleCall getConditionParserRuleCall_0_1() { return cConditionParserRuleCall_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//statement
		public RuleCall getStatementParserRuleCall_0_3() { return cStatementParserRuleCall_0_3; }

		//"do" statement "while (" expression ");"
		public Group getGroup_1() { return cGroup_1; }

		//"do"
		public Keyword getDoKeyword_1_0() { return cDoKeyword_1_0; }

		//statement
		public RuleCall getStatementParserRuleCall_1_1() { return cStatementParserRuleCall_1_1; }

		//"while ("
		public Keyword getWhileKeyword_1_2() { return cWhileKeyword_1_2; }

		//expression
		public RuleCall getExpressionParserRuleCall_1_3() { return cExpressionParserRuleCall_1_3; }

		//");"
		public Keyword getRightParenthesisSemicolonKeyword_1_4() { return cRightParenthesisSemicolonKeyword_1_4; }

		//"for ( " for_init_statement condition? ";" expression? ")" statement
		public Group getGroup_2() { return cGroup_2; }

		//"for ( "
		public Keyword getForKeyword_2_0() { return cForKeyword_2_0; }

		//for_init_statement
		public RuleCall getFor_init_statementParserRuleCall_2_1() { return cFor_init_statementParserRuleCall_2_1; }

		//condition?
		public RuleCall getConditionParserRuleCall_2_2() { return cConditionParserRuleCall_2_2; }

		//";"
		public Keyword getSemicolonKeyword_2_3() { return cSemicolonKeyword_2_3; }

		//expression?
		public RuleCall getExpressionParserRuleCall_2_4() { return cExpressionParserRuleCall_2_4; }

		//")"
		public Keyword getRightParenthesisKeyword_2_5() { return cRightParenthesisKeyword_2_5; }

		//statement
		public RuleCall getStatementParserRuleCall_2_6() { return cStatementParserRuleCall_2_6; }
	}

	public class For_init_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "for_init_statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExpression_statementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSimple_declarationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//for_init_statement:
		//	expression_statement | simple_declaration;
		public ParserRule getRule() { return rule; }

		//expression_statement | simple_declaration
		public Alternatives getAlternatives() { return cAlternatives; }

		//expression_statement
		public RuleCall getExpression_statementParserRuleCall_0() { return cExpression_statementParserRuleCall_0; }

		//simple_declaration
		public RuleCall getSimple_declarationParserRuleCall_1() { return cSimple_declarationParserRuleCall_1; }
	}

	public class Simple_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "simple_declaration");
		private final Keyword cIntA1Keyword = (Keyword)rule.eContents().get(1);
		
		//simple_declaration:
		//	"int a = 1;";
		public ParserRule getRule() { return rule; }

		//"int a = 1;"
		public Keyword getIntA1Keyword() { return cIntA1Keyword; }
	}

	public class Expression_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "expression_statement");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//expression_statement:
		//	expression?;
		public ParserRule getRule() { return rule; }

		//expression?
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}

	public class Compound_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "compound_statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cStatement_seqParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//compound_statement:
		//	"{" statement_seq? "}";
		public ParserRule getRule() { return rule; }

		//"{" statement_seq? "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//statement_seq?
		public RuleCall getStatement_seqParserRuleCall_1() { return cStatement_seqParserRuleCall_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class Statement_seqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "statement_seq");
		private final RuleCall cStatementParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//statement_seq:
		//	statement+;
		public ParserRule getRule() { return rule; }

		//statement+
		public RuleCall getStatementParserRuleCall() { return cStatementParserRuleCall; }
	}

	public class Selection_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "selection_statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cIfKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cConditionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cStatementParserRuleCall_0_3 = (RuleCall)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cIfKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cConditionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cStatementParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cSwitchKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cConditionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final RuleCall cStatementParserRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		
		//selection_statement:
		//	"if (" condition ")" statement | "if (" condition ")" statement | "switch (" condition ")" statement;
		public ParserRule getRule() { return rule; }

		//"if (" condition ")" statement | "if (" condition ")" statement | "switch (" condition ")" statement
		public Alternatives getAlternatives() { return cAlternatives; }

		//"if (" condition ")" statement
		public Group getGroup_0() { return cGroup_0; }

		//"if ("
		public Keyword getIfKeyword_0_0() { return cIfKeyword_0_0; }

		//condition
		public RuleCall getConditionParserRuleCall_0_1() { return cConditionParserRuleCall_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//statement
		public RuleCall getStatementParserRuleCall_0_3() { return cStatementParserRuleCall_0_3; }

		//"if (" condition ")" statement
		public Group getGroup_1() { return cGroup_1; }

		//"if ("
		public Keyword getIfKeyword_1_0() { return cIfKeyword_1_0; }

		//condition
		public RuleCall getConditionParserRuleCall_1_1() { return cConditionParserRuleCall_1_1; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }

		//statement
		public RuleCall getStatementParserRuleCall_1_3() { return cStatementParserRuleCall_1_3; }

		//"switch (" condition ")" statement
		public Group getGroup_2() { return cGroup_2; }

		//"switch ("
		public Keyword getSwitchKeyword_2_0() { return cSwitchKeyword_2_0; }

		//condition
		public RuleCall getConditionParserRuleCall_2_1() { return cConditionParserRuleCall_2_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }

		//statement
		public RuleCall getStatementParserRuleCall_2_3() { return cStatementParserRuleCall_2_3; }
	}

	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "condition");
		private final RuleCall cExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// TODO(condition')
		//condition:
		//	expression;
		public ParserRule getRule() { return rule; }

		//expression
		public RuleCall getExpressionParserRuleCall() { return cExpressionParserRuleCall; }
	}

	public class Jump_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "jump_statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cBreakKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cContinueKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cReturnKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cSemicolonKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cGotoKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cSemicolonKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//jump_statement:
		//	"break;" | "continue;" | "return" expression? ";" | "goto" IDENTIFIER ";";
		public ParserRule getRule() { return rule; }

		//"break;" | "continue;" | "return" expression? ";" | "goto" IDENTIFIER ";"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"break;"
		public Keyword getBreakKeyword_0() { return cBreakKeyword_0; }

		//"continue;"
		public Keyword getContinueKeyword_1() { return cContinueKeyword_1; }

		//"return" expression? ";"
		public Group getGroup_2() { return cGroup_2; }

		//"return"
		public Keyword getReturnKeyword_2_0() { return cReturnKeyword_2_0; }

		//expression?
		public RuleCall getExpressionParserRuleCall_2_1() { return cExpressionParserRuleCall_2_1; }

		//";"
		public Keyword getSemicolonKeyword_2_2() { return cSemicolonKeyword_2_2; }

		//"goto" IDENTIFIER ";"
		public Group getGroup_3() { return cGroup_3; }

		//"goto"
		public Keyword getGotoKeyword_3_0() { return cGotoKeyword_3_0; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_3_1() { return cIDENTIFIERTerminalRuleCall_3_1; }

		//";"
		public Keyword getSemicolonKeyword_3_2() { return cSemicolonKeyword_3_2; }
	}

	public class Declaration_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "declaration_statement");
		private final RuleCall cBlock_declarationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//declaration_statement:
		//	block_declaration;
		public ParserRule getRule() { return rule; }

		//block_declaration
		public RuleCall getBlock_declarationParserRuleCall() { return cBlock_declarationParserRuleCall; }
	}

	public class Block_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "block_declaration");
		private final Keyword cBlock_declarationKeyword = (Keyword)rule.eContents().get(1);
		
		//// TODO
		//block_declaration:
		//	"==block_declaration==";
		public ParserRule getRule() { return rule; }

		//"==block_declaration=="
		public Keyword getBlock_declarationKeyword() { return cBlock_declarationKeyword; }
	}

	public class Constant_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "constant_expression");
		private final RuleCall cConditional_expressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// TODO(constant_expression)
		//constant_expression:
		//	conditional_expression;
		public ParserRule getRule() { return rule; }

		//conditional_expression
		public RuleCall getConditional_expressionParserRuleCall() { return cConditional_expressionParserRuleCall; }
	}

	public class Conditional_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "conditional_expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLogical_or_expressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cLogical_or_expressionParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Keyword cColonKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final RuleCall cAssignment_expressionParserRuleCall_1_4 = (RuleCall)cGroup_1.eContents().get(4);
		
		//conditional_expression:
		//	logical_or_expression | logical_or_expression "?" expression ":" assignment_expression;
		public ParserRule getRule() { return rule; }

		//logical_or_expression | logical_or_expression "?" expression ":" assignment_expression
		public Alternatives getAlternatives() { return cAlternatives; }

		//logical_or_expression
		public RuleCall getLogical_or_expressionParserRuleCall_0() { return cLogical_or_expressionParserRuleCall_0; }

		//logical_or_expression "?" expression ":" assignment_expression
		public Group getGroup_1() { return cGroup_1; }

		//logical_or_expression
		public RuleCall getLogical_or_expressionParserRuleCall_1_0() { return cLogical_or_expressionParserRuleCall_1_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_1() { return cQuestionMarkKeyword_1_1; }

		//expression
		public RuleCall getExpressionParserRuleCall_1_2() { return cExpressionParserRuleCall_1_2; }

		//":"
		public Keyword getColonKeyword_1_3() { return cColonKeyword_1_3; }

		//assignment_expression
		public RuleCall getAssignment_expressionParserRuleCall_1_4() { return cAssignment_expressionParserRuleCall_1_4; }
	}

	public class Logical_or_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "logical_or_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLogical_and_expressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cLogical_and_expressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//logical_or_expression:
		//	logical_and_expression ("||" logical_and_expression)*;
		public ParserRule getRule() { return rule; }

		//logical_and_expression ("||" logical_and_expression)*
		public Group getGroup() { return cGroup; }

		//logical_and_expression
		public RuleCall getLogical_and_expressionParserRuleCall_0() { return cLogical_and_expressionParserRuleCall_0; }

		//("||" logical_and_expression)*
		public Group getGroup_1() { return cGroup_1; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword_1_0() { return cVerticalLineVerticalLineKeyword_1_0; }

		//logical_and_expression
		public RuleCall getLogical_and_expressionParserRuleCall_1_1() { return cLogical_and_expressionParserRuleCall_1_1; }
	}

	public class Logical_and_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "logical_and_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cInclusive_or_expressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAmpersandAmpersandKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cInclusive_or_expressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//logical_and_expression:
		//	inclusive_or_expression ("&&" inclusive_or_expression)*;
		public ParserRule getRule() { return rule; }

		//inclusive_or_expression ("&&" inclusive_or_expression)*
		public Group getGroup() { return cGroup; }

		//inclusive_or_expression
		public RuleCall getInclusive_or_expressionParserRuleCall_0() { return cInclusive_or_expressionParserRuleCall_0; }

		//("&&" inclusive_or_expression)*
		public Group getGroup_1() { return cGroup_1; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_1_0() { return cAmpersandAmpersandKeyword_1_0; }

		//inclusive_or_expression
		public RuleCall getInclusive_or_expressionParserRuleCall_1_1() { return cInclusive_or_expressionParserRuleCall_1_1; }
	}

	public class Inclusive_or_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "inclusive_or_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExclusive_or_expressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVerticalLineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExclusive_or_expressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//inclusive_or_expression:
		//	exclusive_or_expression ("|" exclusive_or_expression)*;
		public ParserRule getRule() { return rule; }

		//exclusive_or_expression ("|" exclusive_or_expression)*
		public Group getGroup() { return cGroup; }

		//exclusive_or_expression
		public RuleCall getExclusive_or_expressionParserRuleCall_0() { return cExclusive_or_expressionParserRuleCall_0; }

		//("|" exclusive_or_expression)*
		public Group getGroup_1() { return cGroup_1; }

		//"|"
		public Keyword getVerticalLineKeyword_1_0() { return cVerticalLineKeyword_1_0; }

		//exclusive_or_expression
		public RuleCall getExclusive_or_expressionParserRuleCall_1_1() { return cExclusive_or_expressionParserRuleCall_1_1; }
	}

	public class Exclusive_or_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "exclusive_or_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAnd_expressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCircumflexAccentKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cAnd_expressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//exclusive_or_expression:
		//	and_expression ("^" and_expression)*;
		public ParserRule getRule() { return rule; }

		//and_expression ("^" and_expression)*
		public Group getGroup() { return cGroup; }

		//and_expression
		public RuleCall getAnd_expressionParserRuleCall_0() { return cAnd_expressionParserRuleCall_0; }

		//("^" and_expression)*
		public Group getGroup_1() { return cGroup_1; }

		//"^"
		public Keyword getCircumflexAccentKeyword_1_0() { return cCircumflexAccentKeyword_1_0; }

		//and_expression
		public RuleCall getAnd_expressionParserRuleCall_1_1() { return cAnd_expressionParserRuleCall_1_1; }
	}

	public class And_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "and_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEquality_expressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAmpersandKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cEquality_expressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//and_expression:
		//	equality_expression ("&" equality_expression)*;
		public ParserRule getRule() { return rule; }

		//equality_expression ("&" equality_expression)*
		public Group getGroup() { return cGroup; }

		//equality_expression
		public RuleCall getEquality_expressionParserRuleCall_0() { return cEquality_expressionParserRuleCall_0; }

		//("&" equality_expression)*
		public Group getGroup_1() { return cGroup_1; }

		//"&"
		public Keyword getAmpersandKeyword_1_0() { return cAmpersandKeyword_1_0; }

		//equality_expression
		public RuleCall getEquality_expressionParserRuleCall_1_1() { return cEquality_expressionParserRuleCall_1_1; }
	}

	public class Equality_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "equality_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cRelational_expressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_0_0 = (Keyword)cAlternatives_1_0.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1_0_1 = (Keyword)cAlternatives_1_0.eContents().get(1);
		private final RuleCall cRelational_expressionParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//equality_expression:
		//	relational_expression (("==" | "!=") relational_expression)*;
		public ParserRule getRule() { return rule; }

		//relational_expression (("==" | "!=") relational_expression)*
		public Group getGroup() { return cGroup; }

		//relational_expression
		public RuleCall getRelational_expressionParserRuleCall_0() { return cRelational_expressionParserRuleCall_0; }

		//(("==" | "!=") relational_expression)*
		public Group getGroup_1() { return cGroup_1; }

		//"==" | "!="
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_1_0_0() { return cEqualsSignEqualsSignKeyword_1_0_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1_0_1() { return cExclamationMarkEqualsSignKeyword_1_0_1; }

		//relational_expression
		public RuleCall getRelational_expressionParserRuleCall_1_1() { return cRelational_expressionParserRuleCall_1_1; }
	}

	public class Relational_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "relational_expression");
		private final Keyword cRelKeyword = (Keyword)rule.eContents().get(1);
		
		//relational_expression:
		//	"==rel==";
		public ParserRule getRule() { return rule; }

		//"==rel=="
		public Keyword getRelKeyword() { return cRelKeyword; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "expression");
		private final Keyword cExpressionKeyword = (Keyword)rule.eContents().get(1);
		
		//expression:
		//	"==expression==";
		public ParserRule getRule() { return rule; }

		//"==expression=="
		public Keyword getExpressionKeyword() { return cExpressionKeyword; }
	}

	public class Assignment_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "assignment_expression");
		private final Keyword cAssignmentKeyword = (Keyword)rule.eContents().get(1);
		
		//assignment_expression:
		//	"==assignment==";
		public ParserRule getRule() { return rule; }

		//"==assignment=="
		public Keyword getAssignmentKeyword() { return cAssignmentKeyword; }
	}

	public class Preprocessing_tokenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "preprocessing_token");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIDENTIFIERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHEADERNAMETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPPNUMBERTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPPOPorPUNCTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//preprocessing_token:
		//	IDENTIFIER | HEADERNAME | PPNUMBER | //	CHARLITERAL|
		//	PPOPorPUNC;
		public ParserRule getRule() { return rule; }

		//IDENTIFIER | HEADERNAME | PPNUMBER | //	CHARLITERAL|
		//PPOPorPUNC
		public Alternatives getAlternatives() { return cAlternatives; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_0() { return cIDENTIFIERTerminalRuleCall_0; }

		//HEADERNAME
		public RuleCall getHEADERNAMETerminalRuleCall_1() { return cHEADERNAMETerminalRuleCall_1; }

		//PPNUMBER
		public RuleCall getPPNUMBERTerminalRuleCall_2() { return cPPNUMBERTerminalRuleCall_2; }

		////	CHARLITERAL|
		//PPOPorPUNC
		public RuleCall getPPOPorPUNCTerminalRuleCall_3() { return cPPOPorPUNCTerminalRuleCall_3; }
	}

	public class Else_groupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "else_group");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNew_lineParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cGroupParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//else_group:
		//	"#else" new_line group?;
		public ParserRule getRule() { return rule; }

		//"#else" new_line group?
		public Group getGroup() { return cGroup; }

		//"#else"
		public Keyword getElseKeyword_0() { return cElseKeyword_0; }

		//new_line
		public RuleCall getNew_lineParserRuleCall_1() { return cNew_lineParserRuleCall_1; }

		//group?
		public RuleCall getGroupParserRuleCall_2() { return cGroupParserRuleCall_2; }
	}

	public class Endif_lineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "endif_line");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEndifKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cNew_lineParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//endif_line:
		//	"#endif" new_line;
		public ParserRule getRule() { return rule; }

		//"#endif" new_line
		public Group getGroup() { return cGroup; }

		//"#endif"
		public Keyword getEndifKeyword_0() { return cEndifKeyword_0; }

		//new_line
		public RuleCall getNew_lineParserRuleCall_1() { return cNew_lineParserRuleCall_1; }
	}

	public class Control_lineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "control_line");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cIncludeKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cPp_tokensParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cNew_lineParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cDefineKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cReplacement_listParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cNew_lineParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cDefineKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final RuleCall cLparenParserRuleCall_2_2 = (RuleCall)cGroup_2.eContents().get(2);
		private final RuleCall cIDENTIFIERTerminalRuleCall_2_3 = (RuleCall)cGroup_2.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final RuleCall cReplacement_listParserRuleCall_2_5 = (RuleCall)cGroup_2.eContents().get(5);
		private final RuleCall cNew_lineParserRuleCall_2_6 = (RuleCall)cGroup_2.eContents().get(6);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cUndefKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cIDENTIFIERTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final RuleCall cNew_lineParserRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLineKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final RuleCall cPp_tokensParserRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final RuleCall cNew_lineParserRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cErrorKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cPp_tokensParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final RuleCall cNew_lineParserRuleCall_5_2 = (RuleCall)cGroup_5.eContents().get(2);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cPragmaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final RuleCall cPp_tokensParserRuleCall_6_1 = (RuleCall)cGroup_6.eContents().get(1);
		private final RuleCall cNew_lineParserRuleCall_6_2 = (RuleCall)cGroup_6.eContents().get(2);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cNumberSignKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final RuleCall cNew_lineParserRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		
		//control_line:
		//	"#include" pp_tokens new_line | "#define" IDENTIFIER replacement_list new_line | "#define" IDENTIFIER lparen
		//	IDENTIFIER? ")" replacement_list new_line | "#undef" IDENTIFIER new_line | "#line" pp_tokens new_line | "#error"
		//	pp_tokens? new_line | "#pragma" pp_tokens? new_line | "#" new_line;
		public ParserRule getRule() { return rule; }

		//"#include" pp_tokens new_line | "#define" IDENTIFIER replacement_list new_line | "#define" IDENTIFIER lparen IDENTIFIER?
		//")" replacement_list new_line | "#undef" IDENTIFIER new_line | "#line" pp_tokens new_line | "#error" pp_tokens?
		//new_line | "#pragma" pp_tokens? new_line | "#" new_line
		public Alternatives getAlternatives() { return cAlternatives; }

		//"#include" pp_tokens new_line
		public Group getGroup_0() { return cGroup_0; }

		//"#include"
		public Keyword getIncludeKeyword_0_0() { return cIncludeKeyword_0_0; }

		//pp_tokens
		public RuleCall getPp_tokensParserRuleCall_0_1() { return cPp_tokensParserRuleCall_0_1; }

		//new_line
		public RuleCall getNew_lineParserRuleCall_0_2() { return cNew_lineParserRuleCall_0_2; }

		//"#define" IDENTIFIER replacement_list new_line
		public Group getGroup_1() { return cGroup_1; }

		//"#define"
		public Keyword getDefineKeyword_1_0() { return cDefineKeyword_1_0; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_1_1() { return cIDENTIFIERTerminalRuleCall_1_1; }

		//replacement_list
		public RuleCall getReplacement_listParserRuleCall_1_2() { return cReplacement_listParserRuleCall_1_2; }

		//new_line
		public RuleCall getNew_lineParserRuleCall_1_3() { return cNew_lineParserRuleCall_1_3; }

		//"#define" IDENTIFIER lparen IDENTIFIER? ")" replacement_list new_line
		public Group getGroup_2() { return cGroup_2; }

		//"#define"
		public Keyword getDefineKeyword_2_0() { return cDefineKeyword_2_0; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_2_1() { return cIDENTIFIERTerminalRuleCall_2_1; }

		//lparen
		public RuleCall getLparenParserRuleCall_2_2() { return cLparenParserRuleCall_2_2; }

		//IDENTIFIER?
		public RuleCall getIDENTIFIERTerminalRuleCall_2_3() { return cIDENTIFIERTerminalRuleCall_2_3; }

		//")"
		public Keyword getRightParenthesisKeyword_2_4() { return cRightParenthesisKeyword_2_4; }

		//replacement_list
		public RuleCall getReplacement_listParserRuleCall_2_5() { return cReplacement_listParserRuleCall_2_5; }

		//new_line
		public RuleCall getNew_lineParserRuleCall_2_6() { return cNew_lineParserRuleCall_2_6; }

		//"#undef" IDENTIFIER new_line
		public Group getGroup_3() { return cGroup_3; }

		//"#undef"
		public Keyword getUndefKeyword_3_0() { return cUndefKeyword_3_0; }

		//IDENTIFIER
		public RuleCall getIDENTIFIERTerminalRuleCall_3_1() { return cIDENTIFIERTerminalRuleCall_3_1; }

		//new_line
		public RuleCall getNew_lineParserRuleCall_3_2() { return cNew_lineParserRuleCall_3_2; }

		//"#line" pp_tokens new_line
		public Group getGroup_4() { return cGroup_4; }

		//"#line"
		public Keyword getLineKeyword_4_0() { return cLineKeyword_4_0; }

		//pp_tokens
		public RuleCall getPp_tokensParserRuleCall_4_1() { return cPp_tokensParserRuleCall_4_1; }

		//new_line
		public RuleCall getNew_lineParserRuleCall_4_2() { return cNew_lineParserRuleCall_4_2; }

		//"#error" pp_tokens? new_line
		public Group getGroup_5() { return cGroup_5; }

		//"#error"
		public Keyword getErrorKeyword_5_0() { return cErrorKeyword_5_0; }

		//pp_tokens?
		public RuleCall getPp_tokensParserRuleCall_5_1() { return cPp_tokensParserRuleCall_5_1; }

		//new_line
		public RuleCall getNew_lineParserRuleCall_5_2() { return cNew_lineParserRuleCall_5_2; }

		//"#pragma" pp_tokens? new_line
		public Group getGroup_6() { return cGroup_6; }

		//"#pragma"
		public Keyword getPragmaKeyword_6_0() { return cPragmaKeyword_6_0; }

		//pp_tokens?
		public RuleCall getPp_tokensParserRuleCall_6_1() { return cPp_tokensParserRuleCall_6_1; }

		//new_line
		public RuleCall getNew_lineParserRuleCall_6_2() { return cNew_lineParserRuleCall_6_2; }

		//"#" new_line
		public Group getGroup_7() { return cGroup_7; }

		//"#"
		public Keyword getNumberSignKeyword_7_0() { return cNumberSignKeyword_7_0; }

		//new_line
		public RuleCall getNew_lineParserRuleCall_7_1() { return cNew_lineParserRuleCall_7_1; }
	}

	public class LparenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "lparen");
		private final Keyword cLeftParenthesisKeyword = (Keyword)rule.eContents().get(1);
		
		//lparen:
		//	"(";
		public ParserRule getRule() { return rule; }

		//"("
		public Keyword getLeftParenthesisKeyword() { return cLeftParenthesisKeyword; }
	}

	public class Replacement_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "replacement_list");
		private final RuleCall cPp_tokensParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//replacement_list:
		//	pp_tokens?;
		public ParserRule getRule() { return rule; }

		//pp_tokens?
		public RuleCall getPp_tokensParserRuleCall() { return cPp_tokensParserRuleCall; }
	}

	public class Pp_tokensElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "pp_tokens");
		private final RuleCall cPreprocessing_tokenParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//pp_tokens:
		//	preprocessing_token+;
		public ParserRule getRule() { return rule; }

		//preprocessing_token+
		public RuleCall getPreprocessing_tokenParserRuleCall() { return cPreprocessing_tokenParserRuleCall; }
	}

	public class SIGNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SIGN");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//SIGN:
		//	"+" | "-";
		public ParserRule getRule() { return rule; }

		//"+" | "-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}

	public class TokenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Token");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLITERALTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPPNUMBERTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cKEYWORDTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cPPOPorPUNCTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// LEX.TOKEN
		//Token:
		//	LITERAL | PPNUMBER | KEYWORD | PPOPorPUNC;
		public ParserRule getRule() { return rule; }

		//LITERAL | PPNUMBER | KEYWORD | PPOPorPUNC
		public Alternatives getAlternatives() { return cAlternatives; }

		//LITERAL
		public RuleCall getLITERALTerminalRuleCall_0() { return cLITERALTerminalRuleCall_0; }

		//PPNUMBER
		public RuleCall getPPNUMBERTerminalRuleCall_1() { return cPPNUMBERTerminalRuleCall_1; }

		//KEYWORD
		public RuleCall getKEYWORDTerminalRuleCall_2() { return cKEYWORDTerminalRuleCall_2; }

		//PPOPorPUNC
		public RuleCall getPPOPorPUNCTerminalRuleCall_3() { return cPPOPorPUNCTerminalRuleCall_3; }
	}
	
	
	private ModelElements pModel;
	private GreetingElements pGreeting;
	private New_lineElements pNew_line;
	private Preprocessing_fileElements pPreprocessing_file;
	private GroupElements pGroup;
	private Group_partElements pGroup_part;
	private If_actionElements pIf_action;
	private If_groupElements pIf_group;
	private Elif_groupsElements pElif_groups;
	private Elif_groupElements pElif_group;
	private StatementElements pStatement;
	private Iteration_statementElements pIteration_statement;
	private For_init_statementElements pFor_init_statement;
	private Simple_declarationElements pSimple_declaration;
	private Expression_statementElements pExpression_statement;
	private Compound_statementElements pCompound_statement;
	private Statement_seqElements pStatement_seq;
	private Selection_statementElements pSelection_statement;
	private ConditionElements pCondition;
	private Jump_statementElements pJump_statement;
	private Declaration_statementElements pDeclaration_statement;
	private Block_declarationElements pBlock_declaration;
	private Constant_expressionElements pConstant_expression;
	private Conditional_expressionElements pConditional_expression;
	private Logical_or_expressionElements pLogical_or_expression;
	private Logical_and_expressionElements pLogical_and_expression;
	private Inclusive_or_expressionElements pInclusive_or_expression;
	private Exclusive_or_expressionElements pExclusive_or_expression;
	private And_expressionElements pAnd_expression;
	private Equality_expressionElements pEquality_expression;
	private Relational_expressionElements pRelational_expression;
	private ExpressionElements pExpression;
	private Assignment_expressionElements pAssignment_expression;
	private TerminalRule tHEADERNAME;
	private Preprocessing_tokenElements pPreprocessing_token;
	private Else_groupElements pElse_group;
	private Endif_lineElements pEndif_line;
	private Control_lineElements pControl_line;
	private LparenElements pLparen;
	private Replacement_listElements pReplacement_list;
	private Pp_tokensElements pPp_tokens;
	private SIGNElements pSIGN;
	private TerminalRule tINTEGERLITERAL;
	private TerminalRule tBOOLEANLITERAL;
	private TerminalRule tPOINTERLITERAL;
	private TokenElements pToken;
	private TerminalRule tPPNUMBER;
	private TerminalRule tLITERAL;
	private TerminalRule tKEYWORD;
	private TerminalRule tPPOPorPUNC;
	private TerminalRule tIDENTIFIER;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// *
	// * SO FAR
	// * 
	// * LEX.PPNUMBER     [OK]
	// * LEX.NAME         [OK]
	// * LEX.KEY          [OK]
	// * LEX.OPERATORS    [OK]
	// * Lex.Token        [OK]
	// *
	// * / Model:
	//	greetings+=statement;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Greeting:
	//	"Hello" name=ID "!";
	public GreetingElements getGreetingAccess() {
		return (pGreeting != null) ? pGreeting : (pGreeting = new GreetingElements());
	}
	
	public ParserRule getGreetingRule() {
		return getGreetingAccess().getRule();
	}

	//new_line:
	//	"\n" | "\r\n";
	public New_lineElements getNew_lineAccess() {
		return (pNew_line != null) ? pNew_line : (pNew_line = new New_lineElements());
	}
	
	public ParserRule getNew_lineRule() {
		return getNew_lineAccess().getRule();
	}

	//preprocessing_file:
	//	group?;
	public Preprocessing_fileElements getPreprocessing_fileAccess() {
		return (pPreprocessing_file != null) ? pPreprocessing_file : (pPreprocessing_file = new Preprocessing_fileElements());
	}
	
	public ParserRule getPreprocessing_fileRule() {
		return getPreprocessing_fileAccess().getRule();
	}

	//group:
	//	group_part+;
	public GroupElements getGroupAccess() {
		return (pGroup != null) ? pGroup : (pGroup = new GroupElements());
	}
	
	public ParserRule getGroupRule() {
		return getGroupAccess().getRule();
	}

	//group_part:
	//	pp_tokens? new_line | if_action | control_line;
	public Group_partElements getGroup_partAccess() {
		return (pGroup_part != null) ? pGroup_part : (pGroup_part = new Group_partElements());
	}
	
	public ParserRule getGroup_partRule() {
		return getGroup_partAccess().getRule();
	}

	//if_action:
	//	if_group elif_groups? else_group? endif_line;
	public If_actionElements getIf_actionAccess() {
		return (pIf_action != null) ? pIf_action : (pIf_action = new If_actionElements());
	}
	
	public ParserRule getIf_actionRule() {
		return getIf_actionAccess().getRule();
	}

	//if_group:
	//	"#if" constant_expression new_line group? | "#ifdef" IDENTIFIER new_line group? | "#ifndef" IDENTIFIER new_line
	//	group?;
	public If_groupElements getIf_groupAccess() {
		return (pIf_group != null) ? pIf_group : (pIf_group = new If_groupElements());
	}
	
	public ParserRule getIf_groupRule() {
		return getIf_groupAccess().getRule();
	}

	//elif_groups:
	//	elif_group+;
	public Elif_groupsElements getElif_groupsAccess() {
		return (pElif_groups != null) ? pElif_groups : (pElif_groups = new Elif_groupsElements());
	}
	
	public ParserRule getElif_groupsRule() {
		return getElif_groupsAccess().getRule();
	}

	//elif_group:
	//	"#elif" constant_expression new_line group?;
	public Elif_groupElements getElif_groupAccess() {
		return (pElif_group != null) ? pElif_group : (pElif_group = new Elif_groupElements());
	}
	
	public ParserRule getElif_groupRule() {
		return getElif_groupAccess().getRule();
	}

	//// A.5
	//statement:
	//	expression_statement | compound_statement | jump_statement | declaration_statement | selection_statement;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//iteration_statement:
	//	"while (" condition ")" statement | "do" statement "while (" expression ");" | "for ( " for_init_statement condition?
	//	";" expression? ")" statement;
	public Iteration_statementElements getIteration_statementAccess() {
		return (pIteration_statement != null) ? pIteration_statement : (pIteration_statement = new Iteration_statementElements());
	}
	
	public ParserRule getIteration_statementRule() {
		return getIteration_statementAccess().getRule();
	}

	//for_init_statement:
	//	expression_statement | simple_declaration;
	public For_init_statementElements getFor_init_statementAccess() {
		return (pFor_init_statement != null) ? pFor_init_statement : (pFor_init_statement = new For_init_statementElements());
	}
	
	public ParserRule getFor_init_statementRule() {
		return getFor_init_statementAccess().getRule();
	}

	//simple_declaration:
	//	"int a = 1;";
	public Simple_declarationElements getSimple_declarationAccess() {
		return (pSimple_declaration != null) ? pSimple_declaration : (pSimple_declaration = new Simple_declarationElements());
	}
	
	public ParserRule getSimple_declarationRule() {
		return getSimple_declarationAccess().getRule();
	}

	//expression_statement:
	//	expression?;
	public Expression_statementElements getExpression_statementAccess() {
		return (pExpression_statement != null) ? pExpression_statement : (pExpression_statement = new Expression_statementElements());
	}
	
	public ParserRule getExpression_statementRule() {
		return getExpression_statementAccess().getRule();
	}

	//compound_statement:
	//	"{" statement_seq? "}";
	public Compound_statementElements getCompound_statementAccess() {
		return (pCompound_statement != null) ? pCompound_statement : (pCompound_statement = new Compound_statementElements());
	}
	
	public ParserRule getCompound_statementRule() {
		return getCompound_statementAccess().getRule();
	}

	//statement_seq:
	//	statement+;
	public Statement_seqElements getStatement_seqAccess() {
		return (pStatement_seq != null) ? pStatement_seq : (pStatement_seq = new Statement_seqElements());
	}
	
	public ParserRule getStatement_seqRule() {
		return getStatement_seqAccess().getRule();
	}

	//selection_statement:
	//	"if (" condition ")" statement | "if (" condition ")" statement | "switch (" condition ")" statement;
	public Selection_statementElements getSelection_statementAccess() {
		return (pSelection_statement != null) ? pSelection_statement : (pSelection_statement = new Selection_statementElements());
	}
	
	public ParserRule getSelection_statementRule() {
		return getSelection_statementAccess().getRule();
	}

	//// TODO(condition')
	//condition:
	//	expression;
	public ConditionElements getConditionAccess() {
		return (pCondition != null) ? pCondition : (pCondition = new ConditionElements());
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}

	//jump_statement:
	//	"break;" | "continue;" | "return" expression? ";" | "goto" IDENTIFIER ";";
	public Jump_statementElements getJump_statementAccess() {
		return (pJump_statement != null) ? pJump_statement : (pJump_statement = new Jump_statementElements());
	}
	
	public ParserRule getJump_statementRule() {
		return getJump_statementAccess().getRule();
	}

	//declaration_statement:
	//	block_declaration;
	public Declaration_statementElements getDeclaration_statementAccess() {
		return (pDeclaration_statement != null) ? pDeclaration_statement : (pDeclaration_statement = new Declaration_statementElements());
	}
	
	public ParserRule getDeclaration_statementRule() {
		return getDeclaration_statementAccess().getRule();
	}

	//// TODO
	//block_declaration:
	//	"==block_declaration==";
	public Block_declarationElements getBlock_declarationAccess() {
		return (pBlock_declaration != null) ? pBlock_declaration : (pBlock_declaration = new Block_declarationElements());
	}
	
	public ParserRule getBlock_declarationRule() {
		return getBlock_declarationAccess().getRule();
	}

	//// TODO(constant_expression)
	//constant_expression:
	//	conditional_expression;
	public Constant_expressionElements getConstant_expressionAccess() {
		return (pConstant_expression != null) ? pConstant_expression : (pConstant_expression = new Constant_expressionElements());
	}
	
	public ParserRule getConstant_expressionRule() {
		return getConstant_expressionAccess().getRule();
	}

	//conditional_expression:
	//	logical_or_expression | logical_or_expression "?" expression ":" assignment_expression;
	public Conditional_expressionElements getConditional_expressionAccess() {
		return (pConditional_expression != null) ? pConditional_expression : (pConditional_expression = new Conditional_expressionElements());
	}
	
	public ParserRule getConditional_expressionRule() {
		return getConditional_expressionAccess().getRule();
	}

	//logical_or_expression:
	//	logical_and_expression ("||" logical_and_expression)*;
	public Logical_or_expressionElements getLogical_or_expressionAccess() {
		return (pLogical_or_expression != null) ? pLogical_or_expression : (pLogical_or_expression = new Logical_or_expressionElements());
	}
	
	public ParserRule getLogical_or_expressionRule() {
		return getLogical_or_expressionAccess().getRule();
	}

	//logical_and_expression:
	//	inclusive_or_expression ("&&" inclusive_or_expression)*;
	public Logical_and_expressionElements getLogical_and_expressionAccess() {
		return (pLogical_and_expression != null) ? pLogical_and_expression : (pLogical_and_expression = new Logical_and_expressionElements());
	}
	
	public ParserRule getLogical_and_expressionRule() {
		return getLogical_and_expressionAccess().getRule();
	}

	//inclusive_or_expression:
	//	exclusive_or_expression ("|" exclusive_or_expression)*;
	public Inclusive_or_expressionElements getInclusive_or_expressionAccess() {
		return (pInclusive_or_expression != null) ? pInclusive_or_expression : (pInclusive_or_expression = new Inclusive_or_expressionElements());
	}
	
	public ParserRule getInclusive_or_expressionRule() {
		return getInclusive_or_expressionAccess().getRule();
	}

	//exclusive_or_expression:
	//	and_expression ("^" and_expression)*;
	public Exclusive_or_expressionElements getExclusive_or_expressionAccess() {
		return (pExclusive_or_expression != null) ? pExclusive_or_expression : (pExclusive_or_expression = new Exclusive_or_expressionElements());
	}
	
	public ParserRule getExclusive_or_expressionRule() {
		return getExclusive_or_expressionAccess().getRule();
	}

	//and_expression:
	//	equality_expression ("&" equality_expression)*;
	public And_expressionElements getAnd_expressionAccess() {
		return (pAnd_expression != null) ? pAnd_expression : (pAnd_expression = new And_expressionElements());
	}
	
	public ParserRule getAnd_expressionRule() {
		return getAnd_expressionAccess().getRule();
	}

	//equality_expression:
	//	relational_expression (("==" | "!=") relational_expression)*;
	public Equality_expressionElements getEquality_expressionAccess() {
		return (pEquality_expression != null) ? pEquality_expression : (pEquality_expression = new Equality_expressionElements());
	}
	
	public ParserRule getEquality_expressionRule() {
		return getEquality_expressionAccess().getRule();
	}

	//relational_expression:
	//	"==rel==";
	public Relational_expressionElements getRelational_expressionAccess() {
		return (pRelational_expression != null) ? pRelational_expression : (pRelational_expression = new Relational_expressionElements());
	}
	
	public ParserRule getRelational_expressionRule() {
		return getRelational_expressionAccess().getRule();
	}

	//expression:
	//	"==expression==";
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//assignment_expression:
	//	"==assignment==";
	public Assignment_expressionElements getAssignment_expressionAccess() {
		return (pAssignment_expression != null) ? pAssignment_expression : (pAssignment_expression = new Assignment_expressionElements());
	}
	
	public ParserRule getAssignment_expressionRule() {
		return getAssignment_expressionAccess().getRule();
	}

	//// TODO(): preprocessing_token
	//terminal HEADERNAME:
	//	STRING | "<" ("a".."z" | "A".."Z" | ".")+ ">";
	public TerminalRule getHEADERNAMERule() {
		return (tHEADERNAME != null) ? tHEADERNAME : (tHEADERNAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEADERNAME"));
	} 

	//preprocessing_token:
	//	IDENTIFIER | HEADERNAME | PPNUMBER | //	CHARLITERAL|
	//	PPOPorPUNC;
	public Preprocessing_tokenElements getPreprocessing_tokenAccess() {
		return (pPreprocessing_token != null) ? pPreprocessing_token : (pPreprocessing_token = new Preprocessing_tokenElements());
	}
	
	public ParserRule getPreprocessing_tokenRule() {
		return getPreprocessing_tokenAccess().getRule();
	}

	//else_group:
	//	"#else" new_line group?;
	public Else_groupElements getElse_groupAccess() {
		return (pElse_group != null) ? pElse_group : (pElse_group = new Else_groupElements());
	}
	
	public ParserRule getElse_groupRule() {
		return getElse_groupAccess().getRule();
	}

	//endif_line:
	//	"#endif" new_line;
	public Endif_lineElements getEndif_lineAccess() {
		return (pEndif_line != null) ? pEndif_line : (pEndif_line = new Endif_lineElements());
	}
	
	public ParserRule getEndif_lineRule() {
		return getEndif_lineAccess().getRule();
	}

	//control_line:
	//	"#include" pp_tokens new_line | "#define" IDENTIFIER replacement_list new_line | "#define" IDENTIFIER lparen
	//	IDENTIFIER? ")" replacement_list new_line | "#undef" IDENTIFIER new_line | "#line" pp_tokens new_line | "#error"
	//	pp_tokens? new_line | "#pragma" pp_tokens? new_line | "#" new_line;
	public Control_lineElements getControl_lineAccess() {
		return (pControl_line != null) ? pControl_line : (pControl_line = new Control_lineElements());
	}
	
	public ParserRule getControl_lineRule() {
		return getControl_lineAccess().getRule();
	}

	//lparen:
	//	"(";
	public LparenElements getLparenAccess() {
		return (pLparen != null) ? pLparen : (pLparen = new LparenElements());
	}
	
	public ParserRule getLparenRule() {
		return getLparenAccess().getRule();
	}

	//replacement_list:
	//	pp_tokens?;
	public Replacement_listElements getReplacement_listAccess() {
		return (pReplacement_list != null) ? pReplacement_list : (pReplacement_list = new Replacement_listElements());
	}
	
	public ParserRule getReplacement_listRule() {
		return getReplacement_listAccess().getRule();
	}

	//pp_tokens:
	//	preprocessing_token+;
	public Pp_tokensElements getPp_tokensAccess() {
		return (pPp_tokens != null) ? pPp_tokens : (pPp_tokens = new Pp_tokensElements());
	}
	
	public ParserRule getPp_tokensRule() {
		return getPp_tokensAccess().getRule();
	}

	//SIGN:
	//	"+" | "-";
	public SIGNElements getSIGNAccess() {
		return (pSIGN != null) ? pSIGN : (pSIGN = new SIGNElements());
	}
	
	public ParserRule getSIGNRule() {
		return getSIGNAccess().getRule();
	}

	//// lex.charset
	//// lex.icon
	//terminal INTEGERLITERAL:
	//	"1".."9" "0".."9"* (("u" | "U") ("l" | "L" | "ll" | "LL")? | ("l" | "L" | "ll" | "LL") ("u" | "U")?)? | "0" "0".."7"*
	//	(("u" | "U") ("l" | "L" | "ll" | "LL")? | ("l" | "L" | "ll" | "LL") ("u" | "U")?)? | ("0x" | "0X") ("0".."9" |
	//	"a".."f" | "A".."F")+ (("u" | "U") ("l" | "L" | "ll" | "LL")? | ("l" | "L" | "ll" | "LL") ("u" | "U")?)?;
	public TerminalRule getINTEGERLITERALRule() {
		return (tINTEGERLITERAL != null) ? tINTEGERLITERAL : (tINTEGERLITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INTEGERLITERAL"));
	} 

	//// lex.bool
	//terminal BOOLEANLITERAL:
	//	"false" | "true";
	public TerminalRule getBOOLEANLITERALRule() {
		return (tBOOLEANLITERAL != null) ? tBOOLEANLITERAL : (tBOOLEANLITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLEANLITERAL"));
	} 

	//// lex.nullptr
	//terminal POINTERLITERAL:
	//	"nullptr";
	public TerminalRule getPOINTERLITERALRule() {
		return (tPOINTERLITERAL != null) ? tPOINTERLITERAL : (tPOINTERLITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "POINTERLITERAL"));
	} 

	//// LEX.TOKEN
	//Token:
	//	LITERAL | PPNUMBER | KEYWORD | PPOPorPUNC;
	public TokenElements getTokenAccess() {
		return (pToken != null) ? pToken : (pToken = new TokenElements());
	}
	
	public ParserRule getTokenRule() {
		return getTokenAccess().getRule();
	}

	//// LEX.PPNUMBER === LEFT RECURSION REMOVED
	//terminal PPNUMBER:
	//	("0".."9" | "." "0".."9") ("0".."9" | ("a".."z" | "A".."Z" | "_") | "e" ("+" | "-") | "E" ("+" | "-") | ".")*;
	public TerminalRule getPPNUMBERRule() {
		return (tPPNUMBER != null) ? tPPNUMBER : (tPPNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PPNUMBER"));
	} 

	//// LEX _ NAME === LEFT RECURSION REMOVED
	//terminal LITERAL:
	//	INTEGERLITERAL | BOOLEANLITERAL | POINTERLITERAL;
	public TerminalRule getLITERALRule() {
		return (tLITERAL != null) ? tLITERAL : (tLITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LITERAL"));
	} 

	//// LEX.KEY
	//terminal KEYWORD:
	//	"alignas" | "alignof" | "asm" | "auto" | "bool" | "break" | "case" | "catch" | "char" | "char16_t" | "char32_t" |
	//	"class" | "const" | "constexpr" | "const_cast" | "continue" | "decltype" | "default" | "delete" | "do" | "double" |
	//	"dynamic_cast" | "else" | "enum" | "explicit" | "export" | "extern" | "false" | "float" | "for" | "friend" | "goto" |
	//	"if" | "inline" | "int" | "long" | "mutable" | "namespace" | "new" | "noexcept" | "nullptr" | "operator" | "private" |
	//	"protected" | "public" | "register" | "reinterpret_cast" | "return" | "short" | "signed" | "sizeof" | "static" |
	//	"static_assert" | "static_cast" | "struct" | "switch" | "template" | "this" | "thread_local" | "throw" | "true" |
	//	"try" | "typedef" | "typeid" | "typename" | "union" | "unsigned" | "using" | "virtual" | "void" | "volatile" |
	//	"wchar_t" | "while";
	public TerminalRule getKEYWORDRule() {
		return (tKEYWORD != null) ? tKEYWORD : (tKEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "KEYWORD"));
	} 

	//// LEX.OPERATORS
	//// TODO(rigelbm): operator-token and punctuator
	//terminal PPOPorPUNC:
	//	"{" | "}" | "[" | "]" | "#" | "##" | "(" | ")" | "<:" | ":>" | "<%" | "%>" | "%:" | "%:%:" | ";" | ":" | "..." | "new"
	//	| "delete" | "?" | "::" | "." | ".*" | "+" | "-" | "*" | "/" | "%" | "^" | "&" | "|" | "~" | "!" | "=" | "<" | ">" |
	//	"+=" | "-=" | "*=" | "/=" | "%=" | "^=" | "&=" | "|=" | "<<" | ">>" | "<<=" | ">>=" | "==" | "!=" | "<=" | ">=" | "&&"
	//	| "||" | "++" | "--" | "," | "->*" | "->" | "and" | "and_eq" | "bitand" | "bitor" | "compl" | "not" | "not_eq" | "or"
	//	| "or_eq" | "xor" | "xor_eq";
	public TerminalRule getPPOPorPUNCRule() {
		return (tPPOPorPUNC != null) ? tPPOPorPUNC : (tPPOPorPUNC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PPOPorPUNC"));
	} 

	//terminal IDENTIFIER:
	//	("a".."z" | "A".."Z" | "_") ("0".."9" | "A".."Z" | "a".."z" | "_")*;
	public TerminalRule getIDENTIFIERRule() {
		return (tIDENTIFIER != null) ? tIDENTIFIER : (tIDENTIFIER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IDENTIFIER"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
