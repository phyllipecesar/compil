/*
* generated by Xtext
*/
package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final RuleCall cBodyParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// *
		// * SO FAR
		// * 
		// * LEX.PPNUMBER     [OK]
		// * LEX.NAME         [OK]
		// * LEX.KEY          [OK]
		// * LEX.OPERATORS    [OK]
		// * Lex.Token        [OK]
		// *
		// * / Model:
		//	Body;
		public ParserRule getRule() { return rule; }

		//Body
		public RuleCall getBodyParserRuleCall() { return cBodyParserRuleCall; }
	}

	public class BodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Body");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFuncoesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFuncoesFunctionDeclarationParserRuleCall_1_0 = (RuleCall)cFuncoesAssignment_1.eContents().get(0);
		
		//Body:
		//	{Body} funcoes+=FunctionDeclaration*;
		public ParserRule getRule() { return rule; }

		//{Body} funcoes+=FunctionDeclaration*
		public Group getGroup() { return cGroup; }

		//{Body}
		public Action getBodyAction_0() { return cBodyAction_0; }

		//funcoes+=FunctionDeclaration*
		public Assignment getFuncoesAssignment_1() { return cFuncoesAssignment_1; }

		//FunctionDeclaration
		public RuleCall getFuncoesFunctionDeclarationParserRuleCall_1_0() { return cFuncoesFunctionDeclarationParserRuleCall_1_0; }
	}

	public class FunctionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParamsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParamsParameterParserRuleCall_4_0_0 = (RuleCall)cParamsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParamsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_4_1_1_0 = (RuleCall)cParamsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cEscopoAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cEscopoStatementParserRuleCall_7_0 = (RuleCall)cEscopoAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//FunctionDeclaration:
		//	{FunctionDeclaration} type=Type name=ID "(" (params+=Parameter ("," params+=Parameter)*)? ")" "{" escopo=statement?
		//	"}";
		public ParserRule getRule() { return rule; }

		//{FunctionDeclaration} type=Type name=ID "(" (params+=Parameter ("," params+=Parameter)*)? ")" "{" escopo=statement? "}"
		public Group getGroup() { return cGroup; }

		//{FunctionDeclaration}
		public Action getFunctionDeclarationAction_0() { return cFunctionDeclarationAction_0; }

		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(params+=Parameter ("," params+=Parameter)*)?
		public Group getGroup_4() { return cGroup_4; }

		//params+=Parameter
		public Assignment getParamsAssignment_4_0() { return cParamsAssignment_4_0; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_4_0_0() { return cParamsParameterParserRuleCall_4_0_0; }

		//("," params+=Parameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//params+=Parameter
		public Assignment getParamsAssignment_4_1_1() { return cParamsAssignment_4_1_1; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_4_1_1_0() { return cParamsParameterParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//escopo=statement?
		public Assignment getEscopoAssignment_7() { return cEscopoAssignment_7; }

		//statement
		public RuleCall getEscopoStatementParserRuleCall_7_0() { return cEscopoStatementParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Parameter:
		//	{Parameter} type=Type name=ID;
		public ParserRule getRule() { return rule; }

		//{Parameter} type=Type name=ID
		public Group getGroup() { return cGroup; }

		//{Parameter}
		public Action getParameterAction_0() { return cParameterAction_0; }

		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class VarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVarDeclAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//VarDecl:
		//	{VarDecl} type=Type name=ID;
		public ParserRule getRule() { return rule; }

		//{VarDecl} type=Type name=ID
		public Group getGroup() { return cGroup; }

		//{VarDecl}
		public Action getVarDeclAction_0() { return cVarDeclAction_0; }

		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cStsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStsSimple_type_specifierParserRuleCall_1_0 = (RuleCall)cStsAssignment_1.eContents().get(0);
		
		//Type:
		//	{Type} sts=simple_type_specifier;
		public ParserRule getRule() { return rule; }

		//{Type} sts=simple_type_specifier
		public Group getGroup() { return cGroup; }

		//{Type}
		public Action getTypeAction_0() { return cTypeAction_0; }

		//sts=simple_type_specifier
		public Assignment getStsAssignment_1() { return cStsAssignment_1; }

		//simple_type_specifier
		public RuleCall getStsSimple_type_specifierParserRuleCall_1_0() { return cStsSimple_type_specifierParserRuleCall_1_0; }
	}

	public class Simple_type_specifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "simple_type_specifier");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cIntTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNameAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cNameIntKeyword_0_1_0 = (Keyword)cNameAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBoolTypeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cNameAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cNameBoolKeyword_1_1_0 = (Keyword)cNameAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cUnknownTypeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cNameAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_1_0 = (RuleCall)cNameAssignment_2_1.eContents().get(0);
		
		//simple_type_specifier:
		//	{IntType} name="int" | {BoolType} name="bool" | {UnknownType} name=ID;
		public ParserRule getRule() { return rule; }

		//{IntType} name="int" | {BoolType} name="bool" | {UnknownType} name=ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//{IntType} name="int"
		public Group getGroup_0() { return cGroup_0; }

		//{IntType}
		public Action getIntTypeAction_0_0() { return cIntTypeAction_0_0; }

		//name="int"
		public Assignment getNameAssignment_0_1() { return cNameAssignment_0_1; }

		//"int"
		public Keyword getNameIntKeyword_0_1_0() { return cNameIntKeyword_0_1_0; }

		//{BoolType} name="bool"
		public Group getGroup_1() { return cGroup_1; }

		//{BoolType}
		public Action getBoolTypeAction_1_0() { return cBoolTypeAction_1_0; }

		//name="bool"
		public Assignment getNameAssignment_1_1() { return cNameAssignment_1_1; }

		//"bool"
		public Keyword getNameBoolKeyword_1_1_0() { return cNameBoolKeyword_1_1_0; }

		//{UnknownType} name=ID
		public Group getGroup_2() { return cGroup_2; }

		//{UnknownType}
		public Action getUnknownTypeAction_2_0() { return cUnknownTypeAction_2_0; }

		//name=ID
		public Assignment getNameAssignment_2_1() { return cNameAssignment_2_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_1_0() { return cNameIDTerminalRuleCall_2_1_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStatementAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVariavelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariavelDeclaration_statementParserRuleCall_1_0 = (RuleCall)cVariavelAssignment_1.eContents().get(0);
		
		////// A.5
		////	selection_statement
		//statement: //	expression_statement|
		////	compound_statement|
		////	jump_statement|
		//	{statement} variavel=declaration_statement;
		public ParserRule getRule() { return rule; }

		////	expression_statement|
		////	compound_statement|
		////	jump_statement|
		//{statement} variavel=declaration_statement
		public Group getGroup() { return cGroup; }

		////	expression_statement|
		////	compound_statement|
		////	jump_statement|
		//{statement}
		public Action getStatementAction_0() { return cStatementAction_0; }

		//variavel=declaration_statement
		public Assignment getVariavelAssignment_1() { return cVariavelAssignment_1; }

		//declaration_statement
		public RuleCall getVariavelDeclaration_statementParserRuleCall_1_0() { return cVariavelDeclaration_statementParserRuleCall_1_0; }
	}

	public class Simple_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "simple_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariavelAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariavelVarDeclParserRuleCall_0_0 = (RuleCall)cVariavelAssignment_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		////iteration_statement:
		////	'while (' condition ')' statement|
		////	'do' statement 'while ('expression ');'|
		////	'for ( 'for_init_statement condition? ';' expression? ')' statement;
		////
		////for_init_statement:
		////	expression_statement|simple_declaration;
		////
		//simple_declaration:
		//	variavel=VarDecl ";";
		public ParserRule getRule() { return rule; }

		//variavel=VarDecl ";"
		public Group getGroup() { return cGroup; }

		//variavel=VarDecl
		public Assignment getVariavelAssignment_0() { return cVariavelAssignment_0; }

		//VarDecl
		public RuleCall getVariavelVarDeclParserRuleCall_0_0() { return cVariavelVarDeclParserRuleCall_0_0; }

		//";"
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class Declaration_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "declaration_statement");
		private final Assignment cVariaveisAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVariaveisBlock_declarationParserRuleCall_0 = (RuleCall)cVariaveisAssignment.eContents().get(0);
		
		////expression_statement:
		////	expression?
		////;
		////compound_statement:
		////	'{' statement_seq? '}';
		////	
		////statement_seq:
		////	(statement)+;
		////selection_statement:
		////	'if (' condition ')' statement |
		////	'if (' condition ')' statement |
		////	'switch (' condition ')' statement;
		////
		////
		////// TODO(condition')
		////condition:
		////	expression
		////;
		////jump_statement:
		////	'break;'|
		////	'continue;'|
		////	'return' expression?';'|
		////	'goto' ID';'
		////;
		//declaration_statement:
		//	variaveis+=block_declaration+;
		public ParserRule getRule() { return rule; }

		//variaveis+=block_declaration+
		public Assignment getVariaveisAssignment() { return cVariaveisAssignment; }

		//block_declaration
		public RuleCall getVariaveisBlock_declarationParserRuleCall_0() { return cVariaveisBlock_declarationParserRuleCall_0; }
	}

	public class Block_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "block_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlock_declarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVariavelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVariavelSimple_declarationParserRuleCall_1_0 = (RuleCall)cVariavelAssignment_1.eContents().get(0);
		
		////
		////// TODO
		//block_declaration:
		//	{block_declaration} variavel=simple_declaration;
		public ParserRule getRule() { return rule; }

		//{block_declaration} variavel=simple_declaration
		public Group getGroup() { return cGroup; }

		//{block_declaration}
		public Action getBlock_declarationAction_0() { return cBlock_declarationAction_0; }

		//variavel=simple_declaration
		public Assignment getVariavelAssignment_1() { return cVariavelAssignment_1; }

		//simple_declaration
		public RuleCall getVariavelSimple_declarationParserRuleCall_1_0() { return cVariavelSimple_declarationParserRuleCall_1_0; }
	}

	public class Constant_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "constant_expression");
		private final RuleCall cConditional_expressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//constant_expression:
		//	conditional_expression;
		public ParserRule getRule() { return rule; }

		//conditional_expression
		public RuleCall getConditional_expressionParserRuleCall() { return cConditional_expressionParserRuleCall; }
	}

	public class Conditional_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "conditional_expression");
		private final Keyword cTODOKeyword = (Keyword)rule.eContents().get(1);
		
		/// * 	
		//conditional_expression:
		////	logical_or_expression |
		//	logical_or_expression ('?' expression ':' assignment_expression)?;
		//
		//logical_or_expression:
		//	logical_and_expression ('||' logical_and_expression )*;
		//
		//logical_and_expression:
		//	inclusive_or_expression ('&&' inclusive_or_expression)*;
		//
		//inclusive_or_expression:
		//	exclusive_or_expression ('|' exclusive_or_expression)*;
		//
		//exclusive_or_expression:
		//	and_expression ('^' and_expression)*;
		//
		//and_expression:
		//	equality_expression ('&' equality_expression)*;
		//
		//equality_expression:
		//	relational_expression (('==' | '!=') relational_expression)*;
		//
		//relational_expression:
		//	shift_expression (('<' | '>' | '<=' | '>=') shift_expression)*;
		//
		//shift_expression:
		//	additive_expression (('<<' | '>>') additive_expression)*;
		//
		//additive_expression:
		//	multiplicative_expression (SIGN multiplicative_expression)*;
		//
		//multiplicative_expression:
		//	pm_expression (('*' | '/' | '%') pm_expression)*;
		//
		//pm_expression:
		//	cast_expression (('.*' | '->*') cast_expression)*;
		//
		//cast_expression:
		//	('(' ID ')')* unary_expression;
		//	//TODO replace ID with type_id, I guess
		//
		//unary_expression:
		//	('sizeof')* postfix_expression |
		//	('sizeof')* ('++' | '--' | unary_operator ) cast_expression |
		//	'sizeof' '(' ID ')' |//TODO replace ID with type_id
		//	('sizeof')* new_expression |
		//	('sizeof')* delete_expression;
		//
		//postfix_expression:
		//	primary_expression ('[' expression ']' |
		//						'(' expression_list? ')' |
		//						'.' 'template'? (ID) | //TODO replace ID with id_expression
		//						'->' 'template'? (ID) | //TODO replace ID with id_expression
		//						'++' |
		//						'--')*;
		//
		//primary_expression:
		//	'==primary==';
		//
		//pseudo_destructor_name:
		//	'::'? nested_name_specifier? type_name '::' '~' type_name |
		//	'::'? nested_name_specifier => 'template' template_id '::' '~' type_name;
		//
		//nested_name_specifier:
		//	class_or_namespace_name '::' nested_name_specifier?;
		////	class_or_namespace_name '::' => 'template' nested_name_specifier;
		//	
		//
		//class_or_namespace_name:
		//	class_name | namespace_name;
		//
		//class_name:
		//	ID | template_id;
		//
		//namespace_name:
		//	'==namespace==';
		//
		//type_name:
		//	'==type_name==';
		//
		//template_id:
		//	ID '<' template_argument_list? '>' 'class';
		//
		//template_argument_list:
		//	template_argument (',' template_argument)*;
		//
		//template_argument:
		//	assignment_expression |
		//	id_expression;
		//
		//id_expression:
		//	unqualified_id |
		//	qualified_id;
		//
		//unqualified_id:
		//	ID |
		//	operator_function_id |
		//	conversion_function_id |
		//	'~' class_name |
		//	template_id;
		//
		//operator_function_id:
		//	'operator' operator;
		//
		//operator:
		//	'new' | 'delete' | 'new[]' | 'delete[]' | '+' | '-' | '*' | '/' | '%' | '^' | '&' | '|' | '~' | '!' | '=' | '<' | '>' |
		//	'+=' | '-=' | '*=' | '/=' | '%=' | '^=' | '&=' | '|=' | '<<' | '>>' | '<<=' | '>>=' | '==' | '!=' | '<=' | '>=' | '&&' |
		//	'||' | '++' | '--' | ',' | '->*' | '->' | '()' | '[]';
		//
		//conversion_function_id:
		//	'operator' conversion_type_id;
		//
		//conversion_type_id:
		//	type_specifier_seq conversion_declarator?;
		//
		//conversion_declarator:
		//	'==conversion==';
		//
		//type_specifier_seq:
		//	type_specifier+;
		//
		//type_specifier:
		//	'==type_specifier==';
		//
		//qualified_id:
		//	'==qualified==';
		//
		//new_expression:
		//	'==new==';
		//
		//delete_expression:
		//	'==delete==';
		//
		//unary_operator:
		//	('*' | '&' | '+' | '-' | '!' | '~');
		//
		//expression_list:
		//	assignment_expression (',' assignment_expression)*;
		//
		//expression:
		//	'==expression==';
		//
		//assignment_expression:
		//	'==assignment==';
		//
		// * / conditional_expression:
		//	"TODO";
		public ParserRule getRule() { return rule; }

		//"TODO"
		public Keyword getTODOKeyword() { return cTODOKeyword; }
	}
	
	
	private ModelElements pModel;
	private BodyElements pBody;
	private FunctionDeclarationElements pFunctionDeclaration;
	private ParameterElements pParameter;
	private VarDeclElements pVarDecl;
	private TypeElements pType;
	private Simple_type_specifierElements pSimple_type_specifier;
	private StatementElements pStatement;
	private Simple_declarationElements pSimple_declaration;
	private Declaration_statementElements pDeclaration_statement;
	private Block_declarationElements pBlock_declaration;
	private Constant_expressionElements pConstant_expression;
	private Conditional_expressionElements pConditional_expression;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// *
	// * SO FAR
	// * 
	// * LEX.PPNUMBER     [OK]
	// * LEX.NAME         [OK]
	// * LEX.KEY          [OK]
	// * LEX.OPERATORS    [OK]
	// * Lex.Token        [OK]
	// *
	// * / Model:
	//	Body;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Body:
	//	{Body} funcoes+=FunctionDeclaration*;
	public BodyElements getBodyAccess() {
		return (pBody != null) ? pBody : (pBody = new BodyElements());
	}
	
	public ParserRule getBodyRule() {
		return getBodyAccess().getRule();
	}

	//FunctionDeclaration:
	//	{FunctionDeclaration} type=Type name=ID "(" (params+=Parameter ("," params+=Parameter)*)? ")" "{" escopo=statement?
	//	"}";
	public FunctionDeclarationElements getFunctionDeclarationAccess() {
		return (pFunctionDeclaration != null) ? pFunctionDeclaration : (pFunctionDeclaration = new FunctionDeclarationElements());
	}
	
	public ParserRule getFunctionDeclarationRule() {
		return getFunctionDeclarationAccess().getRule();
	}

	//Parameter:
	//	{Parameter} type=Type name=ID;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//VarDecl:
	//	{VarDecl} type=Type name=ID;
	public VarDeclElements getVarDeclAccess() {
		return (pVarDecl != null) ? pVarDecl : (pVarDecl = new VarDeclElements());
	}
	
	public ParserRule getVarDeclRule() {
		return getVarDeclAccess().getRule();
	}

	//Type:
	//	{Type} sts=simple_type_specifier;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//simple_type_specifier:
	//	{IntType} name="int" | {BoolType} name="bool" | {UnknownType} name=ID;
	public Simple_type_specifierElements getSimple_type_specifierAccess() {
		return (pSimple_type_specifier != null) ? pSimple_type_specifier : (pSimple_type_specifier = new Simple_type_specifierElements());
	}
	
	public ParserRule getSimple_type_specifierRule() {
		return getSimple_type_specifierAccess().getRule();
	}

	////// A.5
	////	selection_statement
	//statement: //	expression_statement|
	////	compound_statement|
	////	jump_statement|
	//	{statement} variavel=declaration_statement;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	////iteration_statement:
	////	'while (' condition ')' statement|
	////	'do' statement 'while ('expression ');'|
	////	'for ( 'for_init_statement condition? ';' expression? ')' statement;
	////
	////for_init_statement:
	////	expression_statement|simple_declaration;
	////
	//simple_declaration:
	//	variavel=VarDecl ";";
	public Simple_declarationElements getSimple_declarationAccess() {
		return (pSimple_declaration != null) ? pSimple_declaration : (pSimple_declaration = new Simple_declarationElements());
	}
	
	public ParserRule getSimple_declarationRule() {
		return getSimple_declarationAccess().getRule();
	}

	////expression_statement:
	////	expression?
	////;
	////compound_statement:
	////	'{' statement_seq? '}';
	////	
	////statement_seq:
	////	(statement)+;
	////selection_statement:
	////	'if (' condition ')' statement |
	////	'if (' condition ')' statement |
	////	'switch (' condition ')' statement;
	////
	////
	////// TODO(condition')
	////condition:
	////	expression
	////;
	////jump_statement:
	////	'break;'|
	////	'continue;'|
	////	'return' expression?';'|
	////	'goto' ID';'
	////;
	//declaration_statement:
	//	variaveis+=block_declaration+;
	public Declaration_statementElements getDeclaration_statementAccess() {
		return (pDeclaration_statement != null) ? pDeclaration_statement : (pDeclaration_statement = new Declaration_statementElements());
	}
	
	public ParserRule getDeclaration_statementRule() {
		return getDeclaration_statementAccess().getRule();
	}

	////
	////// TODO
	//block_declaration:
	//	{block_declaration} variavel=simple_declaration;
	public Block_declarationElements getBlock_declarationAccess() {
		return (pBlock_declaration != null) ? pBlock_declaration : (pBlock_declaration = new Block_declarationElements());
	}
	
	public ParserRule getBlock_declarationRule() {
		return getBlock_declarationAccess().getRule();
	}

	//constant_expression:
	//	conditional_expression;
	public Constant_expressionElements getConstant_expressionAccess() {
		return (pConstant_expression != null) ? pConstant_expression : (pConstant_expression = new Constant_expressionElements());
	}
	
	public ParserRule getConstant_expressionRule() {
		return getConstant_expressionAccess().getRule();
	}

	/// * 	
	//conditional_expression:
	////	logical_or_expression |
	//	logical_or_expression ('?' expression ':' assignment_expression)?;
	//
	//logical_or_expression:
	//	logical_and_expression ('||' logical_and_expression )*;
	//
	//logical_and_expression:
	//	inclusive_or_expression ('&&' inclusive_or_expression)*;
	//
	//inclusive_or_expression:
	//	exclusive_or_expression ('|' exclusive_or_expression)*;
	//
	//exclusive_or_expression:
	//	and_expression ('^' and_expression)*;
	//
	//and_expression:
	//	equality_expression ('&' equality_expression)*;
	//
	//equality_expression:
	//	relational_expression (('==' | '!=') relational_expression)*;
	//
	//relational_expression:
	//	shift_expression (('<' | '>' | '<=' | '>=') shift_expression)*;
	//
	//shift_expression:
	//	additive_expression (('<<' | '>>') additive_expression)*;
	//
	//additive_expression:
	//	multiplicative_expression (SIGN multiplicative_expression)*;
	//
	//multiplicative_expression:
	//	pm_expression (('*' | '/' | '%') pm_expression)*;
	//
	//pm_expression:
	//	cast_expression (('.*' | '->*') cast_expression)*;
	//
	//cast_expression:
	//	('(' ID ')')* unary_expression;
	//	//TODO replace ID with type_id, I guess
	//
	//unary_expression:
	//	('sizeof')* postfix_expression |
	//	('sizeof')* ('++' | '--' | unary_operator ) cast_expression |
	//	'sizeof' '(' ID ')' |//TODO replace ID with type_id
	//	('sizeof')* new_expression |
	//	('sizeof')* delete_expression;
	//
	//postfix_expression:
	//	primary_expression ('[' expression ']' |
	//						'(' expression_list? ')' |
	//						'.' 'template'? (ID) | //TODO replace ID with id_expression
	//						'->' 'template'? (ID) | //TODO replace ID with id_expression
	//						'++' |
	//						'--')*;
	//
	//primary_expression:
	//	'==primary==';
	//
	//pseudo_destructor_name:
	//	'::'? nested_name_specifier? type_name '::' '~' type_name |
	//	'::'? nested_name_specifier => 'template' template_id '::' '~' type_name;
	//
	//nested_name_specifier:
	//	class_or_namespace_name '::' nested_name_specifier?;
	////	class_or_namespace_name '::' => 'template' nested_name_specifier;
	//	
	//
	//class_or_namespace_name:
	//	class_name | namespace_name;
	//
	//class_name:
	//	ID | template_id;
	//
	//namespace_name:
	//	'==namespace==';
	//
	//type_name:
	//	'==type_name==';
	//
	//template_id:
	//	ID '<' template_argument_list? '>' 'class';
	//
	//template_argument_list:
	//	template_argument (',' template_argument)*;
	//
	//template_argument:
	//	assignment_expression |
	//	id_expression;
	//
	//id_expression:
	//	unqualified_id |
	//	qualified_id;
	//
	//unqualified_id:
	//	ID |
	//	operator_function_id |
	//	conversion_function_id |
	//	'~' class_name |
	//	template_id;
	//
	//operator_function_id:
	//	'operator' operator;
	//
	//operator:
	//	'new' | 'delete' | 'new[]' | 'delete[]' | '+' | '-' | '*' | '/' | '%' | '^' | '&' | '|' | '~' | '!' | '=' | '<' | '>' |
	//	'+=' | '-=' | '*=' | '/=' | '%=' | '^=' | '&=' | '|=' | '<<' | '>>' | '<<=' | '>>=' | '==' | '!=' | '<=' | '>=' | '&&' |
	//	'||' | '++' | '--' | ',' | '->*' | '->' | '()' | '[]';
	//
	//conversion_function_id:
	//	'operator' conversion_type_id;
	//
	//conversion_type_id:
	//	type_specifier_seq conversion_declarator?;
	//
	//conversion_declarator:
	//	'==conversion==';
	//
	//type_specifier_seq:
	//	type_specifier+;
	//
	//type_specifier:
	//	'==type_specifier==';
	//
	//qualified_id:
	//	'==qualified==';
	//
	//new_expression:
	//	'==new==';
	//
	//delete_expression:
	//	'==delete==';
	//
	//unary_operator:
	//	('*' | '&' | '+' | '-' | '!' | '~');
	//
	//expression_list:
	//	assignment_expression (',' assignment_expression)*;
	//
	//expression:
	//	'==expression==';
	//
	//assignment_expression:
	//	'==assignment==';
	//
	// * / conditional_expression:
	//	"TODO";
	public Conditional_expressionElements getConditional_expressionAccess() {
		return (pConditional_expression != null) ? pConditional_expression : (pConditional_expression = new Conditional_expressionElements());
	}
	
	public ParserRule getConditional_expressionRule() {
		return getConditional_expressionAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
