grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate myDsl "http://www.xtext.org/example/mydsl/MyDsl"

/*
 * SO FAR
 * 
 * LEX.PPNUMBER     [OK]
 * LEX.NAME         [OK]
 * LEX.KEY          [OK]
 * LEX.OPERATORS    [OK]
 * Lex.Token        [OK]
 *
 */

Model:
 	Body;

Body:
	{Body} 
	preprocessing_file
	// (structs += StructDeclaration)* |
	// (classes += ClassDeclaration)* |
	// (structs += StructDeclaration)* |
	// (structs += StructDeclaration)* |
	( declarations += Declaration)*
	
;


// MODIFIEDS

Declaration:
	{Declaration} (
		
		variaveis = VarDecl |
		ditryD = Return |
		chamada = FunctionChamada ';' |
		funcao = FunctionDeclaration |

	dirtyE= SimpleOrFunctionDeclaration|
	dirtyA = BlockDeclaration |
	dirtyB = TemplateDeclaration |
	dirtyC = ExplicitInstantiation |
	dirtyD = ExplicitSpecialization |
	dirty = LinkageSpecification |
	dirty = NamespaceDefinition
	);
	
	
// namespace.def
NamespaceDefinition:
	'inline'? 'namespace' ID? '{' dirty = Declaration* '}';
	
// dcl.link
LinkageSpecification:
	{LKS} 'extern' STRING (dirty=Declaration | '{'dirty=Declaration* '}');


//

// INCLUDE, DEFINES

elif_group:
  '#elif' constant_expression group?;
  
constant_expression:
	conditional_expression;

conditional_expression:
		'TODO';
preprocessing_file:
	group?
;
	
HEADER_NAME:
	'<' (ID|'.')* '>' | STRING
;

preprocessing_token: 
	HEADER_NAME
//	PPNUMBER|
//	CHARLITERAL|

;
else_group:
	'#else'  group?
;
endif_line:
	'#endif'
;
control_line:
'#include' pp_tokens |
'#define' ID replacement_list |
'#define' ID lparen ID? ')' replacement_list |
'#undef' ID |
'#line' pp_tokens|
'#error' pp_tokens? |
'#pragma' pp_tokens? |
 '#';

lparen:
	'('
;
replacement_list:
	pp_tokens?
;
pp_tokens:
	 preprocessing_token+
;

group:
	group_part+
;

group_part:
	if_action |
	control_line;

if_action:
	if_group elif_groups? else_group? endif_line
;
if_group:
	'#if' constant_expression group?|
	'#ifdef' ID group?|
	'#ifndef' ID group?
;
elif_groups:
	elif_group+;


		
// FUNCTION
FunctionDeclaration returns FunctionDeclaration:
	{FunctionDeclaration} "const"? type=Type name=ID => "(" 
		(params+=Parameter  ("," params+=Parameter)* )?  ")" "{"	
			escopo = NoPtrStatement
	"}";
FunctionChamada:
	{FunctionChamada} name=ID'('(params+=ReturnExpr ("," params+=ReturnExpr)* )?  ')'
;
NoPtrStatement:
	{NoPtrStatement} (('break;' | (variaveis += VarDecl) | mudancas += NoPtrMudanca |  lixoV += NoPtrExpression | switches += NoPtrSelect |dirtyB += Return| dirty += Statement | dirtyV += FunctionChamada )*)
;

NoPtrMudanca:
	{NoPtrMudanca} name=ID ('=' expr=NoPtrExpression)
;
NoPtrExpression:
	{NoPtrExpression} left=NoPtrTerminalExpression (=> op=('&&'|'||'|'=='|'!=') right=NoPtrTerminalExpression)?	
;
	
NoPtrTerminalExpression:
  {NoPtrTerminalExpression} '!'* '(' inside=NoPtrExpression ')' |
  {Atomic} '!'* atomic=ReturnExpr
;
NoPtrSelect:
	{NoPtrSelect} name='switch' '(' expr=NoPtrExpression')' '{' cases += NoPtrCases* '}'
;
NoPtrCases:
	{DefaultCase} 'default' ':' v=NoPtrStatement |
	{CaseNormal} 'case' expr=NoPtrExpression ':' v=NoPtrStatement
	
;
Parameter:
	{Parameter} 'const' ? type=Type ('*'*|'&'*)  name=ID ('['INT?']')* ('=' '!'* expr=NoPtrExpression)?;

VarDecl:
	{VarDecl} 'const'? type=Type ('*'*|'&'*) name=ID ('['INT']')* ('=' '!'* expr=NoPtrExpression)?;

Type:
	{Type} sts = simple_type_specifier;

simple_type_specifier:
	{IntType} name="int"|
	{BooleanType} name="bool"|
	{StringType} name="string"|
	{UnknownType} name=ID;

//// A.5
//statement:
//	expression_statement|
//	compound_statement|
//	{jump} jump = jump_statement|
//	{statement} variavel = declaration_statement
//	selection_statement
//	;
//iteration_statement:
//	'while (' condition ')' statement|
//	'do' statement 'while ('expression ');'|
//	'for ( 'for_init_statement condition? ';' expression? ')' statement;
//
//for_init_statement:
//	expression_statement|simple_declaration;
//
simple_declaration:
	variavel = VarDecl ';'
;
//expression_statement:
//	expression?
//;
//compound_statement:
//	'{' statement_seq? '}';
//	
//statement_seq:
//	(statement)+;
//\\selection_statement:
//	'if (' condition ')' statement |
//	'if (' condition ')' statement |
//	'switch (' condition ')' statement;
//
//
//// TODO(condition')
//condition:
//	expression
//;

Return:
	{Return} 'return' rettype=NoPtrExpression? => ';'
;

ReturnExpr:
	{IntType} value=INT |
	{BooleanhType} value=("false"|"true") |
	{StringhType} value=STRING |
	{FunctionType} call=FunctionChamada |
	{Variable} name=ID ('=' expr=ReturnExpr)?;






declaration_statement:
	(variaveis += block_declaration)+
;
//
//// TODO
block_declaration:
	{block_declaration} variavel = simple_declaration
;
// lex.charset
terminal fragment HEX_QUAD:
	HEXADECIMAL_DIGIT HEXADECIMAL_DIGIT HEXADECIMAL_DIGIT HEXADECIMAL_DIGIT;

terminal fragment UNIVERSAL_CHARACTER_NAME:
	'\\u' HEX_QUAD | '\\U' HEX_QUAD HEX_QUAD;

/* 
 * It makes no sense to pre-process the file during compilation.

// lex.pptoken
PreProcessingToken:
	HEADER_NAME |
	ID |
	INT |
	FLOATING_LITERAL |
	PP_NUMBER |
	CHARACTER_LITERAL |
	STRING |
	PREPROCESSING_OP_OR_PUNC
	// each non-white-space character that cannot be one of the above [ambiguity!!!]
; 

// lex.header
terminal HEADER_NAME:
	'<' H_CHAR+ '>' | '\"' Q_CHAR+ '\"';
 
terminal fragment H_CHAR:
	!('\n' | '>');

terminal fragment Q_CHAR:
	!('\n' | '\"');

// lex.ppnumber
terminal PP_NUMBER:
	(DIGIT | '.' DIGIT) (DIGIT | NONDIGIT | UNIVERSAL_CHARACTER_NAME | ('e' | 'E') ('+' | '-') | '.')*;

*/

// lex.token
Token:
	KEYWORD |
	Literal |
	PREPROCESSING_OP_OR_PUNC
	ID;
	
// lex.key
terminal KEYWORD:
	'alignas' |
	'alignof' |
	'asm' |
	'auto' |
	'bool' |
	'break' |
	'case' |
	'catch' |
	'char16_t' |
	'char32_t' |
	'class' |
	'const' |
	'constexpr' |
	'const_cast' |
	'continue' |
	'decltype' |
	'default' |
	'delete' |
	'do' |
	'double' |
	'dynamic_cast' |
	'else' |
	'enum' |
	'explicit' |
	'export' |
	'false' |
	'float' |
	'for' |
	'friend' |
	'goto' |
	'inline' |
	'int' |
	'long' |
	'mutable' |
	'namespace' |
	'new' |
	'noexcept' |
	'nullptr' |
	'operator' |
	'private' |
	'protected' |
	'public' |
	'register' |
	'reinterpret_cast' |
	'return' |
	'short' |
	'signed' |
	'sizeof' |
	'static' |
	'static_assert' |
	'static_cast' |
	'struct' |
	'template' |
	'this' |
	'thread_local' |
	'throw' |
	'true' |
	'try' |
	'typedef' |
	'typeid' |
	'typename' |
	'union' |
	'unsigned' |
	'using' |
	'virtual' |
//	'void' |
	'volatile' |
	'wchar_t' |
	'while';

// lex.operators
terminal PREPROCESSING_OP_OR_PUNC:
	'{' |
	'}' |
	'[' |
	']' |
	'#' |
	'##' |
	'(' |
	')' |
	'<:' |
	':>' |
	'<%' |
	'%>' |
	'%:' |
	'%:%:' |
	';' |
	':' |
	'...' |
	'new' |
	'delete' |
	'?' |
	'::' |
	'.' |
	'.*' |
	'+' |
	'-' |
	'*' |
	'/' |
	'%' |
	'^' |
	'&' |
	'|' |
	'~' |
	'!' |
	'=' |
	'<' |
	'>' |
	'+=' |
	'-=' |
	'*=' |
	'/=' |
	'%=' |
	'^=' |
	'&=' |
	'|=' |
	'<<' |
	'>>' |
	'<<=' |
	'>>=' |
	'<=' |
	'>=' |
	'++' |
	'--' |
	',' |
	'->*' |
	'->' |
	'and' |
	'and_eq' |
	'bitand' |
	'bitor' |
	'compl' |
	'not' |
	'not_eq' |
	'or' |
	'or_eq' |
	'xor' |
	'xor_eq';

// lex.name
terminal ID:
	(NONDIGIT | UNIVERSAL_CHARACTER_NAME) (('0'..'9') | NONDIGIT | UNIVERSAL_CHARACTER_NAME)*;

terminal fragment NONDIGIT:
	'a'..'z' | 'A'..'Z' | '_';

 DIGIT:
	'0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9';

// lex.literal.kinds
Literal:
	INT |
	STRING |
	FLOATING_LITERAL |
	STRING |
	('true' | 'false')
	'nullptr';


terminal fragment DECIMAL_LITERAL:
	'1'..'9' ('0'..'9')*;
	
terminal fragment OCTAL_LITERAL:
	'0' OCTAL_DIGIT*;
	
terminal fragment HEXADECIMAL_LITERAL:
	('0x' | '0X') HEXADECIMAL_DIGIT+;
	
terminal fragment OCTAL_DIGIT:
	'0'..'7';
	
terminal fragment HEXADECIMAL_DIGIT:
	'0'..'9' | 'A'..'F';

terminal fragment INTEGER_SUFFIX:
	('u' | 'U') ('l' | 'L' | 'll' | 'LL')? |
	('l' | 'L' | 'll' | 'LL') ('u' | 'U')?;


terminal fragment C_CHAR:
	!('\'' | '\\' | '\n') | ESCAPE_SEQUENCE | UNIVERSAL_CHARACTER_NAME;
	
terminal fragment ESCAPE_SEQUENCE:
	SIMPLE_ESCAPE_SEQUENCE | OCTAL_ESCAPE_SEQUENCE | HEXADECIMAL_ESCAPE_SEQUENCE;
	
terminal fragment SIMPLE_ESCAPE_SEQUENCE:
	'\\' ('\'' | '\"' | '?' | '\\' | 'a' | 'b' | 'f' | 'n' | 'r' | 't' | 'v');
	
terminal fragment OCTAL_ESCAPE_SEQUENCE:
	'\\' OCTAL_DIGIT OCTAL_DIGIT OCTAL_DIGIT;
	
terminal fragment HEXADECIMAL_ESCAPE_SEQUENCE:
	'\\x' HEXADECIMAL_DIGIT+;

// lex.fcon
terminal FLOATING_LITERAL:
	(FRACTIONAL_CONSTANT EXPONENT_PART? | ('0'..'9')+ EXPONENT_PART) ('f' | 'l' | 'F' | 'L')?;

terminal fragment FRACTIONAL_CONSTANT:
	('0'..'9')* '.' ('0'..'9')+ | ('0'..'9')+ '.';

terminal fragment EXPONENT_PART:
	('e' | 'E') ('+' | '-')? ('0'..'9')+;


terminal fragment ENC_PREFIX:
	'u8' | 'u' | 'U' | 'L';

terminal fragment SCHAR:
	!('\"' | '\\' | '\n') | ESCAPE_SEQUENCE | UNIVERSAL_CHARACTER_NAME;

// stmt.stmt
Statement:
	LabeledStatement |
	ExpressionStatement |
	CompoundStatement |
	SelectionStatement |
	IterationStatement |
	JumpStatement |
	DeclarationStatement |
	TryBlock;

// stmt.label
LabeledStatement:
	ID ':' Statement |
	'case' ConstantExpression ':' Statement |
	'default' ':' Statement;

// stmt.expr
ExpressionStatement:
	Expression ';';

// stmt.block
CompoundStatement:
	'{' Statement* '}';




// stmt.select
SelectionStatement:
	'if' '(' Condition ')' Statement ('else' Statement)?;
Condition:
	Expression |
	DeclarationSpecifier+ DeclaratorId ('=' InitializerClause | BracedInitializerList);

// stmt.iter
IterationStatement:
	'while' '(' Condition ')' Statement |
	'do' Statement 'while' '(' Expression ')' ';' |
	'for' '(' ForInitializationStatement Condition? ';' Expression? ')' Statement;

ForInitializationStatement:
	ExpressionStatement |
	SimpleDeclaration;

// stmt.jump
JumpStatement:
	'break' ';' |
	'continue' ';' |
	'goto' ID ';';

// stmt.dcl
DeclarationStatement:
	SimpleDeclaration |
	BlockDeclaration;
	

BlockDeclaration:
	AsmDefinition |
	NamespaceAliasDefinition |
	UsingDeclaration |
	StaticAssertDeclaration |
	AliasDeclaration;

AliasDeclaration:
	'using' ID '=' TypeId ';';

SimpleDeclaration:
	DeclarationSpecifier* SimpleDeclarationSuffix;

SimpleOrFunctionDeclaration:
	DeclarationSpecifier* (SimpleDeclarationSuffix | FunctionDeclarationSuffix);

SimpleDeclarationSuffix:
	InitDeclaratorList? ';';

FunctionDeclarationSuffix:
	FunctionDeclarator (FunctionBody | '=' 'default' ';' | '=' 'delete' ';');

StaticAssertDeclaration:
	'static_assert' '(' ConstantExpression ',' STRING ')' ';';

// dcl.spec
DeclarationSpecifier:
	StorageClassSpecifier |
	TypeSpecifier |
	FunctionSpecifier |
	'friend' |
	'typedef' |
	'constexpr';

// dcl.stc
StorageClassSpecifier:
	'register' |
	'static' |
	'thread_local' |
	'extern' |
	'mutable';

// dcl.fct.spec
FunctionSpecifier:
	'inline' |
	'virtual' |
	'explicit';

// dcl.type
TypeSpecifier:
	TrailingTypeSpecifier |
	ClassSpecifier |
	EnumSpecifier;

TrailingTypeSpecifier:
	SimpleTypeSpecifier |
	TypenameSpecifier |
	CvQualifier;

// dct.type.simple
SimpleTypeSpecifier:
	'::'? (TypeName | NestedNameSpecifier (TypeName | 'template' SimpleTemplateId)) |
	'char16_t' |
	'char32_t' |
	'wchar_t' |
	'bool' |
	'short' |
	'int' |
	'long' |
	'signed' |
	'unsigned' |
	'float' |
	'double' |
//	'void' |
	'auto' |
	DeclarationTypeSpecifier;

TypeName:
	SimpleTemplateId |
	ID ;

DeclarationTypeSpecifier:
	'decltype' '(' Expression ')';

// dcl.enum
EnumName:
	ID;

EnumSpecifier:
	EnumHead '{' (EnumeratorList ','?)? '}';

EnumHead:
	EnumKey (ID? | NestedNameSpecifier ID) EnumBase?;

EnumKey:
	'enum' |
	'enum' 'class' |
	'enum' 'struct';
	
EnumBase:
	':' TypeSpecifier+;

EnumeratorList:
	EnumerationDefinition (',' EnumerationDefinition)*;

EnumerationDefinition:
	Enumerator ('=' ConstantExpression)?;

Enumerator:
	ID;

// namespace.alias
NamespaceAliasDefinition:
	'namespace' ID '=' QualifiedNamespaceSpecifier ';';

QualifiedNamespaceSpecifier:
	'::'? NestedNameSpecifier? ID;

// namespace.udecl
UsingDeclaration:
	'using' ('::' | 'typename'? '::'? NestedNameSpecifier) UnqualifiedId ';';

// namespace.udir
UsingDirective:
	'using' 'namespace' '::'? NestedNameSpecifier? ID ';';

// dcl.asm
AsmDefinition:
	'asm' '(' STRING ')' ';';


// dcl.decl
InitDeclaratorList:
	InitDeclarator (=> ',' InitDeclarator)*;

InitDeclarator:
	DeclaratorId Initializer?;

FunctionDeclarator:
	DeclaratorId ParametersAndQualifiers;

ParametersAndQualifiers:
	'(' ParameterDeclarationClause? ')' ('const' | 'volatile')? ('&' | '&&')? ExceptionSpecification?;

DeclaratorId:
	'...'? IdExpression;

// dcl.name
TypeId:
	TypeSpecifier+;

// dcl.fct
ParameterDeclarationClause:
	'...' |
	ParameterDeclarationList (','? '...')?;

ParameterDeclarationList:
	ParameterDeclaration (',' ParameterDeclaration)*;

ParameterDeclaration:
	DeclarationSpecifier+ InitDeclarator;

// dcl.fct.def.general
FunctionBody:
	CtorInitializer? CompoundStatement |
	FunctionTryBlock;

// dcl.init
Initializer:
	BraceOrEqualInitializer |
	'(' ExpressionList ')';

BraceOrEqualInitializer:
	'=' InitializerClause |
	BracedInitializerList;

InitializerClause:
	AssignmentExpression |
	BracedInitializerList;

InitializerList:
	InitializerClause '...'? (',' InitializerClause '...'?)*;

BracedInitializerList:
	'{' (InitializerList ','?)? '}';

// class
ClassSpecifier:
	ClassHead '{' MemberSpecification? '}';

ClassHead:
	ClassKey (NestedNameSpecifier? TypeName ClassVirtualSpecifier*)? BaseClause?;

ClassVirtualSpecifier:
	'final' |
	'explicit';

ClassKey:
	'class' |
	'struct' |
	'union';

// class.mem
MemberSpecification:
	(MemberDeclaration | AccessSpecifier ':') MemberSpecification?;

MemberDeclaration:
	MemberOrFunctionDeclaration |
	UsingDeclaration |
	StaticAssertDeclaration |
	TemplateDeclaration |
	AliasDeclaration;

MemberOrFunctionDeclaration:
	DeclarationSpecifier* (FunctionDeclarationSuffix | MemberDeclarationSuffix ';');

MemberDeclarationSuffix:
	MemberDeclaratorList?;

MemberDeclaratorList:
	MemberDeclarator (',' MemberDeclarator)*;

MemberDeclarator:
	DeclaratorId VirtualSpecifier* (PureSpecifier? | BraceOrEqualInitializer);

VirtualSpecifier:
	'override' |
	'final' |
	'new';

PureSpecifier:
	'=' '0';

// class.derived
BaseClause:
	':' BaseSpecifierList;

BaseSpecifierList:
	BaseSpecifier '...'? (',' BaseSpecifier '...'?)*;

BaseSpecifier:
	('virtual' AccessSpecifier? | AccessSpecifier 'virtual'?)? ClassOrDeclarationType;

ClassOrDeclarationType:
	'::'? NestedNameSpecifier? TypeName |
	DeclarationTypeSpecifier;

AccessSpecifier:
	'private' |
	'protected' |
	'public';

// over.oper
OperatorFunctionId:
	'operator' OverloadableOperator ('<' (ConstantExpression | TypeSpecifier | IdExpression)* '>')?;

OverloadableOperator:
	'new' |
	'delete' |
	'new' '[' ']' |
	'delete' '[' ']' |
	'+' |
	'-' |
	'*' |
	'/' |
	'%' |
	'^' |
	'&' |
	'|' |
	'~' |
	'!' |
	'=' |
	'<' |
	'>' |
	'+=' |
	'-=' |
	'*=' |
	'/=' |
	'%=' |
	'^=' |
	'&=' |
	'|=' |
	'<<' |
	'>>' |
	'>>=' |
	'<<=' |
	'==' |
	'++' |
	'--' |
	',' |
	'->*' |
	'->' |
	'()' |
	'[]';

LiteralOperatorId:
	'operator' '\"' '\"';

// temp
TemplateDeclaration:
	'template' '<' TemplateParameterList '>';

TemplateParameterList:
	TemplateParameter (',' TemplateParameter)*;

// temp.param
TemplateParameter:
	TypeParameter | ParameterDeclaration;

TypeParameter:
	('class' | 'typename') ('...'? ID? | ID? '=' TypeId);
	//'template' '<' TemplateParameterList '>' 'class' ('...'? ID? | ID? '=' IdExpression);

// temp.names
SimpleTemplateId:
	ID '<' TemplateArgumentList '>';

TemplateId:
	SimpleTemplateId |
	(OperatorFunctionId | LiteralOperatorId) '<' TemplateArgumentList '>';

TemplateArgumentList:
	TemplateArgument '...'? (',' TemplateArgument '...'?)*;

TemplateArgument:
	ConstantExpression |
	TypeId |
	IdExpression;

// temp.res
TypenameSpecifier:
	'typename' '::'? NestedNameSpecifier (ID | 'template'? ID '<' TemplateArgumentList '>');
	
// except
TryBlock:
	'try' CompoundStatement Handler+;

FunctionTryBlock:
	'try' CtorInitializer? CompoundStatement Handler+;

Handler:
	'catch' '(' ExceptionDeclaration ')' CompoundStatement;

ExceptionDeclaration:
	TypeSpecifier+ DeclaratorId? | 
	'...';
	
ThrowExpression:
	'throw' AssignmentExpression?;

// except.spec
ExceptionSpecification:
	DynamicExceptionSpecification |
	NoexceptSpecification;

DynamicExceptionSpecification:
	'throw' '(' TypeIdList ')';

NoexceptSpecification:
	'noexcept' ('(' ConstantExpression ')')?;



// DUMMY

Expression:
		'Expression'
;

ExpressionList:
	Expression (',' Expression)*;

ExplicitSpecialization:
	'ExplicitSpecialization'
;

ExplicitInstantiation:
	'ExplicitInstantiation'
;

CvQualifier:
	'CvQualifier'
;

ConstantExpression:
	'ConstantExpression'
;

IdExpression:
	'IdExpression'
;

NestedNameSpecifier:
	'NestedNameSpecifier'
;

AssignmentExpression:
	'AssignmentExpression'
;

CtorInitializer:
	'CtorInitializer'
;

TypeIdList:
	'TypeIdList'
;

UnqualifiedId:
	'UnqualifiedId'
;
