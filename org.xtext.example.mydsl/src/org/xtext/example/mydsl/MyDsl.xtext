grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate myDsl "http://www.xtext.org/example/mydsl/MyDsl"

/*
 * SO FAR
 * 
 * LEX.PPNUMBER     [OK]
 * LEX.NAME         [OK]
 * LEX.KEY          [OK]
 * LEX.OPERATORS    [OK]
 * Lex.Token        [OK]
 *
 */

Model:
 	Body;

Body:
	{Body} 
	preprocessing_file
	// (structs += StructDeclaration)* |
	// (classes += ClassDeclaration)* |
	// (structs += StructDeclaration)* |
	// (structs += StructDeclaration)* |
	(variaveis += VarDecl |
	 funcoes += FunctionDeclaration
	)*
	
;

// INCLUDE, DEFINES

elif_group:
  '#elif' constant_expression group?;
  
constant_expression:
	conditional_expression;

conditional_expression:
		'TODO';
preprocessing_file:
	group?
;
	
terminal HEADER_NAME:
	'<' (ID|'.') '>' | '\"' (ID|'.') '\"'
;

preprocessing_token: 
	HEADER_NAME
//	PPNUMBER|
//	CHARLITERAL|

;
else_group:
	'#else'  group?
;
endif_line:
	'#endif'
;
control_line:
'#include' pp_tokens |
'#define' ID replacement_list |
'#define' ID lparen ID? ')' replacement_list |
'#undef' ID |
'#line' pp_tokens|
'#error' pp_tokens? |
'#pragma' pp_tokens? |
 '#';

lparen:
	'('
;
replacement_list:
	pp_tokens?
;
pp_tokens:
	 preprocessing_token+
;

group:
	group_part+
;

group_part:
	if_action |
	control_line;

if_action:
	if_group elif_groups? else_group? endif_line
;
if_group:
	'#if' constant_expression group?|
	'#ifdef' ID group?|
	'#ifndef' ID group?
;
elif_groups:
	elif_group+;


		
// FUNCTION
FunctionDeclaration:
	{FunctionDeclaration} type=Type name=ID "(" 
		(params+=Parameter  ("," params+=Parameter)* )?  ")" "{"	
		(escopo=statement)?
	"}";
		
Parameter:
	{Parameter} type=Type name=ID;

VarDecl:
	{VarDecl} type=Type name=ID;

Type:
	{Type} sts = simple_type_specifier;

simple_type_specifier:
	{IntType} name="int"|
	{BoolType} name="bool"|
	{UnknownType} name=ID;

//// A.5
statement:
//	expression_statement|
//	compound_statement|
	{jump} jump = jump_statement|
	{statement} variavel = declaration_statement
//	selection_statement
	;
//iteration_statement:
//	'while (' condition ')' statement|
//	'do' statement 'while ('expression ');'|
//	'for ( 'for_init_statement condition? ';' expression? ')' statement;
//
//for_init_statement:
//	expression_statement|simple_declaration;
//
simple_declaration:
	variavel = VarDecl ';'
;
//expression_statement:
//	expression?
//;
//compound_statement:
//	'{' statement_seq? '}';
//	
//statement_seq:
//	(statement)+;
//\\selection_statement:
//	'if (' condition ')' statement |
//	'if (' condition ')' statement |
//	'switch (' condition ')' statement;
//
//
//// TODO(condition')
//condition:
//	expression
//;

jump_statement:
	'break;'|
	'continue;'|
	{Return}'return' exp=expression?';'|
	'goto' ID';'
;

expression:
	"--DUMMY--"
;
declaration_statement:
	(variaveis += block_declaration)+
;
//
//// TODO
block_declaration:
	{block_declaration} variavel = simple_declaration
;


	
