grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate myDsl "http://www.xtext.org/example/mydsl/MyDsl"

/*
 * SO FAR
 * 
 * LEX.PPNUMBER     [OK]
 * LEX.NAME         [OK]
 * LEX.KEY          [OK]
 * LEX.OPERATORS    [OK]
 * Lex.Token        [OK]
 *
 */

Model:
 	Body;

Body:
	{Body} preprocessing_file funcoes += FunctionDeclaration*
;

// INCLUDE, DEFINES

elif_group:
  '#elif' constant_expression group?;
  
constant_expression:
	conditional_expression;

conditional_expression:
		'TODO';
preprocessing_file:
	group?
;
	
terminal HEADER_NAME:
	'<' (ID|'.') '>' | '\"' (ID|'.') '\"'
;

preprocessing_token: 
	HEADER_NAME
//	PPNUMBER|
//	CHARLITERAL|

;
else_group:
	'#else'  group?
;
endif_line:
	'#endif'
;
control_line:
'#include' pp_tokens |
'#define' ID replacement_list |
'#define' ID lparen ID? ')' replacement_list |
'#undef' ID |
'#line' pp_tokens|
'#error' pp_tokens? |
'#pragma' pp_tokens? |
 '#';

lparen:
	'('
;
replacement_list:
	pp_tokens?
;
pp_tokens:
	 preprocessing_token+
;

group:
	group_part+
;

group_part:
	if_action |
	control_line;

if_action:
	if_group elif_groups? else_group? endif_line
;
if_group:
	'#if' constant_expression group?|
	'#ifdef' ID group?|
	'#ifndef' ID group?
;
elif_groups:
	elif_group+;


		
// FUNCTION
FunctionDeclaration:
	{FunctionDeclaration} type=Type name=ID "(" 
		(params+=Parameter  ("," params+=Parameter)* )?  ")" "{"	
		(escopo=statement)?
	"}";
		
Parameter:
	{Parameter} type=Type name=ID;

VarDecl:
	{VarDecl} type=Type name=ID;

Type:
	{Type} sts = simple_type_specifier;

simple_type_specifier:
	{IntType} name="int"|
	{BoolType} name="bool"|
	{UnknownType} name=ID;

//// A.5
statement:
//	expression_statement|
//	compound_statement|
//	jump_statement|
	{statement} variavel = declaration_statement
//	selection_statement
	;
//iteration_statement:
//	'while (' condition ')' statement|
//	'do' statement 'while ('expression ');'|
//	'for ( 'for_init_statement condition? ';' expression? ')' statement;
//
//for_init_statement:
//	expression_statement|simple_declaration;
//
simple_declaration:
	variavel = VarDecl ';'
;
//expression_statement:
//	expression?
//;
//compound_statement:
//	'{' statement_seq? '}';
//	
//statement_seq:
//	(statement)+;
//selection_statement:
//	'if (' condition ')' statement |
//	'if (' condition ')' statement |
//	'switch (' condition ')' statement;
//
//
//// TODO(condition')
//condition:
//	expression
//;
//jump_statement:
//	'break;'|
//	'continue;'|
//	'return' expression?';'|
//	'goto' ID';'
//;
declaration_statement:
	(variaveis += block_declaration)+
;
//
//// TODO
block_declaration:
	{block_declaration} variavel = simple_declaration
;


/* 	
conditional_expression:
//	logical_or_expression |
	logical_or_expression ('?' expression ':' assignment_expression)?;

logical_or_expression:
	logical_and_expression ('||' logical_and_expression )*;

logical_and_expression:
	inclusive_or_expression ('&&' inclusive_or_expression)*;

inclusive_or_expression:
	exclusive_or_expression ('|' exclusive_or_expression)*;

exclusive_or_expression:
	and_expression ('^' and_expression)*;

and_expression:
	equality_expression ('&' equality_expression)*;

equality_expression:
	relational_expression (('==' | '!=') relational_expression)*;

relational_expression:
	shift_expression (('<' | '>' | '<=' | '>=') shift_expression)*;

shift_expression:
	additive_expression (('<<' | '>>') additive_expression)*;

additive_expression:
	multiplicative_expression (SIGN multiplicative_expression)*;

multiplicative_expression:
	pm_expression (('*' | '/' | '%') pm_expression)*;

pm_expression:
	cast_expression (('.*' | '->*') cast_expression)*;

cast_expression:
	('(' ID ')')* unary_expression;
	//TODO replace ID with type_id, I guess

unary_expression:
	('sizeof')* postfix_expression |
	('sizeof')* ('++' | '--' | unary_operator ) cast_expression |
	'sizeof' '(' ID ')' |//TODO replace ID with type_id
	('sizeof')* new_expression |
	('sizeof')* delete_expression;

postfix_expression:
	primary_expression ('[' expression ']' |
						'(' expression_list? ')' |
						'.' 'template'? (ID) | //TODO replace ID with id_expression
						'->' 'template'? (ID) | //TODO replace ID with id_expression
						'++' |
						'--')*;

primary_expression:
	'==primary==';

pseudo_destructor_name:
	'::'? nested_name_specifier? type_name '::' '~' type_name |
	'::'? nested_name_specifier => 'template' template_id '::' '~' type_name;

nested_name_specifier:
	class_or_namespace_name '::' nested_name_specifier?;
//	class_or_namespace_name '::' => 'template' nested_name_specifier;
	

class_or_namespace_name:
	class_name | namespace_name;

class_name:
	ID | template_id;

namespace_name:
	'==namespace==';

type_name:
	'==type_name==';

template_id:
	ID '<' template_argument_list? '>' 'class';

template_argument_list:
	template_argument (',' template_argument)*;

template_argument:
	assignment_expression |
	id_expression;

id_expression:
	unqualified_id |
	qualified_id;

unqualified_id:
	ID |
	operator_function_id |
	conversion_function_id |
	'~' class_name |
	template_id;

operator_function_id:
	'operator' operator;

operator:
	'new' | 'delete' | 'new[]' | 'delete[]' | '+' | '-' | '*' | '/' | '%' | '^' | '&' | '|' | '~' | '!' | '=' | '<' | '>' |
	'+=' | '-=' | '*=' | '/=' | '%=' | '^=' | '&=' | '|=' | '<<' | '>>' | '<<=' | '>>=' | '==' | '!=' | '<=' | '>=' | '&&' |
	'||' | '++' | '--' | ',' | '->*' | '->' | '()' | '[]';

conversion_function_id:
	'operator' conversion_type_id;

conversion_type_id:
	type_specifier_seq conversion_declarator?;

conversion_declarator:
	'==conversion==';

type_specifier_seq:
	type_specifier+;

type_specifier:
	'==type_specifier==';

qualified_id:
	'==qualified==';

new_expression:
	'==new==';

delete_expression:
	'==delete==';

unary_operator:
	('*' | '&' | '+' | '-' | '!' | '~');

expression_list:
	assignment_expression (',' assignment_expression)*;

expression:
	'==expression==';

assignment_expression:
	'==assignment==';

*/

