grammar org.xtext.example.mydsl.MyDsl with org.eclipse.xtext.common.Terminals

generate myDsl "http://www.xtext.org/example/mydsl/MyDsl"

/*
 * SO FAR
 * 
 * LEX.PPNUMBER     [OK]
 * LEX.NAME         [OK]
 * LEX.KEY          [OK]
 * LEX.OPERATORS    [OK]
 * Lex.Token        [OK]
 *
 */
 
Model:
	greetings+=preprocessing_file;
	
Greeting:
	'Hello' name=ID '!';

new_line:
	'\n' | '\r\n'
;
preprocessing_file:
	group?
;

group:
	group_part+
;

group_part:
	pp_tokens? new_line |
	if_action |
	control_line
;

if_action:
	if_group elif_groups? else_group? endif_line
;
if_group:
	'#if' constant_expression new_line group?|
	'#ifdef' IDENTIFIER new_line group?|
	'#ifndef' IDENTIFIER new_line group?
;
elif_groups:
	elif_group+;
	
elif_group:
  '#elif' constant_expression new_line group?;


// TODO(constant_expression)
constant_expression: '==';
// TODO(): preprocessing_token
preprocessing_token: '!=';
else_group:
	'#else' new_line group?
;
endif_line:
	'#endif' new_line
;
control_line:
'#include' pp_tokens new_line |
'#define' IDENTIFIER replacement_list new_line|
'#define' IDENTIFIER lparen IDENTIFIER? ')' replacement_list new_line|
'#undef' IDENTIFIER new_line|
'#line' pp_tokens new_line|
'#error' pp_tokens? new_line|
'#pragma' pp_tokens? new_line|
'#' new_line;

lparen:
	'('
;
replacement_list:
	pp_tokens?
;
pp_tokens:
	 preprocessing_token+
;

SIGN:
	'+'|'-'
;

// lex.charset



// lex.icon


terminal INTEGERLITERAL:
	'1'..'9' ('0'..'9')*(('u'|'U') ('l'|'L'|'ll'|'LL')? | ('l'|'L'|'ll'|'LL')('u'|'U')?)?|
	'0' ('0'..'7')*(('u'|'U') ('l'|'L'|'ll'|'LL')? | ('l'|'L'|'ll'|'LL')('u'|'U')?)?|
	('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F')+(('u'|'U') ('l'|'L'|'ll'|'LL')? | ('l'|'L'|'ll'|'LL')('u'|'U')?)?
;

// lex.bool
terminal BOOLEANLITERAL:
	'false'|'true'
;

// lex.nullptr

terminal POINTERLITERAL:
	'nullptr'
;
// LEX.TOKEN

Token: 
	LITERAL |
	PPNUMBER |
	KEYWORD |
	PPOPorPUNC
;
// LEX.PPNUMBER === LEFT RECURSION REMOVED
 	
terminal PPNUMBER:  
 	(('0'..'9') | '.' ('0'..'9')) ('0'..'9'|('a'..'z'|'A'..'Z'|'_')| 'e'('+'|'-')|'E'('+'|'-')|'.')*;
 // LEX _ NAME === LEFT RECURSION REMOVED

terminal LITERAL:
	INTEGERLITERAL |
	BOOLEANLITERAL |
	POINTERLITERAL
;

// LEX.KEY
terminal KEYWORD:	  
 	'alignas'|
 	'alignof'| 
 	'asm'|
 	'auto'|
 	'bool'|
 	'break'|
 	'case'|
 	'catch'|
 	'char'|
 	'char16_t'|
 	'char32_t'|
 	'class'|
 	'const'|
 	'constexpr'|
 	'const_cast'|
 	'continue'|
 	'decltype'|
 	'default'|
 	'delete'|
 	'do'|
 	'double'|
 	'dynamic_cast'|
 	'else'|
 	'enum'|
 	'explicit'|
 	'export'|
 	'extern'|
 	'false'|
 	'float'|
 	'for'|
 	'friend'|
 	'goto'|
 	'if'|
 	'inline'|
 	'int'|
 	'long'|
 	'mutable'|
 	'namespace'|
 	'new'|
 	'noexcept'|
 	'nullptr'|
 	'operator'|
 	'private'|
 	'protected'|
 	'public'|
 	'register'|
 	'reinterpret_cast'|
 	'return'|
 	'short'|
 	'signed'|
 	'sizeof'|
 	'static'|
 	'static_assert'|
 	'static_cast'|
 	'struct'|
 	'switch'|
 	'template'|
 	'this'|
 	'thread_local'|
 	'throw'|
 	'true'|
 	'try'|
 	'typedef'|
 	'typeid'|
 	'typename'|
 	'union'|
 	'unsigned'|
 	'using'|
 	'virtual'|
 	'void'|
 	'volatile'|
 	'wchar_t'|
 	'while';
 	
 	
 	
// LEX.OPERATORS
// TODO(rigelbm): operator-token and punctuator
terminal PPOPorPUNC:
	'{'|
 	'}'|
 	'['|
 	']'|
 	'#'|
 	'##'|
 	'('|
 	')'|
 	'<:'|
 	':>'|
 	'<%'|
 	'%>'|
 	'%:'|
 	'%:%:'|
 	';'|
 	':'|
 	'...'|
 	'new'|
 	'delete'|
 	'?'|
 	'::'|
 	'.'|
 	'.*'|
 	'+'|
 	'-'|
 	'*'|
 	'/'|
 	'%'|
 	'^'|
 	'&'|
 	'|'|
 	'~'|
 	'!'|
 	'='|
 	'<'|
 	'>'|
 	'+='|
 	'-='|
 	'*='|
 	'/='|
 	'%='|
 	'^='|
 	'&='|
 	'|='|
 	'<<'|
 	'>>'|
 	'<<='|
 	'>>='|
 	'=='|
 	'!='|
 	'<='|
 	'>='|
 	'&&'|
 	'||'|
 	'++'|
 	'--'|
 	','|
 	'->*'|
 	'->'|
 	'and'|
 	'and_eq'|
 	'bitand'|
 	'bitor'|
 	'compl'|
 	'not'|
 	'not_eq'|
 	'or'|
 	'or_eq'|
 	'xor'|
 	'xor_eq';
 
 terminal IDENTIFIER:
	('a'..'z'|'A'..'Z'|'_') ('0'..'9'|'A'..'Z'|'a'..'z'|'_')*;
 	