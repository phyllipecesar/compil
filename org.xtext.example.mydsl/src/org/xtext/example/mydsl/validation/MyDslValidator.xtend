/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.validation

import java.util.ArrayList
import java.util.Iterator
import java.*
import java.util.TreeSet
import java.util.List
import org.eclipse.xtext.validation.Check
import org.xtext.example.mydsl.myDsl.statement
import java.util.HashSet
import java.util.HashMap
import org.xtext.example.mydsl.myDsl.block_declaration
import org.xtext.example.mydsl.myDsl.Body
import org.xtext.example.mydsl.myDsl.FunctionDeclaration
import org.xtext.example.mydsl.myDsl.Parameter
import org.xtext.example.mydsl.myDsl.Return
import org.antlr.misc.Utils
import org.xtext.example.mydsl.myDsl.Declaration

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class MyDslValidator extends AbstractMyDslValidator {
	HashSet<String> hash = new HashSet<String>();


@Check
def checkParamsFunction(FunctionDeclaration funcao) {
	hash.clear();
	for (Parameter symbol: funcao.params) {
			val nome = symbol.name;
			if (hash.contains(nome)) {
				error("Parameter '" + symbol.type.sts.name + " " + nome + "' already exists", symbol, null, -1);
			}
			hash.add(nome);
	}
	for (block_declaration block: funcao.escopo.variavel.variaveis) {
		val nome = block.variavel.variavel.name;
		if (hash.contains(nome)) {
			block.variavel.variavel.type
			error("declaration of variable '" + nome + "' shadows a paramater", block.variavel.variavel, null, -1);
			
		}
	}
}
String row;
int ok;
@Check
def checkFunctionAlreadyExists(Body b) {
	hash.clear();
	
	for (Declaration symbol: b.declarations) {
		if (symbol.funcao.name != "null") {
			row = symbol.funcao.name + "(";
			ok = 0;
			for (Parameter symb : symbol.funcao.params) {
				if (ok == 1) row = row + ",";
				ok = 1;
				row = row + symb.type.sts.name;
			}
			row = row + ")";
			if (hash.contains(row)) {
				error("Function '" +  row + "' already exists", symbol.funcao, null, -1);
			}
			hash.add(row);
		}
	}
}


@Check
def checkReturnOnlyOnFunction(Return r) {
	if (r.eContainer == null) {
			error( "return can only be used inside of functions", r, null, -1);
	}
	System.out.println(r.eContainer.class);
	if (r.eContainer.eContainer == null) {
			error( "return can only be used inside of functions", r, null, -1);
	}
	if (r.eContainer.eContainer.eContainer == null) {
			error( "return can only be used inside of functions", r, null, -1);
	}
	
	if (r.eContainer.eContainer.eContainer.eContainer.class != FunctionDeclaration) {
			error( "return can only be used inside of functions", r, null, -1);
	}
	
}
@Check
def checkVariableAlreadyExists(statement st) {
		hash.clear();
		for (block_declaration block : st.variavel.variaveis) {
			val nome = block.variavel.variavel.name;
			if (hash.contains(nome)) {
				error("Variable '" + nome + "' already exists", block.variavel.variavel, null, -1);
			}
			hash.add(nome);
		}
		
		
	
}
//  public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					MyDslPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}
}
