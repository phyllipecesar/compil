/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.validation

import java.util.ArrayList
import java.util.Iterator
import java.*
import java.util.TreeSet
import java.util.List
import org.eclipse.xtext.validation.Check
import java.util.HashSet
import java.util.HashMap
import org.xtext.example.mydsl.myDsl.block_declaration
import org.xtext.example.mydsl.myDsl.Body
import org.xtext.example.mydsl.myDsl.FunctionDeclaration
import org.xtext.example.mydsl.myDsl.Parameter
import org.xtext.example.mydsl.myDsl.Return
import org.antlr.misc.Utils
import org.xtext.example.mydsl.myDsl.Declaration
import org.xtext.example.mydsl.myDsl.VarDecl
import org.xtext.example.mydsl.myDsl.NoPtrStatement
import org.eclipse.emf.ecore.EObject
import org.xtext.example.mydsl.myDsl.Variable
import org.xtext.example.mydsl.myDsl.IntType
import org.xtext.example.mydsl.myDsl.BooleanhType
import org.xtext.example.mydsl.myDsl.StringhType

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class MyDslValidator extends AbstractMyDslValidator {
	HashSet<String> hash = new HashSet<String>();


@Check
def checkParamsFunction(FunctionDeclaration funcao) {
	hash.clear();
	for (Parameter symbol: funcao.params) {
			val nome = symbol.name;
			if (hash.contains(nome)) {
				error("Parameter '" + symbol.type.sts.name + " " + nome + "' already exists", symbol, null, -1);
			}
			hash.add(nome);
	}
	for (VarDecl variavel: funcao.escopo.variaveis) {
		val nome = variavel.name;
		if (hash.contains(nome)) {
			error("declaration of variable '" + nome + "' shadows a paramater", variavel, null, -1);
			
		}
	}
}
String row;
int ok;
@Check
def checkFunctionAlreadyExists(Body b) {
	hash.clear();
	
	for (Declaration symbol: b.declarations) {
		if (symbol.funcao.name != "null") {
			row = symbol.funcao.name + "(";
			ok = 0;
			for (Parameter symb : symbol.funcao.params) {
				if (ok == 1) row = row + ",";
				ok = 1;
				row = row + symb.type.sts.name;
			}
			row = row + ")";
			if (hash.contains(row)) {
				error("Function '" +  row + "' already exists", symbol.funcao, null, -1);
			}
			hash.add(row);
		}
	}
}


boolean funcaoExiste = false;
EObject rt;
@Check
def checkReturnOnlyOnFunction(Return r) {
	funcaoExiste = false;
	rt = 	r.eContainer;
	while (rt != null) {
		if (rt instanceof FunctionDeclaration) {
			funcaoExiste = true;
		}	
		rt = rt.eContainer;
	}
	if (funcaoExiste == false) {
			error( "return can only be used inside of functions", r, null, -1);
	}
	
}

EObject rt2;
EObject rt4;
Variable v;
FunctionDeclaration rt3;
String tipoCRT;
String tipoCRT2;
@Check
def checkReturnTypeFunction(Return r) {
	rt2 = 	r.eContainer;
	val tipo = r.rettype;
	while (rt2 != null) {
		if (rt2 instanceof FunctionDeclaration) {
			if (tipo.eClass.name != null) {
			if (tipo instanceof Variable) {
				v = tipo;
				tipoCRT = "Tipo NAo Declarado";
				for (Parameter symbol: rt2.params) {
					val nome = symbol.name;
					if (nome.equals(v.name)) {
						tipoCRT = symbol.type.sts.name;
					}
				}
				for (VarDecl variavel: rt2.escopo.variaveis) {
					val nome = variavel.name;
					if (nome.equals(v.name)) {
						tipoCRT = variavel.type.sts.name;
					}
				}
			} else if (tipo instanceof IntType) {
				tipoCRT = 'int';	
			} else if (tipo instanceof BooleanhType) {
				tipoCRT = 'bool';	
			} else if (tipo instanceof StringhType) {
				tipoCRT = 'string';	
			}
			tipoCRT2 = rt2.type.sts.name;
			System.out.println("Tipo 1" + tipoCRT);
			System.out.println("Tipo 2" + tipoCRT2);
			if (tipoCRT2.equals("void")) {
				error("A 'void' function should not have a return", r, null, -1);
			}
			else if (tipoCRT.equals("Tipo NAo Declarado")) {
				error("Your variable was not declared, neither is an argument.", r, null, -1);
			}
			else if (!tipoCRT2.equals(tipoCRT)) {
				error("Return type mismatch, expected '" + tipoCRT2 + "' found '" + tipoCRT + "'.", r, null, -1);
			}
			} else if (!rt2.type.sts.name.equals("void")) {
					error("A function of type '" + rt2.type.sts.name + "' must have a valid return type.", r, null, -1);
		
			}
		}	
		rt2 = rt2.eContainer;
	}
}
@Check
def checkVariableAlreadyExists(NoPtrStatement st) {
		hash.clear();
		for (VarDecl variavel : st.variaveis) {
			val nome = variavel.name;
			if (hash.contains(nome)) {
				error("Variable '" + nome + "' already exists", variavel, null, -1);
			}
			hash.add(nome);
		}	
	
}

@Check
def checkVariableAlreadyExistsBody(Body st) {
		hash.clear();
		for (VarDecl variavel : st.variaveis) {
			val nome = variavel.name;
			if (hash.contains(nome)) {
				error("Variable '" + nome + "' already exists", variavel, null, -1);
			}
			hash.add(nome);
		}	
	
}
//  public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					MyDslPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}
}
