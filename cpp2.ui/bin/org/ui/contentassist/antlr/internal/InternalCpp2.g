/*
* generated by Xtext
*/
grammar InternalCpp2;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package org.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.services.Cpp2GrammarAccess;

}

@parser::members {
 
 	private Cpp2GrammarAccess grammarAccess;
 	
    public void setGrammarAccess(Cpp2GrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleTest
entryRuleTest 
:
{ before(grammarAccess.getTestRule()); }
	 ruleTest
{ after(grammarAccess.getTestRule()); } 
	 EOF 
;

// Rule Test
ruleTest
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTestAccess().getElementsAssignment()); }
(rule__Test__ElementsAssignment)*
{ after(grammarAccess.getTestAccess().getElementsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleLiteral
entryRuleLiteral 
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
(rule__Literal__Alternatives)
{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatement
entryRuleStatement 
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatementAccess().getAlternatives()); }
(rule__Statement__Alternatives)
{ after(grammarAccess.getStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLabeledStatement
entryRuleLabeledStatement 
:
{ before(grammarAccess.getLabeledStatementRule()); }
	 ruleLabeledStatement
{ after(grammarAccess.getLabeledStatementRule()); } 
	 EOF 
;

// Rule LabeledStatement
ruleLabeledStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLabeledStatementAccess().getAlternatives()); }
(rule__LabeledStatement__Alternatives)
{ after(grammarAccess.getLabeledStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpressionStatement
entryRuleExpressionStatement 
:
{ before(grammarAccess.getExpressionStatementRule()); }
	 ruleExpressionStatement
{ after(grammarAccess.getExpressionStatementRule()); } 
	 EOF 
;

// Rule ExpressionStatement
ruleExpressionStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionStatementAccess().getGroup()); }
(rule__ExpressionStatement__Group__0)
{ after(grammarAccess.getExpressionStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCompoundStatement
entryRuleCompoundStatement 
:
{ before(grammarAccess.getCompoundStatementRule()); }
	 ruleCompoundStatement
{ after(grammarAccess.getCompoundStatementRule()); } 
	 EOF 
;

// Rule CompoundStatement
ruleCompoundStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCompoundStatementAccess().getGroup()); }
(rule__CompoundStatement__Group__0)
{ after(grammarAccess.getCompoundStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSelectionStatement
entryRuleSelectionStatement 
:
{ before(grammarAccess.getSelectionStatementRule()); }
	 ruleSelectionStatement
{ after(grammarAccess.getSelectionStatementRule()); } 
	 EOF 
;

// Rule SelectionStatement
ruleSelectionStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSelectionStatementAccess().getAlternatives()); }
(rule__SelectionStatement__Alternatives)
{ after(grammarAccess.getSelectionStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCondition
entryRuleCondition 
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConditionAccess().getAlternatives()); }
(rule__Condition__Alternatives)
{ after(grammarAccess.getConditionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIterationStatement
entryRuleIterationStatement 
:
{ before(grammarAccess.getIterationStatementRule()); }
	 ruleIterationStatement
{ after(grammarAccess.getIterationStatementRule()); } 
	 EOF 
;

// Rule IterationStatement
ruleIterationStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIterationStatementAccess().getAlternatives()); }
(rule__IterationStatement__Alternatives)
{ after(grammarAccess.getIterationStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleForInitializationStatement
entryRuleForInitializationStatement 
:
{ before(grammarAccess.getForInitializationStatementRule()); }
	 ruleForInitializationStatement
{ after(grammarAccess.getForInitializationStatementRule()); } 
	 EOF 
;

// Rule ForInitializationStatement
ruleForInitializationStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getForInitializationStatementAccess().getAlternatives()); }
(rule__ForInitializationStatement__Alternatives)
{ after(grammarAccess.getForInitializationStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleJumpStatement
entryRuleJumpStatement 
:
{ before(grammarAccess.getJumpStatementRule()); }
	 ruleJumpStatement
{ after(grammarAccess.getJumpStatementRule()); } 
	 EOF 
;

// Rule JumpStatement
ruleJumpStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getJumpStatementAccess().getAlternatives()); }
(rule__JumpStatement__Alternatives)
{ after(grammarAccess.getJumpStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclarationStatement
entryRuleDeclarationStatement 
:
{ before(grammarAccess.getDeclarationStatementRule()); }
	 ruleDeclarationStatement
{ after(grammarAccess.getDeclarationStatementRule()); } 
	 EOF 
;

// Rule DeclarationStatement
ruleDeclarationStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclarationStatementAccess().getAlternatives()); }
(rule__DeclarationStatement__Alternatives)
{ after(grammarAccess.getDeclarationStatementAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclaration
entryRuleDeclaration 
:
{ before(grammarAccess.getDeclarationRule()); }
	 ruleDeclaration
{ after(grammarAccess.getDeclarationRule()); } 
	 EOF 
;

// Rule Declaration
ruleDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclarationAccess().getAlternatives()); }
(rule__Declaration__Alternatives)
{ after(grammarAccess.getDeclarationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBlockDeclaration
entryRuleBlockDeclaration 
:
{ before(grammarAccess.getBlockDeclarationRule()); }
	 ruleBlockDeclaration
{ after(grammarAccess.getBlockDeclarationRule()); } 
	 EOF 
;

// Rule BlockDeclaration
ruleBlockDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBlockDeclarationAccess().getAlternatives()); }
(rule__BlockDeclaration__Alternatives)
{ after(grammarAccess.getBlockDeclarationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAliasDeclaration
entryRuleAliasDeclaration 
:
{ before(grammarAccess.getAliasDeclarationRule()); }
	 ruleAliasDeclaration
{ after(grammarAccess.getAliasDeclarationRule()); } 
	 EOF 
;

// Rule AliasDeclaration
ruleAliasDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAliasDeclarationAccess().getGroup()); }
(rule__AliasDeclaration__Group__0)
{ after(grammarAccess.getAliasDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimpleDeclaration
entryRuleSimpleDeclaration 
:
{ before(grammarAccess.getSimpleDeclarationRule()); }
	 ruleSimpleDeclaration
{ after(grammarAccess.getSimpleDeclarationRule()); } 
	 EOF 
;

// Rule SimpleDeclaration
ruleSimpleDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimpleDeclarationAccess().getGroup()); }
(rule__SimpleDeclaration__Group__0)
{ after(grammarAccess.getSimpleDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimpleOrFunctionDeclaration
entryRuleSimpleOrFunctionDeclaration 
:
{ before(grammarAccess.getSimpleOrFunctionDeclarationRule()); }
	 ruleSimpleOrFunctionDeclaration
{ after(grammarAccess.getSimpleOrFunctionDeclarationRule()); } 
	 EOF 
;

// Rule SimpleOrFunctionDeclaration
ruleSimpleOrFunctionDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimpleOrFunctionDeclarationAccess().getGroup()); }
(rule__SimpleOrFunctionDeclaration__Group__0)
{ after(grammarAccess.getSimpleOrFunctionDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimpleDeclarationSuffix
entryRuleSimpleDeclarationSuffix 
:
{ before(grammarAccess.getSimpleDeclarationSuffixRule()); }
	 ruleSimpleDeclarationSuffix
{ after(grammarAccess.getSimpleDeclarationSuffixRule()); } 
	 EOF 
;

// Rule SimpleDeclarationSuffix
ruleSimpleDeclarationSuffix
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimpleDeclarationSuffixAccess().getGroup()); }
(rule__SimpleDeclarationSuffix__Group__0)
{ after(grammarAccess.getSimpleDeclarationSuffixAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionDeclarationSuffix
entryRuleFunctionDeclarationSuffix 
:
{ before(grammarAccess.getFunctionDeclarationSuffixRule()); }
	 ruleFunctionDeclarationSuffix
{ after(grammarAccess.getFunctionDeclarationSuffixRule()); } 
	 EOF 
;

// Rule FunctionDeclarationSuffix
ruleFunctionDeclarationSuffix
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionDeclarationSuffixAccess().getGroup()); }
(rule__FunctionDeclarationSuffix__Group__0)
{ after(grammarAccess.getFunctionDeclarationSuffixAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStaticAssertDeclaration
entryRuleStaticAssertDeclaration 
:
{ before(grammarAccess.getStaticAssertDeclarationRule()); }
	 ruleStaticAssertDeclaration
{ after(grammarAccess.getStaticAssertDeclarationRule()); } 
	 EOF 
;

// Rule StaticAssertDeclaration
ruleStaticAssertDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStaticAssertDeclarationAccess().getGroup()); }
(rule__StaticAssertDeclaration__Group__0)
{ after(grammarAccess.getStaticAssertDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclarationSpecifier
entryRuleDeclarationSpecifier 
:
{ before(grammarAccess.getDeclarationSpecifierRule()); }
	 ruleDeclarationSpecifier
{ after(grammarAccess.getDeclarationSpecifierRule()); } 
	 EOF 
;

// Rule DeclarationSpecifier
ruleDeclarationSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclarationSpecifierAccess().getAlternatives()); }
(rule__DeclarationSpecifier__Alternatives)
{ after(grammarAccess.getDeclarationSpecifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStorageClassSpecifier
entryRuleStorageClassSpecifier 
:
{ before(grammarAccess.getStorageClassSpecifierRule()); }
	 ruleStorageClassSpecifier
{ after(grammarAccess.getStorageClassSpecifierRule()); } 
	 EOF 
;

// Rule StorageClassSpecifier
ruleStorageClassSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStorageClassSpecifierAccess().getAlternatives()); }
(rule__StorageClassSpecifier__Alternatives)
{ after(grammarAccess.getStorageClassSpecifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionSpecifier
entryRuleFunctionSpecifier 
:
{ before(grammarAccess.getFunctionSpecifierRule()); }
	 ruleFunctionSpecifier
{ after(grammarAccess.getFunctionSpecifierRule()); } 
	 EOF 
;

// Rule FunctionSpecifier
ruleFunctionSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionSpecifierAccess().getAlternatives()); }
(rule__FunctionSpecifier__Alternatives)
{ after(grammarAccess.getFunctionSpecifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeSpecifier
entryRuleTypeSpecifier 
:
{ before(grammarAccess.getTypeSpecifierRule()); }
	 ruleTypeSpecifier
{ after(grammarAccess.getTypeSpecifierRule()); } 
	 EOF 
;

// Rule TypeSpecifier
ruleTypeSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeSpecifierAccess().getAlternatives()); }
(rule__TypeSpecifier__Alternatives)
{ after(grammarAccess.getTypeSpecifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTrailingTypeSpecifier
entryRuleTrailingTypeSpecifier 
:
{ before(grammarAccess.getTrailingTypeSpecifierRule()); }
	 ruleTrailingTypeSpecifier
{ after(grammarAccess.getTrailingTypeSpecifierRule()); } 
	 EOF 
;

// Rule TrailingTypeSpecifier
ruleTrailingTypeSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTrailingTypeSpecifierAccess().getAlternatives()); }
(rule__TrailingTypeSpecifier__Alternatives)
{ after(grammarAccess.getTrailingTypeSpecifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimpleTypeSpecifier
entryRuleSimpleTypeSpecifier 
:
{ before(grammarAccess.getSimpleTypeSpecifierRule()); }
	 ruleSimpleTypeSpecifier
{ after(grammarAccess.getSimpleTypeSpecifierRule()); } 
	 EOF 
;

// Rule SimpleTypeSpecifier
ruleSimpleTypeSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getAlternatives()); }
(rule__SimpleTypeSpecifier__Alternatives)
{ after(grammarAccess.getSimpleTypeSpecifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeName
entryRuleTypeName 
:
{ before(grammarAccess.getTypeNameRule()); }
	 ruleTypeName
{ after(grammarAccess.getTypeNameRule()); } 
	 EOF 
;

// Rule TypeName
ruleTypeName
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeNameAccess().getAlternatives()); }
(rule__TypeName__Alternatives)
{ after(grammarAccess.getTypeNameAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclarationTypeSpecifier
entryRuleDeclarationTypeSpecifier 
:
{ before(grammarAccess.getDeclarationTypeSpecifierRule()); }
	 ruleDeclarationTypeSpecifier
{ after(grammarAccess.getDeclarationTypeSpecifierRule()); } 
	 EOF 
;

// Rule DeclarationTypeSpecifier
ruleDeclarationTypeSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclarationTypeSpecifierAccess().getGroup()); }
(rule__DeclarationTypeSpecifier__Group__0)
{ after(grammarAccess.getDeclarationTypeSpecifierAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleEnumSpecifier
entryRuleEnumSpecifier 
:
{ before(grammarAccess.getEnumSpecifierRule()); }
	 ruleEnumSpecifier
{ after(grammarAccess.getEnumSpecifierRule()); } 
	 EOF 
;

// Rule EnumSpecifier
ruleEnumSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumSpecifierAccess().getGroup()); }
(rule__EnumSpecifier__Group__0)
{ after(grammarAccess.getEnumSpecifierAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumHead
entryRuleEnumHead 
:
{ before(grammarAccess.getEnumHeadRule()); }
	 ruleEnumHead
{ after(grammarAccess.getEnumHeadRule()); } 
	 EOF 
;

// Rule EnumHead
ruleEnumHead
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumHeadAccess().getGroup()); }
(rule__EnumHead__Group__0)
{ after(grammarAccess.getEnumHeadAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumKey
entryRuleEnumKey 
:
{ before(grammarAccess.getEnumKeyRule()); }
	 ruleEnumKey
{ after(grammarAccess.getEnumKeyRule()); } 
	 EOF 
;

// Rule EnumKey
ruleEnumKey
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumKeyAccess().getAlternatives()); }
(rule__EnumKey__Alternatives)
{ after(grammarAccess.getEnumKeyAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumBase
entryRuleEnumBase 
:
{ before(grammarAccess.getEnumBaseRule()); }
	 ruleEnumBase
{ after(grammarAccess.getEnumBaseRule()); } 
	 EOF 
;

// Rule EnumBase
ruleEnumBase
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumBaseAccess().getGroup()); }
(rule__EnumBase__Group__0)
{ after(grammarAccess.getEnumBaseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumeratorList
entryRuleEnumeratorList 
:
{ before(grammarAccess.getEnumeratorListRule()); }
	 ruleEnumeratorList
{ after(grammarAccess.getEnumeratorListRule()); } 
	 EOF 
;

// Rule EnumeratorList
ruleEnumeratorList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumeratorListAccess().getGroup()); }
(rule__EnumeratorList__Group__0)
{ after(grammarAccess.getEnumeratorListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumerationDefinition
entryRuleEnumerationDefinition 
:
{ before(grammarAccess.getEnumerationDefinitionRule()); }
	 ruleEnumerationDefinition
{ after(grammarAccess.getEnumerationDefinitionRule()); } 
	 EOF 
;

// Rule EnumerationDefinition
ruleEnumerationDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumerationDefinitionAccess().getGroup()); }
(rule__EnumerationDefinition__Group__0)
{ after(grammarAccess.getEnumerationDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEnumerator
entryRuleEnumerator 
:
{ before(grammarAccess.getEnumeratorRule()); }
	 ruleEnumerator
{ after(grammarAccess.getEnumeratorRule()); } 
	 EOF 
;

// Rule Enumerator
ruleEnumerator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEnumeratorAccess().getIDTerminalRuleCall()); }
	RULE_ID
{ after(grammarAccess.getEnumeratorAccess().getIDTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNamespaceDefinition
entryRuleNamespaceDefinition 
:
{ before(grammarAccess.getNamespaceDefinitionRule()); }
	 ruleNamespaceDefinition
{ after(grammarAccess.getNamespaceDefinitionRule()); } 
	 EOF 
;

// Rule NamespaceDefinition
ruleNamespaceDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNamespaceDefinitionAccess().getGroup()); }
(rule__NamespaceDefinition__Group__0)
{ after(grammarAccess.getNamespaceDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNamespaceAliasDefinition
entryRuleNamespaceAliasDefinition 
:
{ before(grammarAccess.getNamespaceAliasDefinitionRule()); }
	 ruleNamespaceAliasDefinition
{ after(grammarAccess.getNamespaceAliasDefinitionRule()); } 
	 EOF 
;

// Rule NamespaceAliasDefinition
ruleNamespaceAliasDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNamespaceAliasDefinitionAccess().getGroup()); }
(rule__NamespaceAliasDefinition__Group__0)
{ after(grammarAccess.getNamespaceAliasDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleQualifiedNamespaceSpecifier
entryRuleQualifiedNamespaceSpecifier 
:
{ before(grammarAccess.getQualifiedNamespaceSpecifierRule()); }
	 ruleQualifiedNamespaceSpecifier
{ after(grammarAccess.getQualifiedNamespaceSpecifierRule()); } 
	 EOF 
;

// Rule QualifiedNamespaceSpecifier
ruleQualifiedNamespaceSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getQualifiedNamespaceSpecifierAccess().getGroup()); }
(rule__QualifiedNamespaceSpecifier__Group__0)
{ after(grammarAccess.getQualifiedNamespaceSpecifierAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUsingDeclaration
entryRuleUsingDeclaration 
:
{ before(grammarAccess.getUsingDeclarationRule()); }
	 ruleUsingDeclaration
{ after(grammarAccess.getUsingDeclarationRule()); } 
	 EOF 
;

// Rule UsingDeclaration
ruleUsingDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUsingDeclarationAccess().getGroup()); }
(rule__UsingDeclaration__Group__0)
{ after(grammarAccess.getUsingDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleAsmDefinition
entryRuleAsmDefinition 
:
{ before(grammarAccess.getAsmDefinitionRule()); }
	 ruleAsmDefinition
{ after(grammarAccess.getAsmDefinitionRule()); } 
	 EOF 
;

// Rule AsmDefinition
ruleAsmDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAsmDefinitionAccess().getGroup()); }
(rule__AsmDefinition__Group__0)
{ after(grammarAccess.getAsmDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLinkageSpecification
entryRuleLinkageSpecification 
:
{ before(grammarAccess.getLinkageSpecificationRule()); }
	 ruleLinkageSpecification
{ after(grammarAccess.getLinkageSpecificationRule()); } 
	 EOF 
;

// Rule LinkageSpecification
ruleLinkageSpecification
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLinkageSpecificationAccess().getGroup()); }
(rule__LinkageSpecification__Group__0)
{ after(grammarAccess.getLinkageSpecificationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInitDeclaratorList
entryRuleInitDeclaratorList 
:
{ before(grammarAccess.getInitDeclaratorListRule()); }
	 ruleInitDeclaratorList
{ after(grammarAccess.getInitDeclaratorListRule()); } 
	 EOF 
;

// Rule InitDeclaratorList
ruleInitDeclaratorList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInitDeclaratorListAccess().getGroup()); }
(rule__InitDeclaratorList__Group__0)
{ after(grammarAccess.getInitDeclaratorListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInitDeclarator
entryRuleInitDeclarator 
:
{ before(grammarAccess.getInitDeclaratorRule()); }
	 ruleInitDeclarator
{ after(grammarAccess.getInitDeclaratorRule()); } 
	 EOF 
;

// Rule InitDeclarator
ruleInitDeclarator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInitDeclaratorAccess().getGroup()); }
(rule__InitDeclarator__Group__0)
{ after(grammarAccess.getInitDeclaratorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionDeclarator
entryRuleFunctionDeclarator 
:
{ before(grammarAccess.getFunctionDeclaratorRule()); }
	 ruleFunctionDeclarator
{ after(grammarAccess.getFunctionDeclaratorRule()); } 
	 EOF 
;

// Rule FunctionDeclarator
ruleFunctionDeclarator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionDeclaratorAccess().getGroup()); }
(rule__FunctionDeclarator__Group__0)
{ after(grammarAccess.getFunctionDeclaratorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParametersAndQualifiers
entryRuleParametersAndQualifiers 
:
{ before(grammarAccess.getParametersAndQualifiersRule()); }
	 ruleParametersAndQualifiers
{ after(grammarAccess.getParametersAndQualifiersRule()); } 
	 EOF 
;

// Rule ParametersAndQualifiers
ruleParametersAndQualifiers
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParametersAndQualifiersAccess().getGroup()); }
(rule__ParametersAndQualifiers__Group__0)
{ after(grammarAccess.getParametersAndQualifiersAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDeclaratorId
entryRuleDeclaratorId 
:
{ before(grammarAccess.getDeclaratorIdRule()); }
	 ruleDeclaratorId
{ after(grammarAccess.getDeclaratorIdRule()); } 
	 EOF 
;

// Rule DeclaratorId
ruleDeclaratorId
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclaratorIdAccess().getGroup()); }
(rule__DeclaratorId__Group__0)
{ after(grammarAccess.getDeclaratorIdAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeId
entryRuleTypeId 
:
{ before(grammarAccess.getTypeIdRule()); }
	 ruleTypeId
{ after(grammarAccess.getTypeIdRule()); } 
	 EOF 
;

// Rule TypeId
ruleTypeId
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getTypeIdAccess().getTypeSpecifierParserRuleCall()); }
(	ruleTypeSpecifier)
{ after(grammarAccess.getTypeIdAccess().getTypeSpecifierParserRuleCall()); }
)
(
{ before(grammarAccess.getTypeIdAccess().getTypeSpecifierParserRuleCall()); }
(	ruleTypeSpecifier)*
{ after(grammarAccess.getTypeIdAccess().getTypeSpecifierParserRuleCall()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameterDeclarationClause
entryRuleParameterDeclarationClause 
:
{ before(grammarAccess.getParameterDeclarationClauseRule()); }
	 ruleParameterDeclarationClause
{ after(grammarAccess.getParameterDeclarationClauseRule()); } 
	 EOF 
;

// Rule ParameterDeclarationClause
ruleParameterDeclarationClause
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterDeclarationClauseAccess().getAlternatives()); }
(rule__ParameterDeclarationClause__Alternatives)
{ after(grammarAccess.getParameterDeclarationClauseAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameterDeclarationList
entryRuleParameterDeclarationList 
:
{ before(grammarAccess.getParameterDeclarationListRule()); }
	 ruleParameterDeclarationList
{ after(grammarAccess.getParameterDeclarationListRule()); } 
	 EOF 
;

// Rule ParameterDeclarationList
ruleParameterDeclarationList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterDeclarationListAccess().getGroup()); }
(rule__ParameterDeclarationList__Group__0)
{ after(grammarAccess.getParameterDeclarationListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParameterDeclaration
entryRuleParameterDeclaration 
:
{ before(grammarAccess.getParameterDeclarationRule()); }
	 ruleParameterDeclaration
{ after(grammarAccess.getParameterDeclarationRule()); } 
	 EOF 
;

// Rule ParameterDeclaration
ruleParameterDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParameterDeclarationAccess().getGroup()); }
(rule__ParameterDeclaration__Group__0)
{ after(grammarAccess.getParameterDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionBody
entryRuleFunctionBody 
:
{ before(grammarAccess.getFunctionBodyRule()); }
	 ruleFunctionBody
{ after(grammarAccess.getFunctionBodyRule()); } 
	 EOF 
;

// Rule FunctionBody
ruleFunctionBody
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionBodyAccess().getAlternatives()); }
(rule__FunctionBody__Alternatives)
{ after(grammarAccess.getFunctionBodyAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInitializer
entryRuleInitializer 
:
{ before(grammarAccess.getInitializerRule()); }
	 ruleInitializer
{ after(grammarAccess.getInitializerRule()); } 
	 EOF 
;

// Rule Initializer
ruleInitializer
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInitializerAccess().getAlternatives()); }
(rule__Initializer__Alternatives)
{ after(grammarAccess.getInitializerAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBraceOrEqualInitializer
entryRuleBraceOrEqualInitializer 
:
{ before(grammarAccess.getBraceOrEqualInitializerRule()); }
	 ruleBraceOrEqualInitializer
{ after(grammarAccess.getBraceOrEqualInitializerRule()); } 
	 EOF 
;

// Rule BraceOrEqualInitializer
ruleBraceOrEqualInitializer
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBraceOrEqualInitializerAccess().getAlternatives()); }
(rule__BraceOrEqualInitializer__Alternatives)
{ after(grammarAccess.getBraceOrEqualInitializerAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInitializerClause
entryRuleInitializerClause 
:
{ before(grammarAccess.getInitializerClauseRule()); }
	 ruleInitializerClause
{ after(grammarAccess.getInitializerClauseRule()); } 
	 EOF 
;

// Rule InitializerClause
ruleInitializerClause
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInitializerClauseAccess().getAlternatives()); }
(rule__InitializerClause__Alternatives)
{ after(grammarAccess.getInitializerClauseAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInitializerList
entryRuleInitializerList 
:
{ before(grammarAccess.getInitializerListRule()); }
	 ruleInitializerList
{ after(grammarAccess.getInitializerListRule()); } 
	 EOF 
;

// Rule InitializerList
ruleInitializerList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInitializerListAccess().getGroup()); }
(rule__InitializerList__Group__0)
{ after(grammarAccess.getInitializerListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBracedInitializerList
entryRuleBracedInitializerList 
:
{ before(grammarAccess.getBracedInitializerListRule()); }
	 ruleBracedInitializerList
{ after(grammarAccess.getBracedInitializerListRule()); } 
	 EOF 
;

// Rule BracedInitializerList
ruleBracedInitializerList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBracedInitializerListAccess().getGroup()); }
(rule__BracedInitializerList__Group__0)
{ after(grammarAccess.getBracedInitializerListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClassSpecifier
entryRuleClassSpecifier 
:
{ before(grammarAccess.getClassSpecifierRule()); }
	 ruleClassSpecifier
{ after(grammarAccess.getClassSpecifierRule()); } 
	 EOF 
;

// Rule ClassSpecifier
ruleClassSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClassSpecifierAccess().getGroup()); }
(rule__ClassSpecifier__Group__0)
{ after(grammarAccess.getClassSpecifierAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClassHead
entryRuleClassHead 
:
{ before(grammarAccess.getClassHeadRule()); }
	 ruleClassHead
{ after(grammarAccess.getClassHeadRule()); } 
	 EOF 
;

// Rule ClassHead
ruleClassHead
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClassHeadAccess().getGroup()); }
(rule__ClassHead__Group__0)
{ after(grammarAccess.getClassHeadAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClassVirtualSpecifier
entryRuleClassVirtualSpecifier 
:
{ before(grammarAccess.getClassVirtualSpecifierRule()); }
	 ruleClassVirtualSpecifier
{ after(grammarAccess.getClassVirtualSpecifierRule()); } 
	 EOF 
;

// Rule ClassVirtualSpecifier
ruleClassVirtualSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClassVirtualSpecifierAccess().getAlternatives()); }
(rule__ClassVirtualSpecifier__Alternatives)
{ after(grammarAccess.getClassVirtualSpecifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClassKey
entryRuleClassKey 
:
{ before(grammarAccess.getClassKeyRule()); }
	 ruleClassKey
{ after(grammarAccess.getClassKeyRule()); } 
	 EOF 
;

// Rule ClassKey
ruleClassKey
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClassKeyAccess().getAlternatives()); }
(rule__ClassKey__Alternatives)
{ after(grammarAccess.getClassKeyAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMemberSpecification
entryRuleMemberSpecification 
:
{ before(grammarAccess.getMemberSpecificationRule()); }
	 ruleMemberSpecification
{ after(grammarAccess.getMemberSpecificationRule()); } 
	 EOF 
;

// Rule MemberSpecification
ruleMemberSpecification
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMemberSpecificationAccess().getGroup()); }
(rule__MemberSpecification__Group__0)
{ after(grammarAccess.getMemberSpecificationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMemberDeclaration
entryRuleMemberDeclaration 
:
{ before(grammarAccess.getMemberDeclarationRule()); }
	 ruleMemberDeclaration
{ after(grammarAccess.getMemberDeclarationRule()); } 
	 EOF 
;

// Rule MemberDeclaration
ruleMemberDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMemberDeclarationAccess().getAlternatives()); }
(rule__MemberDeclaration__Alternatives)
{ after(grammarAccess.getMemberDeclarationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMemberOrFunctionDeclaration
entryRuleMemberOrFunctionDeclaration 
:
{ before(grammarAccess.getMemberOrFunctionDeclarationRule()); }
	 ruleMemberOrFunctionDeclaration
{ after(grammarAccess.getMemberOrFunctionDeclarationRule()); } 
	 EOF 
;

// Rule MemberOrFunctionDeclaration
ruleMemberOrFunctionDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMemberOrFunctionDeclarationAccess().getGroup()); }
(rule__MemberOrFunctionDeclaration__Group__0)
{ after(grammarAccess.getMemberOrFunctionDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMemberDeclarationSuffix
entryRuleMemberDeclarationSuffix 
:
{ before(grammarAccess.getMemberDeclarationSuffixRule()); }
	 ruleMemberDeclarationSuffix
{ after(grammarAccess.getMemberDeclarationSuffixRule()); } 
	 EOF 
;

// Rule MemberDeclarationSuffix
ruleMemberDeclarationSuffix
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMemberDeclarationSuffixAccess().getMemberDeclaratorListParserRuleCall()); }
(	ruleMemberDeclaratorList)?
{ after(grammarAccess.getMemberDeclarationSuffixAccess().getMemberDeclaratorListParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMemberDeclaratorList
entryRuleMemberDeclaratorList 
:
{ before(grammarAccess.getMemberDeclaratorListRule()); }
	 ruleMemberDeclaratorList
{ after(grammarAccess.getMemberDeclaratorListRule()); } 
	 EOF 
;

// Rule MemberDeclaratorList
ruleMemberDeclaratorList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMemberDeclaratorListAccess().getGroup()); }
(rule__MemberDeclaratorList__Group__0)
{ after(grammarAccess.getMemberDeclaratorListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMemberDeclarator
entryRuleMemberDeclarator 
:
{ before(grammarAccess.getMemberDeclaratorRule()); }
	 ruleMemberDeclarator
{ after(grammarAccess.getMemberDeclaratorRule()); } 
	 EOF 
;

// Rule MemberDeclarator
ruleMemberDeclarator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMemberDeclaratorAccess().getGroup()); }
(rule__MemberDeclarator__Group__0)
{ after(grammarAccess.getMemberDeclaratorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVirtualSpecifier
entryRuleVirtualSpecifier 
:
{ before(grammarAccess.getVirtualSpecifierRule()); }
	 ruleVirtualSpecifier
{ after(grammarAccess.getVirtualSpecifierRule()); } 
	 EOF 
;

// Rule VirtualSpecifier
ruleVirtualSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVirtualSpecifierAccess().getAlternatives()); }
(rule__VirtualSpecifier__Alternatives)
{ after(grammarAccess.getVirtualSpecifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePureSpecifier
entryRulePureSpecifier 
:
{ before(grammarAccess.getPureSpecifierRule()); }
	 rulePureSpecifier
{ after(grammarAccess.getPureSpecifierRule()); } 
	 EOF 
;

// Rule PureSpecifier
rulePureSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPureSpecifierAccess().getGroup()); }
(rule__PureSpecifier__Group__0)
{ after(grammarAccess.getPureSpecifierAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBaseClause
entryRuleBaseClause 
:
{ before(grammarAccess.getBaseClauseRule()); }
	 ruleBaseClause
{ after(grammarAccess.getBaseClauseRule()); } 
	 EOF 
;

// Rule BaseClause
ruleBaseClause
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBaseClauseAccess().getGroup()); }
(rule__BaseClause__Group__0)
{ after(grammarAccess.getBaseClauseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBaseSpecifierList
entryRuleBaseSpecifierList 
:
{ before(grammarAccess.getBaseSpecifierListRule()); }
	 ruleBaseSpecifierList
{ after(grammarAccess.getBaseSpecifierListRule()); } 
	 EOF 
;

// Rule BaseSpecifierList
ruleBaseSpecifierList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBaseSpecifierListAccess().getGroup()); }
(rule__BaseSpecifierList__Group__0)
{ after(grammarAccess.getBaseSpecifierListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBaseSpecifier
entryRuleBaseSpecifier 
:
{ before(grammarAccess.getBaseSpecifierRule()); }
	 ruleBaseSpecifier
{ after(grammarAccess.getBaseSpecifierRule()); } 
	 EOF 
;

// Rule BaseSpecifier
ruleBaseSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBaseSpecifierAccess().getGroup()); }
(rule__BaseSpecifier__Group__0)
{ after(grammarAccess.getBaseSpecifierAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClassOrDeclarationType
entryRuleClassOrDeclarationType 
:
{ before(grammarAccess.getClassOrDeclarationTypeRule()); }
	 ruleClassOrDeclarationType
{ after(grammarAccess.getClassOrDeclarationTypeRule()); } 
	 EOF 
;

// Rule ClassOrDeclarationType
ruleClassOrDeclarationType
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClassOrDeclarationTypeAccess().getAlternatives()); }
(rule__ClassOrDeclarationType__Alternatives)
{ after(grammarAccess.getClassOrDeclarationTypeAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAccessSpecifier
entryRuleAccessSpecifier 
:
{ before(grammarAccess.getAccessSpecifierRule()); }
	 ruleAccessSpecifier
{ after(grammarAccess.getAccessSpecifierRule()); } 
	 EOF 
;

// Rule AccessSpecifier
ruleAccessSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAccessSpecifierAccess().getAlternatives()); }
(rule__AccessSpecifier__Alternatives)
{ after(grammarAccess.getAccessSpecifierAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOperatorFunctionId
entryRuleOperatorFunctionId 
:
{ before(grammarAccess.getOperatorFunctionIdRule()); }
	 ruleOperatorFunctionId
{ after(grammarAccess.getOperatorFunctionIdRule()); } 
	 EOF 
;

// Rule OperatorFunctionId
ruleOperatorFunctionId
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOperatorFunctionIdAccess().getGroup()); }
(rule__OperatorFunctionId__Group__0)
{ after(grammarAccess.getOperatorFunctionIdAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOverloadableOperator
entryRuleOverloadableOperator 
:
{ before(grammarAccess.getOverloadableOperatorRule()); }
	 ruleOverloadableOperator
{ after(grammarAccess.getOverloadableOperatorRule()); } 
	 EOF 
;

// Rule OverloadableOperator
ruleOverloadableOperator
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOverloadableOperatorAccess().getAlternatives()); }
(rule__OverloadableOperator__Alternatives)
{ after(grammarAccess.getOverloadableOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLiteralOperatorId
entryRuleLiteralOperatorId 
:
{ before(grammarAccess.getLiteralOperatorIdRule()); }
	 ruleLiteralOperatorId
{ after(grammarAccess.getLiteralOperatorIdRule()); } 
	 EOF 
;

// Rule LiteralOperatorId
ruleLiteralOperatorId
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLiteralOperatorIdAccess().getGroup()); }
(rule__LiteralOperatorId__Group__0)
{ after(grammarAccess.getLiteralOperatorIdAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTemplateDeclaration
entryRuleTemplateDeclaration 
:
{ before(grammarAccess.getTemplateDeclarationRule()); }
	 ruleTemplateDeclaration
{ after(grammarAccess.getTemplateDeclarationRule()); } 
	 EOF 
;

// Rule TemplateDeclaration
ruleTemplateDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTemplateDeclarationAccess().getGroup()); }
(rule__TemplateDeclaration__Group__0)
{ after(grammarAccess.getTemplateDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTemplateParameterList
entryRuleTemplateParameterList 
:
{ before(grammarAccess.getTemplateParameterListRule()); }
	 ruleTemplateParameterList
{ after(grammarAccess.getTemplateParameterListRule()); } 
	 EOF 
;

// Rule TemplateParameterList
ruleTemplateParameterList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTemplateParameterListAccess().getGroup()); }
(rule__TemplateParameterList__Group__0)
{ after(grammarAccess.getTemplateParameterListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTemplateParameter
entryRuleTemplateParameter 
:
{ before(grammarAccess.getTemplateParameterRule()); }
	 ruleTemplateParameter
{ after(grammarAccess.getTemplateParameterRule()); } 
	 EOF 
;

// Rule TemplateParameter
ruleTemplateParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTemplateParameterAccess().getAlternatives()); }
(rule__TemplateParameter__Alternatives)
{ after(grammarAccess.getTemplateParameterAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeParameter
entryRuleTypeParameter 
:
{ before(grammarAccess.getTypeParameterRule()); }
	 ruleTypeParameter
{ after(grammarAccess.getTypeParameterRule()); } 
	 EOF 
;

// Rule TypeParameter
ruleTypeParameter
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeParameterAccess().getGroup()); }
(rule__TypeParameter__Group__0)
{ after(grammarAccess.getTypeParameterAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimpleTemplateId
entryRuleSimpleTemplateId 
:
{ before(grammarAccess.getSimpleTemplateIdRule()); }
	 ruleSimpleTemplateId
{ after(grammarAccess.getSimpleTemplateIdRule()); } 
	 EOF 
;

// Rule SimpleTemplateId
ruleSimpleTemplateId
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimpleTemplateIdAccess().getGroup()); }
(rule__SimpleTemplateId__Group__0)
{ after(grammarAccess.getSimpleTemplateIdAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleTemplateArgumentList
entryRuleTemplateArgumentList 
:
{ before(grammarAccess.getTemplateArgumentListRule()); }
	 ruleTemplateArgumentList
{ after(grammarAccess.getTemplateArgumentListRule()); } 
	 EOF 
;

// Rule TemplateArgumentList
ruleTemplateArgumentList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTemplateArgumentListAccess().getGroup()); }
(rule__TemplateArgumentList__Group__0)
{ after(grammarAccess.getTemplateArgumentListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTemplateArgument
entryRuleTemplateArgument 
:
{ before(grammarAccess.getTemplateArgumentRule()); }
	 ruleTemplateArgument
{ after(grammarAccess.getTemplateArgumentRule()); } 
	 EOF 
;

// Rule TemplateArgument
ruleTemplateArgument
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTemplateArgumentAccess().getAlternatives()); }
(rule__TemplateArgument__Alternatives)
{ after(grammarAccess.getTemplateArgumentAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypenameSpecifier
entryRuleTypenameSpecifier 
:
{ before(grammarAccess.getTypenameSpecifierRule()); }
	 ruleTypenameSpecifier
{ after(grammarAccess.getTypenameSpecifierRule()); } 
	 EOF 
;

// Rule TypenameSpecifier
ruleTypenameSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypenameSpecifierAccess().getGroup()); }
(rule__TypenameSpecifier__Group__0)
{ after(grammarAccess.getTypenameSpecifierAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTryBlock
entryRuleTryBlock 
:
{ before(grammarAccess.getTryBlockRule()); }
	 ruleTryBlock
{ after(grammarAccess.getTryBlockRule()); } 
	 EOF 
;

// Rule TryBlock
ruleTryBlock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTryBlockAccess().getGroup()); }
(rule__TryBlock__Group__0)
{ after(grammarAccess.getTryBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionTryBlock
entryRuleFunctionTryBlock 
:
{ before(grammarAccess.getFunctionTryBlockRule()); }
	 ruleFunctionTryBlock
{ after(grammarAccess.getFunctionTryBlockRule()); } 
	 EOF 
;

// Rule FunctionTryBlock
ruleFunctionTryBlock
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionTryBlockAccess().getGroup()); }
(rule__FunctionTryBlock__Group__0)
{ after(grammarAccess.getFunctionTryBlockAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleHandler
entryRuleHandler 
:
{ before(grammarAccess.getHandlerRule()); }
	 ruleHandler
{ after(grammarAccess.getHandlerRule()); } 
	 EOF 
;

// Rule Handler
ruleHandler
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHandlerAccess().getGroup()); }
(rule__Handler__Group__0)
{ after(grammarAccess.getHandlerAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExceptionDeclaration
entryRuleExceptionDeclaration 
:
{ before(grammarAccess.getExceptionDeclarationRule()); }
	 ruleExceptionDeclaration
{ after(grammarAccess.getExceptionDeclarationRule()); } 
	 EOF 
;

// Rule ExceptionDeclaration
ruleExceptionDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExceptionDeclarationAccess().getAlternatives()); }
(rule__ExceptionDeclaration__Alternatives)
{ after(grammarAccess.getExceptionDeclarationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleExceptionSpecification
entryRuleExceptionSpecification 
:
{ before(grammarAccess.getExceptionSpecificationRule()); }
	 ruleExceptionSpecification
{ after(grammarAccess.getExceptionSpecificationRule()); } 
	 EOF 
;

// Rule ExceptionSpecification
ruleExceptionSpecification
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExceptionSpecificationAccess().getAlternatives()); }
(rule__ExceptionSpecification__Alternatives)
{ after(grammarAccess.getExceptionSpecificationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDynamicExceptionSpecification
entryRuleDynamicExceptionSpecification 
:
{ before(grammarAccess.getDynamicExceptionSpecificationRule()); }
	 ruleDynamicExceptionSpecification
{ after(grammarAccess.getDynamicExceptionSpecificationRule()); } 
	 EOF 
;

// Rule DynamicExceptionSpecification
ruleDynamicExceptionSpecification
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDynamicExceptionSpecificationAccess().getGroup()); }
(rule__DynamicExceptionSpecification__Group__0)
{ after(grammarAccess.getDynamicExceptionSpecificationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNoexceptSpecification
entryRuleNoexceptSpecification 
:
{ before(grammarAccess.getNoexceptSpecificationRule()); }
	 ruleNoexceptSpecification
{ after(grammarAccess.getNoexceptSpecificationRule()); } 
	 EOF 
;

// Rule NoexceptSpecification
ruleNoexceptSpecification
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNoexceptSpecificationAccess().getGroup()); }
(rule__NoexceptSpecification__Group__0)
{ after(grammarAccess.getNoexceptSpecificationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getExpressionKeyword()); }

	'Expression' 

{ after(grammarAccess.getExpressionAccess().getExpressionKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpressionList
entryRuleExpressionList 
:
{ before(grammarAccess.getExpressionListRule()); }
	 ruleExpressionList
{ after(grammarAccess.getExpressionListRule()); } 
	 EOF 
;

// Rule ExpressionList
ruleExpressionList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionListAccess().getGroup()); }
(rule__ExpressionList__Group__0)
{ after(grammarAccess.getExpressionListAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExplicitSpecialization
entryRuleExplicitSpecialization 
:
{ before(grammarAccess.getExplicitSpecializationRule()); }
	 ruleExplicitSpecialization
{ after(grammarAccess.getExplicitSpecializationRule()); } 
	 EOF 
;

// Rule ExplicitSpecialization
ruleExplicitSpecialization
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExplicitSpecializationAccess().getExplicitSpecializationKeyword()); }

	'ExplicitSpecialization' 

{ after(grammarAccess.getExplicitSpecializationAccess().getExplicitSpecializationKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExplicitInstantiation
entryRuleExplicitInstantiation 
:
{ before(grammarAccess.getExplicitInstantiationRule()); }
	 ruleExplicitInstantiation
{ after(grammarAccess.getExplicitInstantiationRule()); } 
	 EOF 
;

// Rule ExplicitInstantiation
ruleExplicitInstantiation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExplicitInstantiationAccess().getExplicitInstantiationKeyword()); }

	'ExplicitInstantiation' 

{ after(grammarAccess.getExplicitInstantiationAccess().getExplicitInstantiationKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCvQualifier
entryRuleCvQualifier 
:
{ before(grammarAccess.getCvQualifierRule()); }
	 ruleCvQualifier
{ after(grammarAccess.getCvQualifierRule()); } 
	 EOF 
;

// Rule CvQualifier
ruleCvQualifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCvQualifierAccess().getCvQualifierKeyword()); }

	'CvQualifier' 

{ after(grammarAccess.getCvQualifierAccess().getCvQualifierKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConstantExpression
entryRuleConstantExpression 
:
{ before(grammarAccess.getConstantExpressionRule()); }
	 ruleConstantExpression
{ after(grammarAccess.getConstantExpressionRule()); } 
	 EOF 
;

// Rule ConstantExpression
ruleConstantExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConstantExpressionAccess().getConstantExpressionKeyword()); }

	'ConstantExpression' 

{ after(grammarAccess.getConstantExpressionAccess().getConstantExpressionKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIdExpression
entryRuleIdExpression 
:
{ before(grammarAccess.getIdExpressionRule()); }
	 ruleIdExpression
{ after(grammarAccess.getIdExpressionRule()); } 
	 EOF 
;

// Rule IdExpression
ruleIdExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIdExpressionAccess().getIdExpressionKeyword()); }

	'IdExpression' 

{ after(grammarAccess.getIdExpressionAccess().getIdExpressionKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNestedNameSpecifier
entryRuleNestedNameSpecifier 
:
{ before(grammarAccess.getNestedNameSpecifierRule()); }
	 ruleNestedNameSpecifier
{ after(grammarAccess.getNestedNameSpecifierRule()); } 
	 EOF 
;

// Rule NestedNameSpecifier
ruleNestedNameSpecifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNestedNameSpecifierAccess().getNestedNameSpecifierKeyword()); }

	'NestedNameSpecifier' 

{ after(grammarAccess.getNestedNameSpecifierAccess().getNestedNameSpecifierKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAssignmentExpression
entryRuleAssignmentExpression 
:
{ before(grammarAccess.getAssignmentExpressionRule()); }
	 ruleAssignmentExpression
{ after(grammarAccess.getAssignmentExpressionRule()); } 
	 EOF 
;

// Rule AssignmentExpression
ruleAssignmentExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionKeyword()); }

	'AssignmentExpression' 

{ after(grammarAccess.getAssignmentExpressionAccess().getAssignmentExpressionKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCtorInitializer
entryRuleCtorInitializer 
:
{ before(grammarAccess.getCtorInitializerRule()); }
	 ruleCtorInitializer
{ after(grammarAccess.getCtorInitializerRule()); } 
	 EOF 
;

// Rule CtorInitializer
ruleCtorInitializer
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCtorInitializerAccess().getCtorInitializerKeyword()); }

	'CtorInitializer' 

{ after(grammarAccess.getCtorInitializerAccess().getCtorInitializerKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTypeIdList
entryRuleTypeIdList 
:
{ before(grammarAccess.getTypeIdListRule()); }
	 ruleTypeIdList
{ after(grammarAccess.getTypeIdListRule()); } 
	 EOF 
;

// Rule TypeIdList
ruleTypeIdList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTypeIdListAccess().getTypeIdListKeyword()); }

	'TypeIdList' 

{ after(grammarAccess.getTypeIdListAccess().getTypeIdListKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleUnqualifiedId
entryRuleUnqualifiedId 
:
{ before(grammarAccess.getUnqualifiedIdRule()); }
	 ruleUnqualifiedId
{ after(grammarAccess.getUnqualifiedIdRule()); } 
	 EOF 
;

// Rule UnqualifiedId
ruleUnqualifiedId
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getUnqualifiedIdAccess().getUnqualifiedIdKeyword()); }

	'UnqualifiedId' 

{ after(grammarAccess.getUnqualifiedIdAccess().getUnqualifiedIdKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}





rule__Literal__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
{ after(grammarAccess.getLiteralAccess().getINTTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getCHARACTER_LITERALTerminalRuleCall_1()); }
	RULE_CHARACTER_LITERAL
{ after(grammarAccess.getLiteralAccess().getCHARACTER_LITERALTerminalRuleCall_1()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getFLOATING_LITERALTerminalRuleCall_2()); }
	RULE_FLOATING_LITERAL
{ after(grammarAccess.getLiteralAccess().getFLOATING_LITERALTerminalRuleCall_2()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getSTRING_LITERALTerminalRuleCall_3()); }
	RULE_STRING_LITERAL
{ after(grammarAccess.getLiteralAccess().getSTRING_LITERALTerminalRuleCall_3()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getGroup_4()); }
(rule__Literal__Group_4__0)
{ after(grammarAccess.getLiteralAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getTrueKeyword_4_0_0()); }

	'true' 

{ after(grammarAccess.getLiteralAccess().getTrueKeyword_4_0_0()); }
)

    |(
{ before(grammarAccess.getLiteralAccess().getFalseKeyword_4_0_1()); }

	'false' 

{ after(grammarAccess.getLiteralAccess().getFalseKeyword_4_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getLabeledStatementParserRuleCall_0()); }
	ruleLabeledStatement
{ after(grammarAccess.getStatementAccess().getLabeledStatementParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getExpressionStatementParserRuleCall_1()); }
	ruleExpressionStatement
{ after(grammarAccess.getStatementAccess().getExpressionStatementParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getCompoundStatementParserRuleCall_2()); }
	ruleCompoundStatement
{ after(grammarAccess.getStatementAccess().getCompoundStatementParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getSelectionStatementParserRuleCall_3()); }
	ruleSelectionStatement
{ after(grammarAccess.getStatementAccess().getSelectionStatementParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getIterationStatementParserRuleCall_4()); }
	ruleIterationStatement
{ after(grammarAccess.getStatementAccess().getIterationStatementParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getJumpStatementParserRuleCall_5()); }
	ruleJumpStatement
{ after(grammarAccess.getStatementAccess().getJumpStatementParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getDeclarationStatementParserRuleCall_6()); }
	ruleDeclarationStatement
{ after(grammarAccess.getStatementAccess().getDeclarationStatementParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getStatementAccess().getTryBlockParserRuleCall_7()); }
	ruleTryBlock
{ after(grammarAccess.getStatementAccess().getTryBlockParserRuleCall_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledStatement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabeledStatementAccess().getGroup_0()); }
(rule__LabeledStatement__Group_0__0)
{ after(grammarAccess.getLabeledStatementAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getLabeledStatementAccess().getGroup_1()); }
(rule__LabeledStatement__Group_1__0)
{ after(grammarAccess.getLabeledStatementAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getLabeledStatementAccess().getGroup_2()); }
(rule__LabeledStatement__Group_2__0)
{ after(grammarAccess.getLabeledStatementAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionStatement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionStatementAccess().getGroup_0()); }
(rule__SelectionStatement__Group_0__0)
{ after(grammarAccess.getSelectionStatementAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getSelectionStatementAccess().getGroup_1()); }
(rule__SelectionStatement__Group_1__0)
{ after(grammarAccess.getSelectionStatementAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getExpressionParserRuleCall_0()); }
	ruleExpression
{ after(grammarAccess.getConditionAccess().getExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getConditionAccess().getGroup_1()); }
(rule__Condition__Group_1__0)
{ after(grammarAccess.getConditionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Alternatives_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getGroup_1_2_0()); }
(rule__Condition__Group_1_2_0__0)
{ after(grammarAccess.getConditionAccess().getGroup_1_2_0()); }
)

    |(
{ before(grammarAccess.getConditionAccess().getBracedInitializerListParserRuleCall_1_2_1()); }
	ruleBracedInitializerList
{ after(grammarAccess.getConditionAccess().getBracedInitializerListParserRuleCall_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationStatementAccess().getGroup_0()); }
(rule__IterationStatement__Group_0__0)
{ after(grammarAccess.getIterationStatementAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getIterationStatementAccess().getGroup_1()); }
(rule__IterationStatement__Group_1__0)
{ after(grammarAccess.getIterationStatementAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getIterationStatementAccess().getGroup_2()); }
(rule__IterationStatement__Group_2__0)
{ after(grammarAccess.getIterationStatementAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ForInitializationStatement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getForInitializationStatementAccess().getExpressionStatementParserRuleCall_0()); }
	ruleExpressionStatement
{ after(grammarAccess.getForInitializationStatementAccess().getExpressionStatementParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getForInitializationStatementAccess().getSimpleDeclarationParserRuleCall_1()); }
	ruleSimpleDeclaration
{ after(grammarAccess.getForInitializationStatementAccess().getSimpleDeclarationParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JumpStatement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJumpStatementAccess().getGroup_0()); }
(rule__JumpStatement__Group_0__0)
{ after(grammarAccess.getJumpStatementAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getJumpStatementAccess().getGroup_1()); }
(rule__JumpStatement__Group_1__0)
{ after(grammarAccess.getJumpStatementAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getJumpStatementAccess().getGroup_2()); }
(rule__JumpStatement__Group_2__0)
{ after(grammarAccess.getJumpStatementAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getJumpStatementAccess().getGroup_3()); }
(rule__JumpStatement__Group_3__0)
{ after(grammarAccess.getJumpStatementAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__JumpStatement__Alternatives_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJumpStatementAccess().getExpressionParserRuleCall_2_1_0()); }
	ruleExpression
{ after(grammarAccess.getJumpStatementAccess().getExpressionParserRuleCall_2_1_0()); }
)

    |(
{ before(grammarAccess.getJumpStatementAccess().getBracedInitializerListParserRuleCall_2_1_1()); }
	ruleBracedInitializerList
{ after(grammarAccess.getJumpStatementAccess().getBracedInitializerListParserRuleCall_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationStatement__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationStatementAccess().getSimpleDeclarationParserRuleCall_0()); }
	ruleSimpleDeclaration
{ after(grammarAccess.getDeclarationStatementAccess().getSimpleDeclarationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getDeclarationStatementAccess().getBlockDeclarationParserRuleCall_1()); }
	ruleBlockDeclaration
{ after(grammarAccess.getDeclarationStatementAccess().getBlockDeclarationParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getSimpleOrFunctionDeclarationParserRuleCall_0()); }
	ruleSimpleOrFunctionDeclaration
{ after(grammarAccess.getDeclarationAccess().getSimpleOrFunctionDeclarationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getBlockDeclarationParserRuleCall_1()); }
	ruleBlockDeclaration
{ after(grammarAccess.getDeclarationAccess().getBlockDeclarationParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getTemplateDeclarationParserRuleCall_2()); }
	ruleTemplateDeclaration
{ after(grammarAccess.getDeclarationAccess().getTemplateDeclarationParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getExplicitInstantiationParserRuleCall_3()); }
	ruleExplicitInstantiation
{ after(grammarAccess.getDeclarationAccess().getExplicitInstantiationParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getExplicitSpecializationParserRuleCall_4()); }
	ruleExplicitSpecialization
{ after(grammarAccess.getDeclarationAccess().getExplicitSpecializationParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getLinkageSpecificationParserRuleCall_5()); }
	ruleLinkageSpecification
{ after(grammarAccess.getDeclarationAccess().getLinkageSpecificationParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getDeclarationAccess().getNamespaceDefinitionParserRuleCall_6()); }
	ruleNamespaceDefinition
{ after(grammarAccess.getDeclarationAccess().getNamespaceDefinitionParserRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BlockDeclaration__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBlockDeclarationAccess().getAsmDefinitionParserRuleCall_0()); }
	ruleAsmDefinition
{ after(grammarAccess.getBlockDeclarationAccess().getAsmDefinitionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getBlockDeclarationAccess().getNamespaceAliasDefinitionParserRuleCall_1()); }
	ruleNamespaceAliasDefinition
{ after(grammarAccess.getBlockDeclarationAccess().getNamespaceAliasDefinitionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getBlockDeclarationAccess().getUsingDeclarationParserRuleCall_2()); }
	ruleUsingDeclaration
{ after(grammarAccess.getBlockDeclarationAccess().getUsingDeclarationParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getBlockDeclarationAccess().getStaticAssertDeclarationParserRuleCall_3()); }
	ruleStaticAssertDeclaration
{ after(grammarAccess.getBlockDeclarationAccess().getStaticAssertDeclarationParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getBlockDeclarationAccess().getAliasDeclarationParserRuleCall_4()); }
	ruleAliasDeclaration
{ after(grammarAccess.getBlockDeclarationAccess().getAliasDeclarationParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleOrFunctionDeclaration__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleOrFunctionDeclarationAccess().getSimpleDeclarationSuffixParserRuleCall_1_0()); }
	ruleSimpleDeclarationSuffix
{ after(grammarAccess.getSimpleOrFunctionDeclarationAccess().getSimpleDeclarationSuffixParserRuleCall_1_0()); }
)

    |(
{ before(grammarAccess.getSimpleOrFunctionDeclarationAccess().getFunctionDeclarationSuffixParserRuleCall_1_1()); }
	ruleFunctionDeclarationSuffix
{ after(grammarAccess.getSimpleOrFunctionDeclarationAccess().getFunctionDeclarationSuffixParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclarationSuffix__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationSuffixAccess().getFunctionBodyParserRuleCall_1_0()); }
	ruleFunctionBody
{ after(grammarAccess.getFunctionDeclarationSuffixAccess().getFunctionBodyParserRuleCall_1_0()); }
)

    |(
{ before(grammarAccess.getFunctionDeclarationSuffixAccess().getGroup_1_1()); }
(rule__FunctionDeclarationSuffix__Group_1_1__0)
{ after(grammarAccess.getFunctionDeclarationSuffixAccess().getGroup_1_1()); }
)

    |(
{ before(grammarAccess.getFunctionDeclarationSuffixAccess().getGroup_1_2()); }
(rule__FunctionDeclarationSuffix__Group_1_2__0)
{ after(grammarAccess.getFunctionDeclarationSuffixAccess().getGroup_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationSpecifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationSpecifierAccess().getStorageClassSpecifierParserRuleCall_0()); }
	ruleStorageClassSpecifier
{ after(grammarAccess.getDeclarationSpecifierAccess().getStorageClassSpecifierParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getDeclarationSpecifierAccess().getTypeSpecifierParserRuleCall_1()); }
	ruleTypeSpecifier
{ after(grammarAccess.getDeclarationSpecifierAccess().getTypeSpecifierParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getDeclarationSpecifierAccess().getFunctionSpecifierParserRuleCall_2()); }
	ruleFunctionSpecifier
{ after(grammarAccess.getDeclarationSpecifierAccess().getFunctionSpecifierParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getDeclarationSpecifierAccess().getFriendKeyword_3()); }

	'friend' 

{ after(grammarAccess.getDeclarationSpecifierAccess().getFriendKeyword_3()); }
)

    |(
{ before(grammarAccess.getDeclarationSpecifierAccess().getTypedefKeyword_4()); }

	'typedef' 

{ after(grammarAccess.getDeclarationSpecifierAccess().getTypedefKeyword_4()); }
)

    |(
{ before(grammarAccess.getDeclarationSpecifierAccess().getConstexprKeyword_5()); }

	'constexpr' 

{ after(grammarAccess.getDeclarationSpecifierAccess().getConstexprKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StorageClassSpecifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStorageClassSpecifierAccess().getRegisterKeyword_0()); }

	'register' 

{ after(grammarAccess.getStorageClassSpecifierAccess().getRegisterKeyword_0()); }
)

    |(
{ before(grammarAccess.getStorageClassSpecifierAccess().getStaticKeyword_1()); }

	'static' 

{ after(grammarAccess.getStorageClassSpecifierAccess().getStaticKeyword_1()); }
)

    |(
{ before(grammarAccess.getStorageClassSpecifierAccess().getThread_localKeyword_2()); }

	'thread_local' 

{ after(grammarAccess.getStorageClassSpecifierAccess().getThread_localKeyword_2()); }
)

    |(
{ before(grammarAccess.getStorageClassSpecifierAccess().getExternKeyword_3()); }

	'extern' 

{ after(grammarAccess.getStorageClassSpecifierAccess().getExternKeyword_3()); }
)

    |(
{ before(grammarAccess.getStorageClassSpecifierAccess().getMutableKeyword_4()); }

	'mutable' 

{ after(grammarAccess.getStorageClassSpecifierAccess().getMutableKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionSpecifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionSpecifierAccess().getInlineKeyword_0()); }

	'inline' 

{ after(grammarAccess.getFunctionSpecifierAccess().getInlineKeyword_0()); }
)

    |(
{ before(grammarAccess.getFunctionSpecifierAccess().getVirtualKeyword_1()); }

	'virtual' 

{ after(grammarAccess.getFunctionSpecifierAccess().getVirtualKeyword_1()); }
)

    |(
{ before(grammarAccess.getFunctionSpecifierAccess().getExplicitKeyword_2()); }

	'explicit' 

{ after(grammarAccess.getFunctionSpecifierAccess().getExplicitKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeSpecifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeSpecifierAccess().getTrailingTypeSpecifierParserRuleCall_0()); }
	ruleTrailingTypeSpecifier
{ after(grammarAccess.getTypeSpecifierAccess().getTrailingTypeSpecifierParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTypeSpecifierAccess().getClassSpecifierParserRuleCall_1()); }
	ruleClassSpecifier
{ after(grammarAccess.getTypeSpecifierAccess().getClassSpecifierParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getTypeSpecifierAccess().getEnumSpecifierParserRuleCall_2()); }
	ruleEnumSpecifier
{ after(grammarAccess.getTypeSpecifierAccess().getEnumSpecifierParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TrailingTypeSpecifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTrailingTypeSpecifierAccess().getSimpleTypeSpecifierParserRuleCall_0()); }
	ruleSimpleTypeSpecifier
{ after(grammarAccess.getTrailingTypeSpecifierAccess().getSimpleTypeSpecifierParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTrailingTypeSpecifierAccess().getTypenameSpecifierParserRuleCall_1()); }
	ruleTypenameSpecifier
{ after(grammarAccess.getTrailingTypeSpecifierAccess().getTypenameSpecifierParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getTrailingTypeSpecifierAccess().getCvQualifierParserRuleCall_2()); }
	ruleCvQualifier
{ after(grammarAccess.getTrailingTypeSpecifierAccess().getCvQualifierParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleTypeSpecifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getGroup_0()); }
(rule__SimpleTypeSpecifier__Group_0__0)
{ after(grammarAccess.getSimpleTypeSpecifierAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getCharKeyword_1()); }

	'char' 

{ after(grammarAccess.getSimpleTypeSpecifierAccess().getCharKeyword_1()); }
)

    |(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getChar16_tKeyword_2()); }

	'char16_t' 

{ after(grammarAccess.getSimpleTypeSpecifierAccess().getChar16_tKeyword_2()); }
)

    |(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getChar32_tKeyword_3()); }

	'char32_t' 

{ after(grammarAccess.getSimpleTypeSpecifierAccess().getChar32_tKeyword_3()); }
)

    |(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getWchar_tKeyword_4()); }

	'wchar_t' 

{ after(grammarAccess.getSimpleTypeSpecifierAccess().getWchar_tKeyword_4()); }
)

    |(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getBoolKeyword_5()); }

	'bool' 

{ after(grammarAccess.getSimpleTypeSpecifierAccess().getBoolKeyword_5()); }
)

    |(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getShortKeyword_6()); }

	'short' 

{ after(grammarAccess.getSimpleTypeSpecifierAccess().getShortKeyword_6()); }
)

    |(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getIntKeyword_7()); }

	'int' 

{ after(grammarAccess.getSimpleTypeSpecifierAccess().getIntKeyword_7()); }
)

    |(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getLongKeyword_8()); }

	'long' 

{ after(grammarAccess.getSimpleTypeSpecifierAccess().getLongKeyword_8()); }
)

    |(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getSignedKeyword_9()); }

	'signed' 

{ after(grammarAccess.getSimpleTypeSpecifierAccess().getSignedKeyword_9()); }
)

    |(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getUnsignedKeyword_10()); }

	'unsigned' 

{ after(grammarAccess.getSimpleTypeSpecifierAccess().getUnsignedKeyword_10()); }
)

    |(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getFloatKeyword_11()); }

	'float' 

{ after(grammarAccess.getSimpleTypeSpecifierAccess().getFloatKeyword_11()); }
)

    |(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getDoubleKeyword_12()); }

	'double' 

{ after(grammarAccess.getSimpleTypeSpecifierAccess().getDoubleKeyword_12()); }
)

    |(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getVoidKeyword_13()); }

	'void' 

{ after(grammarAccess.getSimpleTypeSpecifierAccess().getVoidKeyword_13()); }
)

    |(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getAutoKeyword_14()); }

	'auto' 

{ after(grammarAccess.getSimpleTypeSpecifierAccess().getAutoKeyword_14()); }
)

    |(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getDeclarationTypeSpecifierParserRuleCall_15()); }
	ruleDeclarationTypeSpecifier
{ after(grammarAccess.getSimpleTypeSpecifierAccess().getDeclarationTypeSpecifierParserRuleCall_15()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleTypeSpecifier__Alternatives_0_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getTypeNameParserRuleCall_0_1_0()); }
	ruleTypeName
{ after(grammarAccess.getSimpleTypeSpecifierAccess().getTypeNameParserRuleCall_0_1_0()); }
)

    |(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getGroup_0_1_1()); }
(rule__SimpleTypeSpecifier__Group_0_1_1__0)
{ after(grammarAccess.getSimpleTypeSpecifierAccess().getGroup_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleTypeSpecifier__Alternatives_0_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getTypeNameParserRuleCall_0_1_1_1_0()); }
	ruleTypeName
{ after(grammarAccess.getSimpleTypeSpecifierAccess().getTypeNameParserRuleCall_0_1_1_1_0()); }
)

    |(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getGroup_0_1_1_1_1()); }
(rule__SimpleTypeSpecifier__Group_0_1_1_1_1__0)
{ after(grammarAccess.getSimpleTypeSpecifierAccess().getGroup_0_1_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeName__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeNameAccess().getSimpleTemplateIdParserRuleCall_0()); }
	ruleSimpleTemplateId
{ after(grammarAccess.getTypeNameAccess().getSimpleTemplateIdParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTypeNameAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getTypeNameAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumHead__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumHeadAccess().getIDTerminalRuleCall_1_0()); }
(	RULE_ID)?
{ after(grammarAccess.getEnumHeadAccess().getIDTerminalRuleCall_1_0()); }
)

    |(
{ before(grammarAccess.getEnumHeadAccess().getGroup_1_1()); }
(rule__EnumHead__Group_1_1__0)
{ after(grammarAccess.getEnumHeadAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EnumKey__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumKeyAccess().getEnumKeyword_0()); }

	'enum' 

{ after(grammarAccess.getEnumKeyAccess().getEnumKeyword_0()); }
)

    |(
{ before(grammarAccess.getEnumKeyAccess().getGroup_1()); }
(rule__EnumKey__Group_1__0)
{ after(grammarAccess.getEnumKeyAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getEnumKeyAccess().getGroup_2()); }
(rule__EnumKey__Group_2__0)
{ after(grammarAccess.getEnumKeyAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__UsingDeclaration__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUsingDeclarationAccess().getColonColonKeyword_1_0()); }

	'::' 

{ after(grammarAccess.getUsingDeclarationAccess().getColonColonKeyword_1_0()); }
)

    |(
{ before(grammarAccess.getUsingDeclarationAccess().getGroup_1_1()); }
(rule__UsingDeclaration__Group_1_1__0)
{ after(grammarAccess.getUsingDeclarationAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LinkageSpecification__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkageSpecificationAccess().getDeclarationParserRuleCall_2_0()); }
	ruleDeclaration
{ after(grammarAccess.getLinkageSpecificationAccess().getDeclarationParserRuleCall_2_0()); }
)

    |(
{ before(grammarAccess.getLinkageSpecificationAccess().getGroup_2_1()); }
(rule__LinkageSpecification__Group_2_1__0)
{ after(grammarAccess.getLinkageSpecificationAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParametersAndQualifiers__Alternatives_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParametersAndQualifiersAccess().getConstKeyword_3_0()); }

	'const' 

{ after(grammarAccess.getParametersAndQualifiersAccess().getConstKeyword_3_0()); }
)

    |(
{ before(grammarAccess.getParametersAndQualifiersAccess().getVolatileKeyword_3_1()); }

	'volatile' 

{ after(grammarAccess.getParametersAndQualifiersAccess().getVolatileKeyword_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParametersAndQualifiers__Alternatives_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParametersAndQualifiersAccess().getAmpersandKeyword_4_0()); }

	'&' 

{ after(grammarAccess.getParametersAndQualifiersAccess().getAmpersandKeyword_4_0()); }
)

    |(
{ before(grammarAccess.getParametersAndQualifiersAccess().getAmpersandAmpersandKeyword_4_1()); }

	'&&' 

{ after(grammarAccess.getParametersAndQualifiersAccess().getAmpersandAmpersandKeyword_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclarationClause__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationClauseAccess().getFullStopFullStopFullStopKeyword_0()); }

	'...' 

{ after(grammarAccess.getParameterDeclarationClauseAccess().getFullStopFullStopFullStopKeyword_0()); }
)

    |(
{ before(grammarAccess.getParameterDeclarationClauseAccess().getGroup_1()); }
(rule__ParameterDeclarationClause__Group_1__0)
{ after(grammarAccess.getParameterDeclarationClauseAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionBody__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionBodyAccess().getGroup_0()); }
(rule__FunctionBody__Group_0__0)
{ after(grammarAccess.getFunctionBodyAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getFunctionBodyAccess().getFunctionTryBlockParserRuleCall_1()); }
	ruleFunctionTryBlock
{ after(grammarAccess.getFunctionBodyAccess().getFunctionTryBlockParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Initializer__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitializerAccess().getBraceOrEqualInitializerParserRuleCall_0()); }
	ruleBraceOrEqualInitializer
{ after(grammarAccess.getInitializerAccess().getBraceOrEqualInitializerParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getInitializerAccess().getGroup_1()); }
(rule__Initializer__Group_1__0)
{ after(grammarAccess.getInitializerAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BraceOrEqualInitializer__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBraceOrEqualInitializerAccess().getGroup_0()); }
(rule__BraceOrEqualInitializer__Group_0__0)
{ after(grammarAccess.getBraceOrEqualInitializerAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getBraceOrEqualInitializerAccess().getBracedInitializerListParserRuleCall_1()); }
	ruleBracedInitializerList
{ after(grammarAccess.getBraceOrEqualInitializerAccess().getBracedInitializerListParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InitializerClause__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitializerClauseAccess().getAssignmentExpressionParserRuleCall_0()); }
	ruleAssignmentExpression
{ after(grammarAccess.getInitializerClauseAccess().getAssignmentExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getInitializerClauseAccess().getBracedInitializerListParserRuleCall_1()); }
	ruleBracedInitializerList
{ after(grammarAccess.getInitializerClauseAccess().getBracedInitializerListParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassVirtualSpecifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassVirtualSpecifierAccess().getFinalKeyword_0()); }

	'final' 

{ after(grammarAccess.getClassVirtualSpecifierAccess().getFinalKeyword_0()); }
)

    |(
{ before(grammarAccess.getClassVirtualSpecifierAccess().getExplicitKeyword_1()); }

	'explicit' 

{ after(grammarAccess.getClassVirtualSpecifierAccess().getExplicitKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassKey__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassKeyAccess().getClassKeyword_0()); }

	'class' 

{ after(grammarAccess.getClassKeyAccess().getClassKeyword_0()); }
)

    |(
{ before(grammarAccess.getClassKeyAccess().getStructKeyword_1()); }

	'struct' 

{ after(grammarAccess.getClassKeyAccess().getStructKeyword_1()); }
)

    |(
{ before(grammarAccess.getClassKeyAccess().getUnionKeyword_2()); }

	'union' 

{ after(grammarAccess.getClassKeyAccess().getUnionKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MemberSpecification__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberSpecificationAccess().getMemberDeclarationParserRuleCall_0_0()); }
	ruleMemberDeclaration
{ after(grammarAccess.getMemberSpecificationAccess().getMemberDeclarationParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getMemberSpecificationAccess().getGroup_0_1()); }
(rule__MemberSpecification__Group_0_1__0)
{ after(grammarAccess.getMemberSpecificationAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MemberDeclaration__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberDeclarationAccess().getMemberOrFunctionDeclarationParserRuleCall_0()); }
	ruleMemberOrFunctionDeclaration
{ after(grammarAccess.getMemberDeclarationAccess().getMemberOrFunctionDeclarationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getMemberDeclarationAccess().getUsingDeclarationParserRuleCall_1()); }
	ruleUsingDeclaration
{ after(grammarAccess.getMemberDeclarationAccess().getUsingDeclarationParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getMemberDeclarationAccess().getStaticAssertDeclarationParserRuleCall_2()); }
	ruleStaticAssertDeclaration
{ after(grammarAccess.getMemberDeclarationAccess().getStaticAssertDeclarationParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getMemberDeclarationAccess().getTemplateDeclarationParserRuleCall_3()); }
	ruleTemplateDeclaration
{ after(grammarAccess.getMemberDeclarationAccess().getTemplateDeclarationParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getMemberDeclarationAccess().getAliasDeclarationParserRuleCall_4()); }
	ruleAliasDeclaration
{ after(grammarAccess.getMemberDeclarationAccess().getAliasDeclarationParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MemberOrFunctionDeclaration__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberOrFunctionDeclarationAccess().getFunctionDeclarationSuffixParserRuleCall_1_0()); }
	ruleFunctionDeclarationSuffix
{ after(grammarAccess.getMemberOrFunctionDeclarationAccess().getFunctionDeclarationSuffixParserRuleCall_1_0()); }
)

    |(
{ before(grammarAccess.getMemberOrFunctionDeclarationAccess().getGroup_1_1()); }
(rule__MemberOrFunctionDeclaration__Group_1_1__0)
{ after(grammarAccess.getMemberOrFunctionDeclarationAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MemberDeclarator__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberDeclaratorAccess().getPureSpecifierParserRuleCall_2_0()); }
(	rulePureSpecifier)?
{ after(grammarAccess.getMemberDeclaratorAccess().getPureSpecifierParserRuleCall_2_0()); }
)

    |(
{ before(grammarAccess.getMemberDeclaratorAccess().getBraceOrEqualInitializerParserRuleCall_2_1()); }
	ruleBraceOrEqualInitializer
{ after(grammarAccess.getMemberDeclaratorAccess().getBraceOrEqualInitializerParserRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__VirtualSpecifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVirtualSpecifierAccess().getOverrideKeyword_0()); }

	'override' 

{ after(grammarAccess.getVirtualSpecifierAccess().getOverrideKeyword_0()); }
)

    |(
{ before(grammarAccess.getVirtualSpecifierAccess().getFinalKeyword_1()); }

	'final' 

{ after(grammarAccess.getVirtualSpecifierAccess().getFinalKeyword_1()); }
)

    |(
{ before(grammarAccess.getVirtualSpecifierAccess().getNewKeyword_2()); }

	'new' 

{ after(grammarAccess.getVirtualSpecifierAccess().getNewKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BaseSpecifier__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBaseSpecifierAccess().getGroup_0_0()); }
(rule__BaseSpecifier__Group_0_0__0)
{ after(grammarAccess.getBaseSpecifierAccess().getGroup_0_0()); }
)

    |(
{ before(grammarAccess.getBaseSpecifierAccess().getGroup_0_1()); }
(rule__BaseSpecifier__Group_0_1__0)
{ after(grammarAccess.getBaseSpecifierAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ClassOrDeclarationType__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassOrDeclarationTypeAccess().getGroup_0()); }
(rule__ClassOrDeclarationType__Group_0__0)
{ after(grammarAccess.getClassOrDeclarationTypeAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getClassOrDeclarationTypeAccess().getDeclarationTypeSpecifierParserRuleCall_1()); }
	ruleDeclarationTypeSpecifier
{ after(grammarAccess.getClassOrDeclarationTypeAccess().getDeclarationTypeSpecifierParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AccessSpecifier__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAccessSpecifierAccess().getPrivateKeyword_0()); }

	'private' 

{ after(grammarAccess.getAccessSpecifierAccess().getPrivateKeyword_0()); }
)

    |(
{ before(grammarAccess.getAccessSpecifierAccess().getProtectedKeyword_1()); }

	'protected' 

{ after(grammarAccess.getAccessSpecifierAccess().getProtectedKeyword_1()); }
)

    |(
{ before(grammarAccess.getAccessSpecifierAccess().getPublicKeyword_2()); }

	'public' 

{ after(grammarAccess.getAccessSpecifierAccess().getPublicKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorFunctionId__Alternatives_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorFunctionIdAccess().getConstantExpressionParserRuleCall_2_1_0()); }
	ruleConstantExpression
{ after(grammarAccess.getOperatorFunctionIdAccess().getConstantExpressionParserRuleCall_2_1_0()); }
)

    |(
{ before(grammarAccess.getOperatorFunctionIdAccess().getTypeSpecifierParserRuleCall_2_1_1()); }
	ruleTypeSpecifier
{ after(grammarAccess.getOperatorFunctionIdAccess().getTypeSpecifierParserRuleCall_2_1_1()); }
)

    |(
{ before(grammarAccess.getOperatorFunctionIdAccess().getIdExpressionParserRuleCall_2_1_2()); }
	ruleIdExpression
{ after(grammarAccess.getOperatorFunctionIdAccess().getIdExpressionParserRuleCall_2_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OverloadableOperator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOverloadableOperatorAccess().getNewKeyword_0()); }

	'new' 

{ after(grammarAccess.getOverloadableOperatorAccess().getNewKeyword_0()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getDeleteKeyword_1()); }

	'delete' 

{ after(grammarAccess.getOverloadableOperatorAccess().getDeleteKeyword_1()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getGroup_2()); }
(rule__OverloadableOperator__Group_2__0)
{ after(grammarAccess.getOverloadableOperatorAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getGroup_3()); }
(rule__OverloadableOperator__Group_3__0)
{ after(grammarAccess.getOverloadableOperatorAccess().getGroup_3()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getPlusSignKeyword_4()); }

	'+' 

{ after(grammarAccess.getOverloadableOperatorAccess().getPlusSignKeyword_4()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getHyphenMinusKeyword_5()); }

	'-' 

{ after(grammarAccess.getOverloadableOperatorAccess().getHyphenMinusKeyword_5()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getAsteriskKeyword_6()); }

	'*' 

{ after(grammarAccess.getOverloadableOperatorAccess().getAsteriskKeyword_6()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getSolidusKeyword_7()); }

	'/' 

{ after(grammarAccess.getOverloadableOperatorAccess().getSolidusKeyword_7()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getPercentSignKeyword_8()); }

	'%' 

{ after(grammarAccess.getOverloadableOperatorAccess().getPercentSignKeyword_8()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getCircumflexAccentKeyword_9()); }

	'^' 

{ after(grammarAccess.getOverloadableOperatorAccess().getCircumflexAccentKeyword_9()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getAmpersandKeyword_10()); }

	'&' 

{ after(grammarAccess.getOverloadableOperatorAccess().getAmpersandKeyword_10()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getVerticalLineKeyword_11()); }

	'|' 

{ after(grammarAccess.getOverloadableOperatorAccess().getVerticalLineKeyword_11()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getTildeKeyword_12()); }

	'~' 

{ after(grammarAccess.getOverloadableOperatorAccess().getTildeKeyword_12()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getExclamationMarkKeyword_13()); }

	'!' 

{ after(grammarAccess.getOverloadableOperatorAccess().getExclamationMarkKeyword_13()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getEqualsSignKeyword_14()); }

	'=' 

{ after(grammarAccess.getOverloadableOperatorAccess().getEqualsSignKeyword_14()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getLessThanSignKeyword_15()); }

	'<' 

{ after(grammarAccess.getOverloadableOperatorAccess().getLessThanSignKeyword_15()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getGreaterThanSignKeyword_16()); }

	'>' 

{ after(grammarAccess.getOverloadableOperatorAccess().getGreaterThanSignKeyword_16()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getPlusSignEqualsSignKeyword_17()); }

	'+=' 

{ after(grammarAccess.getOverloadableOperatorAccess().getPlusSignEqualsSignKeyword_17()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getHyphenMinusEqualsSignKeyword_18()); }

	'-=' 

{ after(grammarAccess.getOverloadableOperatorAccess().getHyphenMinusEqualsSignKeyword_18()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getAsteriskEqualsSignKeyword_19()); }

	'*=' 

{ after(grammarAccess.getOverloadableOperatorAccess().getAsteriskEqualsSignKeyword_19()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getSolidusEqualsSignKeyword_20()); }

	'/=' 

{ after(grammarAccess.getOverloadableOperatorAccess().getSolidusEqualsSignKeyword_20()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getPercentSignEqualsSignKeyword_21()); }

	'%=' 

{ after(grammarAccess.getOverloadableOperatorAccess().getPercentSignEqualsSignKeyword_21()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getCircumflexAccentEqualsSignKeyword_22()); }

	'^=' 

{ after(grammarAccess.getOverloadableOperatorAccess().getCircumflexAccentEqualsSignKeyword_22()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getAmpersandEqualsSignKeyword_23()); }

	'&=' 

{ after(grammarAccess.getOverloadableOperatorAccess().getAmpersandEqualsSignKeyword_23()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getVerticalLineEqualsSignKeyword_24()); }

	'|=' 

{ after(grammarAccess.getOverloadableOperatorAccess().getVerticalLineEqualsSignKeyword_24()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getLessThanSignLessThanSignKeyword_25()); }

	'<<' 

{ after(grammarAccess.getOverloadableOperatorAccess().getLessThanSignLessThanSignKeyword_25()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getGreaterThanSignGreaterThanSignKeyword_26()); }

	'>>' 

{ after(grammarAccess.getOverloadableOperatorAccess().getGreaterThanSignGreaterThanSignKeyword_26()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getGreaterThanSignGreaterThanSignEqualsSignKeyword_27()); }

	'>>=' 

{ after(grammarAccess.getOverloadableOperatorAccess().getGreaterThanSignGreaterThanSignEqualsSignKeyword_27()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getLessThanSignLessThanSignEqualsSignKeyword_28()); }

	'<<=' 

{ after(grammarAccess.getOverloadableOperatorAccess().getLessThanSignLessThanSignEqualsSignKeyword_28()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getEqualsSignEqualsSignKeyword_29()); }

	'==' 

{ after(grammarAccess.getOverloadableOperatorAccess().getEqualsSignEqualsSignKeyword_29()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getExclamationMarkEqualsSignKeyword_30()); }

	'!=' 

{ after(grammarAccess.getOverloadableOperatorAccess().getExclamationMarkEqualsSignKeyword_30()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getLessThanSignEqualsSignKeyword_31()); }

	'<=' 

{ after(grammarAccess.getOverloadableOperatorAccess().getLessThanSignEqualsSignKeyword_31()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getGreaterThanSignEqualsSignKeyword_32()); }

	'>=' 

{ after(grammarAccess.getOverloadableOperatorAccess().getGreaterThanSignEqualsSignKeyword_32()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getAmpersandAmpersandKeyword_33()); }

	'&&' 

{ after(grammarAccess.getOverloadableOperatorAccess().getAmpersandAmpersandKeyword_33()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getVerticalLineVerticalLineKeyword_34()); }

	'||' 

{ after(grammarAccess.getOverloadableOperatorAccess().getVerticalLineVerticalLineKeyword_34()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getPlusSignPlusSignKeyword_35()); }

	'++' 

{ after(grammarAccess.getOverloadableOperatorAccess().getPlusSignPlusSignKeyword_35()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getHyphenMinusHyphenMinusKeyword_36()); }

	'--' 

{ after(grammarAccess.getOverloadableOperatorAccess().getHyphenMinusHyphenMinusKeyword_36()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getCommaKeyword_37()); }

	',' 

{ after(grammarAccess.getOverloadableOperatorAccess().getCommaKeyword_37()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getHyphenMinusGreaterThanSignAsteriskKeyword_38()); }

	'->*' 

{ after(grammarAccess.getOverloadableOperatorAccess().getHyphenMinusGreaterThanSignAsteriskKeyword_38()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getHyphenMinusGreaterThanSignKeyword_39()); }

	'->' 

{ after(grammarAccess.getOverloadableOperatorAccess().getHyphenMinusGreaterThanSignKeyword_39()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getLeftParenthesisRightParenthesisKeyword_40()); }

	'()' 

{ after(grammarAccess.getOverloadableOperatorAccess().getLeftParenthesisRightParenthesisKeyword_40()); }
)

    |(
{ before(grammarAccess.getOverloadableOperatorAccess().getLeftSquareBracketRightSquareBracketKeyword_41()); }

	'[]' 

{ after(grammarAccess.getOverloadableOperatorAccess().getLeftSquareBracketRightSquareBracketKeyword_41()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateParameter__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateParameterAccess().getTypeParameterParserRuleCall_0()); }
	ruleTypeParameter
{ after(grammarAccess.getTemplateParameterAccess().getTypeParameterParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTemplateParameterAccess().getParameterDeclarationParserRuleCall_1()); }
	ruleParameterDeclaration
{ after(grammarAccess.getTemplateParameterAccess().getParameterDeclarationParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameter__Alternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParameterAccess().getClassKeyword_0_0()); }

	'class' 

{ after(grammarAccess.getTypeParameterAccess().getClassKeyword_0_0()); }
)

    |(
{ before(grammarAccess.getTypeParameterAccess().getTypenameKeyword_0_1()); }

	'typename' 

{ after(grammarAccess.getTypeParameterAccess().getTypenameKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameter__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParameterAccess().getGroup_1_0()); }
(rule__TypeParameter__Group_1_0__0)
{ after(grammarAccess.getTypeParameterAccess().getGroup_1_0()); }
)

    |(
{ before(grammarAccess.getTypeParameterAccess().getGroup_1_1()); }
(rule__TypeParameter__Group_1_1__0)
{ after(grammarAccess.getTypeParameterAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__TemplateArgument__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateArgumentAccess().getConstantExpressionParserRuleCall_0()); }
	ruleConstantExpression
{ after(grammarAccess.getTemplateArgumentAccess().getConstantExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTemplateArgumentAccess().getTypeIdParserRuleCall_1()); }
	ruleTypeId
{ after(grammarAccess.getTemplateArgumentAccess().getTypeIdParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getTemplateArgumentAccess().getIdExpressionParserRuleCall_2()); }
	ruleIdExpression
{ after(grammarAccess.getTemplateArgumentAccess().getIdExpressionParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TypenameSpecifier__Alternatives_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypenameSpecifierAccess().getIDTerminalRuleCall_3_0()); }
	RULE_ID
{ after(grammarAccess.getTypenameSpecifierAccess().getIDTerminalRuleCall_3_0()); }
)

    |(
{ before(grammarAccess.getTypenameSpecifierAccess().getGroup_3_1()); }
(rule__TypenameSpecifier__Group_3_1__0)
{ after(grammarAccess.getTypenameSpecifierAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExceptionDeclaration__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExceptionDeclarationAccess().getGroup_0()); }
(rule__ExceptionDeclaration__Group_0__0)
{ after(grammarAccess.getExceptionDeclarationAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getExceptionDeclarationAccess().getFullStopFullStopFullStopKeyword_1()); }

	'...' 

{ after(grammarAccess.getExceptionDeclarationAccess().getFullStopFullStopFullStopKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExceptionSpecification__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExceptionSpecificationAccess().getDynamicExceptionSpecificationParserRuleCall_0()); }
	ruleDynamicExceptionSpecification
{ after(grammarAccess.getExceptionSpecificationAccess().getDynamicExceptionSpecificationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExceptionSpecificationAccess().getNoexceptSpecificationParserRuleCall_1()); }
	ruleNoexceptSpecification
{ after(grammarAccess.getExceptionSpecificationAccess().getNoexceptSpecificationParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Literal__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_4__0__Impl
	rule__Literal__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getAlternatives_4_0()); }
(rule__Literal__Alternatives_4_0)
{ after(grammarAccess.getLiteralAccess().getAlternatives_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Literal__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Literal__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralAccess().getNullptrKeyword_4_1()); }

	'nullptr' 

{ after(grammarAccess.getLiteralAccess().getNullptrKeyword_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__LabeledStatement__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LabeledStatement__Group_0__0__Impl
	rule__LabeledStatement__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledStatement__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabeledStatementAccess().getIDTerminalRuleCall_0_0()); }
	RULE_ID
{ after(grammarAccess.getLabeledStatementAccess().getIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LabeledStatement__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LabeledStatement__Group_0__1__Impl
	rule__LabeledStatement__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledStatement__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabeledStatementAccess().getColonKeyword_0_1()); }

	':' 

{ after(grammarAccess.getLabeledStatementAccess().getColonKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LabeledStatement__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LabeledStatement__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledStatement__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabeledStatementAccess().getStatementParserRuleCall_0_2()); }
	ruleStatement
{ after(grammarAccess.getLabeledStatementAccess().getStatementParserRuleCall_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LabeledStatement__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LabeledStatement__Group_1__0__Impl
	rule__LabeledStatement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledStatement__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabeledStatementAccess().getCaseKeyword_1_0()); }

	'case' 

{ after(grammarAccess.getLabeledStatementAccess().getCaseKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LabeledStatement__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LabeledStatement__Group_1__1__Impl
	rule__LabeledStatement__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledStatement__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabeledStatementAccess().getConstantExpressionParserRuleCall_1_1()); }
	ruleConstantExpression
{ after(grammarAccess.getLabeledStatementAccess().getConstantExpressionParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LabeledStatement__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LabeledStatement__Group_1__2__Impl
	rule__LabeledStatement__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledStatement__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabeledStatementAccess().getColonKeyword_1_2()); }

	':' 

{ after(grammarAccess.getLabeledStatementAccess().getColonKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LabeledStatement__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LabeledStatement__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledStatement__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabeledStatementAccess().getStatementParserRuleCall_1_3()); }
	ruleStatement
{ after(grammarAccess.getLabeledStatementAccess().getStatementParserRuleCall_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__LabeledStatement__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LabeledStatement__Group_2__0__Impl
	rule__LabeledStatement__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledStatement__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabeledStatementAccess().getDefaultKeyword_2_0()); }

	'default' 

{ after(grammarAccess.getLabeledStatementAccess().getDefaultKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LabeledStatement__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LabeledStatement__Group_2__1__Impl
	rule__LabeledStatement__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledStatement__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabeledStatementAccess().getColonKeyword_2_1()); }

	':' 

{ after(grammarAccess.getLabeledStatementAccess().getColonKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LabeledStatement__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LabeledStatement__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LabeledStatement__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLabeledStatementAccess().getStatementParserRuleCall_2_2()); }
	ruleStatement
{ after(grammarAccess.getLabeledStatementAccess().getStatementParserRuleCall_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ExpressionStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionStatement__Group__0__Impl
	rule__ExpressionStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getExpressionParserRuleCall_0()); }
	ruleExpression
{ after(grammarAccess.getExpressionStatementAccess().getExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionStatementAccess().getSemicolonKeyword_1()); }

	';' 

{ after(grammarAccess.getExpressionStatementAccess().getSemicolonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__CompoundStatement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompoundStatement__Group__0__Impl
	rule__CompoundStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundStatement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStatementAccess().getLeftCurlyBracketKeyword_0()); }

	'{' 

{ after(grammarAccess.getCompoundStatementAccess().getLeftCurlyBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompoundStatement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompoundStatement__Group__1__Impl
	rule__CompoundStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundStatement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStatementAccess().getStatementParserRuleCall_1()); }
(	ruleStatement)*
{ after(grammarAccess.getCompoundStatementAccess().getStatementParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__CompoundStatement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__CompoundStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CompoundStatement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCompoundStatementAccess().getRightCurlyBracketKeyword_2()); }

	'}' 

{ after(grammarAccess.getCompoundStatementAccess().getRightCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SelectionStatement__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectionStatement__Group_0__0__Impl
	rule__SelectionStatement__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionStatement__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionStatementAccess().getIfKeyword_0_0()); }

	'if' 

{ after(grammarAccess.getSelectionStatementAccess().getIfKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectionStatement__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectionStatement__Group_0__1__Impl
	rule__SelectionStatement__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionStatement__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionStatementAccess().getLeftParenthesisKeyword_0_1()); }

	'(' 

{ after(grammarAccess.getSelectionStatementAccess().getLeftParenthesisKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectionStatement__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectionStatement__Group_0__2__Impl
	rule__SelectionStatement__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionStatement__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionStatementAccess().getConditionParserRuleCall_0_2()); }
	ruleCondition
{ after(grammarAccess.getSelectionStatementAccess().getConditionParserRuleCall_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectionStatement__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectionStatement__Group_0__3__Impl
	rule__SelectionStatement__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionStatement__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionStatementAccess().getRightParenthesisKeyword_0_3()); }

	')' 

{ after(grammarAccess.getSelectionStatementAccess().getRightParenthesisKeyword_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectionStatement__Group_0__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectionStatement__Group_0__4__Impl
	rule__SelectionStatement__Group_0__5
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionStatement__Group_0__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionStatementAccess().getStatementParserRuleCall_0_4()); }
	ruleStatement
{ after(grammarAccess.getSelectionStatementAccess().getStatementParserRuleCall_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectionStatement__Group_0__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectionStatement__Group_0__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionStatement__Group_0__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionStatementAccess().getGroup_0_5()); }
(rule__SelectionStatement__Group_0_5__0)?
{ after(grammarAccess.getSelectionStatementAccess().getGroup_0_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__SelectionStatement__Group_0_5__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectionStatement__Group_0_5__0__Impl
	rule__SelectionStatement__Group_0_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionStatement__Group_0_5__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionStatementAccess().getElseKeyword_0_5_0()); }
(
	'else' 
)
{ after(grammarAccess.getSelectionStatementAccess().getElseKeyword_0_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectionStatement__Group_0_5__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectionStatement__Group_0_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionStatement__Group_0_5__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionStatementAccess().getStatementParserRuleCall_0_5_1()); }
	ruleStatement
{ after(grammarAccess.getSelectionStatementAccess().getStatementParserRuleCall_0_5_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SelectionStatement__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectionStatement__Group_1__0__Impl
	rule__SelectionStatement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionStatement__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionStatementAccess().getSwitchKeyword_1_0()); }

	'switch' 

{ after(grammarAccess.getSelectionStatementAccess().getSwitchKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectionStatement__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectionStatement__Group_1__1__Impl
	rule__SelectionStatement__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionStatement__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionStatementAccess().getLeftParenthesisKeyword_1_1()); }

	'(' 

{ after(grammarAccess.getSelectionStatementAccess().getLeftParenthesisKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectionStatement__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectionStatement__Group_1__2__Impl
	rule__SelectionStatement__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionStatement__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionStatementAccess().getConditionParserRuleCall_1_2()); }
	ruleCondition
{ after(grammarAccess.getSelectionStatementAccess().getConditionParserRuleCall_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectionStatement__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectionStatement__Group_1__3__Impl
	rule__SelectionStatement__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionStatement__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionStatementAccess().getRightParenthesisKeyword_1_3()); }

	')' 

{ after(grammarAccess.getSelectionStatementAccess().getRightParenthesisKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SelectionStatement__Group_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SelectionStatement__Group_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectionStatement__Group_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSelectionStatementAccess().getStatementParserRuleCall_1_4()); }
	ruleStatement
{ after(grammarAccess.getSelectionStatementAccess().getStatementParserRuleCall_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Condition__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group_1__0__Impl
	rule__Condition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getConditionAccess().getDeclarationSpecifierParserRuleCall_1_0()); }
(	ruleDeclarationSpecifier)
{ after(grammarAccess.getConditionAccess().getDeclarationSpecifierParserRuleCall_1_0()); }
)
(
{ before(grammarAccess.getConditionAccess().getDeclarationSpecifierParserRuleCall_1_0()); }
(	ruleDeclarationSpecifier)*
{ after(grammarAccess.getConditionAccess().getDeclarationSpecifierParserRuleCall_1_0()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group_1__1__Impl
	rule__Condition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getDeclaratorIdParserRuleCall_1_1()); }
	ruleDeclaratorId
{ after(grammarAccess.getConditionAccess().getDeclaratorIdParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getAlternatives_1_2()); }
(rule__Condition__Alternatives_1_2)
{ after(grammarAccess.getConditionAccess().getAlternatives_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Condition__Group_1_2_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group_1_2_0__0__Impl
	rule__Condition__Group_1_2_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_1_2_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getEqualsSignKeyword_1_2_0_0()); }

	'=' 

{ after(grammarAccess.getConditionAccess().getEqualsSignKeyword_1_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group_1_2_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Condition__Group_1_2_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group_1_2_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionAccess().getInitializerClauseParserRuleCall_1_2_0_1()); }
	ruleInitializerClause
{ after(grammarAccess.getConditionAccess().getInitializerClauseParserRuleCall_1_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IterationStatement__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_0__0__Impl
	rule__IterationStatement__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationStatementAccess().getWhileKeyword_0_0()); }

	'while' 

{ after(grammarAccess.getIterationStatementAccess().getWhileKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IterationStatement__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_0__1__Impl
	rule__IterationStatement__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationStatementAccess().getLeftParenthesisKeyword_0_1()); }

	'(' 

{ after(grammarAccess.getIterationStatementAccess().getLeftParenthesisKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IterationStatement__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_0__2__Impl
	rule__IterationStatement__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationStatementAccess().getConditionParserRuleCall_0_2()); }
	ruleCondition
{ after(grammarAccess.getIterationStatementAccess().getConditionParserRuleCall_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IterationStatement__Group_0__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_0__3__Impl
	rule__IterationStatement__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_0__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationStatementAccess().getRightParenthesisKeyword_0_3()); }

	')' 

{ after(grammarAccess.getIterationStatementAccess().getRightParenthesisKeyword_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IterationStatement__Group_0__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_0__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationStatementAccess().getStatementParserRuleCall_0_4()); }
	ruleStatement
{ after(grammarAccess.getIterationStatementAccess().getStatementParserRuleCall_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__IterationStatement__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_1__0__Impl
	rule__IterationStatement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationStatementAccess().getDoKeyword_1_0()); }

	'do' 

{ after(grammarAccess.getIterationStatementAccess().getDoKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IterationStatement__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_1__1__Impl
	rule__IterationStatement__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationStatementAccess().getStatementParserRuleCall_1_1()); }
	ruleStatement
{ after(grammarAccess.getIterationStatementAccess().getStatementParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IterationStatement__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_1__2__Impl
	rule__IterationStatement__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationStatementAccess().getWhileKeyword_1_2()); }

	'while' 

{ after(grammarAccess.getIterationStatementAccess().getWhileKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IterationStatement__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_1__3__Impl
	rule__IterationStatement__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationStatementAccess().getLeftParenthesisKeyword_1_3()); }

	'(' 

{ after(grammarAccess.getIterationStatementAccess().getLeftParenthesisKeyword_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IterationStatement__Group_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_1__4__Impl
	rule__IterationStatement__Group_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationStatementAccess().getExpressionParserRuleCall_1_4()); }
	ruleExpression
{ after(grammarAccess.getIterationStatementAccess().getExpressionParserRuleCall_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IterationStatement__Group_1__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_1__5__Impl
	rule__IterationStatement__Group_1__6
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_1__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationStatementAccess().getRightParenthesisKeyword_1_5()); }

	')' 

{ after(grammarAccess.getIterationStatementAccess().getRightParenthesisKeyword_1_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IterationStatement__Group_1__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_1__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_1__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationStatementAccess().getSemicolonKeyword_1_6()); }

	';' 

{ after(grammarAccess.getIterationStatementAccess().getSemicolonKeyword_1_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__IterationStatement__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_2__0__Impl
	rule__IterationStatement__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationStatementAccess().getForKeyword_2_0()); }

	'for' 

{ after(grammarAccess.getIterationStatementAccess().getForKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IterationStatement__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_2__1__Impl
	rule__IterationStatement__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationStatementAccess().getLeftParenthesisKeyword_2_1()); }

	'(' 

{ after(grammarAccess.getIterationStatementAccess().getLeftParenthesisKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IterationStatement__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_2__2__Impl
	rule__IterationStatement__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationStatementAccess().getForInitializationStatementParserRuleCall_2_2()); }
	ruleForInitializationStatement
{ after(grammarAccess.getIterationStatementAccess().getForInitializationStatementParserRuleCall_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IterationStatement__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_2__3__Impl
	rule__IterationStatement__Group_2__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationStatementAccess().getConditionParserRuleCall_2_3()); }
(	ruleCondition)?
{ after(grammarAccess.getIterationStatementAccess().getConditionParserRuleCall_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IterationStatement__Group_2__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_2__4__Impl
	rule__IterationStatement__Group_2__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_2__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationStatementAccess().getSemicolonKeyword_2_4()); }

	';' 

{ after(grammarAccess.getIterationStatementAccess().getSemicolonKeyword_2_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IterationStatement__Group_2__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_2__5__Impl
	rule__IterationStatement__Group_2__6
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_2__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationStatementAccess().getExpressionParserRuleCall_2_5()); }
(	ruleExpression)?
{ after(grammarAccess.getIterationStatementAccess().getExpressionParserRuleCall_2_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IterationStatement__Group_2__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_2__6__Impl
	rule__IterationStatement__Group_2__7
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_2__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationStatementAccess().getRightParenthesisKeyword_2_6()); }

	')' 

{ after(grammarAccess.getIterationStatementAccess().getRightParenthesisKeyword_2_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IterationStatement__Group_2__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IterationStatement__Group_2__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IterationStatement__Group_2__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIterationStatementAccess().getStatementParserRuleCall_2_7()); }
	ruleStatement
{ after(grammarAccess.getIterationStatementAccess().getStatementParserRuleCall_2_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__JumpStatement__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JumpStatement__Group_0__0__Impl
	rule__JumpStatement__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JumpStatement__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJumpStatementAccess().getBreakKeyword_0_0()); }

	'break' 

{ after(grammarAccess.getJumpStatementAccess().getBreakKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JumpStatement__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JumpStatement__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JumpStatement__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJumpStatementAccess().getSemicolonKeyword_0_1()); }

	';' 

{ after(grammarAccess.getJumpStatementAccess().getSemicolonKeyword_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__JumpStatement__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JumpStatement__Group_1__0__Impl
	rule__JumpStatement__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JumpStatement__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJumpStatementAccess().getContinueKeyword_1_0()); }

	'continue' 

{ after(grammarAccess.getJumpStatementAccess().getContinueKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JumpStatement__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JumpStatement__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JumpStatement__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJumpStatementAccess().getSemicolonKeyword_1_1()); }

	';' 

{ after(grammarAccess.getJumpStatementAccess().getSemicolonKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__JumpStatement__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JumpStatement__Group_2__0__Impl
	rule__JumpStatement__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JumpStatement__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJumpStatementAccess().getReturnKeyword_2_0()); }

	'return' 

{ after(grammarAccess.getJumpStatementAccess().getReturnKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JumpStatement__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JumpStatement__Group_2__1__Impl
	rule__JumpStatement__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__JumpStatement__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJumpStatementAccess().getAlternatives_2_1()); }
(rule__JumpStatement__Alternatives_2_1)?
{ after(grammarAccess.getJumpStatementAccess().getAlternatives_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JumpStatement__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JumpStatement__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JumpStatement__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJumpStatementAccess().getSemicolonKeyword_2_2()); }

	';' 

{ after(grammarAccess.getJumpStatementAccess().getSemicolonKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__JumpStatement__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JumpStatement__Group_3__0__Impl
	rule__JumpStatement__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__JumpStatement__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJumpStatementAccess().getGotoKeyword_3_0()); }

	'goto' 

{ after(grammarAccess.getJumpStatementAccess().getGotoKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JumpStatement__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JumpStatement__Group_3__1__Impl
	rule__JumpStatement__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__JumpStatement__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJumpStatementAccess().getIDTerminalRuleCall_3_1()); }
	RULE_ID
{ after(grammarAccess.getJumpStatementAccess().getIDTerminalRuleCall_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__JumpStatement__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__JumpStatement__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__JumpStatement__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getJumpStatementAccess().getSemicolonKeyword_3_2()); }

	';' 

{ after(grammarAccess.getJumpStatementAccess().getSemicolonKeyword_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__AliasDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AliasDeclaration__Group__0__Impl
	rule__AliasDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AliasDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAliasDeclarationAccess().getUsingKeyword_0()); }

	'using' 

{ after(grammarAccess.getAliasDeclarationAccess().getUsingKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AliasDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AliasDeclaration__Group__1__Impl
	rule__AliasDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AliasDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAliasDeclarationAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getAliasDeclarationAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AliasDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AliasDeclaration__Group__2__Impl
	rule__AliasDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AliasDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAliasDeclarationAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getAliasDeclarationAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AliasDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AliasDeclaration__Group__3__Impl
	rule__AliasDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AliasDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAliasDeclarationAccess().getTypeIdParserRuleCall_3()); }
	ruleTypeId
{ after(grammarAccess.getAliasDeclarationAccess().getTypeIdParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AliasDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AliasDeclaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AliasDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAliasDeclarationAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getAliasDeclarationAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__SimpleDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleDeclaration__Group__0__Impl
	rule__SimpleDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleDeclarationAccess().getDeclarationSpecifierParserRuleCall_0()); }
(	ruleDeclarationSpecifier)*
{ after(grammarAccess.getSimpleDeclarationAccess().getDeclarationSpecifierParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleDeclaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleDeclarationAccess().getSimpleDeclarationSuffixParserRuleCall_1()); }
	ruleSimpleDeclarationSuffix
{ after(grammarAccess.getSimpleDeclarationAccess().getSimpleDeclarationSuffixParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SimpleOrFunctionDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleOrFunctionDeclaration__Group__0__Impl
	rule__SimpleOrFunctionDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleOrFunctionDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleOrFunctionDeclarationAccess().getDeclarationSpecifierParserRuleCall_0()); }
(	ruleDeclarationSpecifier)*
{ after(grammarAccess.getSimpleOrFunctionDeclarationAccess().getDeclarationSpecifierParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleOrFunctionDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleOrFunctionDeclaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleOrFunctionDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleOrFunctionDeclarationAccess().getAlternatives_1()); }
(rule__SimpleOrFunctionDeclaration__Alternatives_1)
{ after(grammarAccess.getSimpleOrFunctionDeclarationAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SimpleDeclarationSuffix__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleDeclarationSuffix__Group__0__Impl
	rule__SimpleDeclarationSuffix__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleDeclarationSuffix__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleDeclarationSuffixAccess().getInitDeclaratorListParserRuleCall_0()); }
(	ruleInitDeclaratorList)?
{ after(grammarAccess.getSimpleDeclarationSuffixAccess().getInitDeclaratorListParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleDeclarationSuffix__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleDeclarationSuffix__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleDeclarationSuffix__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleDeclarationSuffixAccess().getSemicolonKeyword_1()); }

	';' 

{ after(grammarAccess.getSimpleDeclarationSuffixAccess().getSemicolonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionDeclarationSuffix__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclarationSuffix__Group__0__Impl
	rule__FunctionDeclarationSuffix__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclarationSuffix__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationSuffixAccess().getFunctionDeclaratorParserRuleCall_0()); }
	ruleFunctionDeclarator
{ after(grammarAccess.getFunctionDeclarationSuffixAccess().getFunctionDeclaratorParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclarationSuffix__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclarationSuffix__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclarationSuffix__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationSuffixAccess().getAlternatives_1()); }
(rule__FunctionDeclarationSuffix__Alternatives_1)
{ after(grammarAccess.getFunctionDeclarationSuffixAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionDeclarationSuffix__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclarationSuffix__Group_1_1__0__Impl
	rule__FunctionDeclarationSuffix__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclarationSuffix__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationSuffixAccess().getEqualsSignKeyword_1_1_0()); }

	'=' 

{ after(grammarAccess.getFunctionDeclarationSuffixAccess().getEqualsSignKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclarationSuffix__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclarationSuffix__Group_1_1__1__Impl
	rule__FunctionDeclarationSuffix__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclarationSuffix__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationSuffixAccess().getDefaultKeyword_1_1_1()); }

	'default' 

{ after(grammarAccess.getFunctionDeclarationSuffixAccess().getDefaultKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclarationSuffix__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclarationSuffix__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclarationSuffix__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationSuffixAccess().getSemicolonKeyword_1_1_2()); }

	';' 

{ after(grammarAccess.getFunctionDeclarationSuffixAccess().getSemicolonKeyword_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FunctionDeclarationSuffix__Group_1_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclarationSuffix__Group_1_2__0__Impl
	rule__FunctionDeclarationSuffix__Group_1_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclarationSuffix__Group_1_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationSuffixAccess().getEqualsSignKeyword_1_2_0()); }

	'=' 

{ after(grammarAccess.getFunctionDeclarationSuffixAccess().getEqualsSignKeyword_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclarationSuffix__Group_1_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclarationSuffix__Group_1_2__1__Impl
	rule__FunctionDeclarationSuffix__Group_1_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclarationSuffix__Group_1_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationSuffixAccess().getDeleteKeyword_1_2_1()); }

	'delete' 

{ after(grammarAccess.getFunctionDeclarationSuffixAccess().getDeleteKeyword_1_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclarationSuffix__Group_1_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclarationSuffix__Group_1_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclarationSuffix__Group_1_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclarationSuffixAccess().getSemicolonKeyword_1_2_2()); }

	';' 

{ after(grammarAccess.getFunctionDeclarationSuffixAccess().getSemicolonKeyword_1_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__StaticAssertDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StaticAssertDeclaration__Group__0__Impl
	rule__StaticAssertDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticAssertDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticAssertDeclarationAccess().getStatic_assertKeyword_0()); }

	'static_assert' 

{ after(grammarAccess.getStaticAssertDeclarationAccess().getStatic_assertKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StaticAssertDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StaticAssertDeclaration__Group__1__Impl
	rule__StaticAssertDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticAssertDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticAssertDeclarationAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getStaticAssertDeclarationAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StaticAssertDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StaticAssertDeclaration__Group__2__Impl
	rule__StaticAssertDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticAssertDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticAssertDeclarationAccess().getConstantExpressionParserRuleCall_2()); }
	ruleConstantExpression
{ after(grammarAccess.getStaticAssertDeclarationAccess().getConstantExpressionParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StaticAssertDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StaticAssertDeclaration__Group__3__Impl
	rule__StaticAssertDeclaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticAssertDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticAssertDeclarationAccess().getCommaKeyword_3()); }

	',' 

{ after(grammarAccess.getStaticAssertDeclarationAccess().getCommaKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StaticAssertDeclaration__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StaticAssertDeclaration__Group__4__Impl
	rule__StaticAssertDeclaration__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticAssertDeclaration__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticAssertDeclarationAccess().getSTRING_LITERALTerminalRuleCall_4()); }
	RULE_STRING_LITERAL
{ after(grammarAccess.getStaticAssertDeclarationAccess().getSTRING_LITERALTerminalRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StaticAssertDeclaration__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StaticAssertDeclaration__Group__5__Impl
	rule__StaticAssertDeclaration__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticAssertDeclaration__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticAssertDeclarationAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getStaticAssertDeclarationAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__StaticAssertDeclaration__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__StaticAssertDeclaration__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__StaticAssertDeclaration__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStaticAssertDeclarationAccess().getSemicolonKeyword_6()); }

	';' 

{ after(grammarAccess.getStaticAssertDeclarationAccess().getSemicolonKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__SimpleTypeSpecifier__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleTypeSpecifier__Group_0__0__Impl
	rule__SimpleTypeSpecifier__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleTypeSpecifier__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getColonColonKeyword_0_0()); }
(
	'::' 
)?
{ after(grammarAccess.getSimpleTypeSpecifierAccess().getColonColonKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleTypeSpecifier__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleTypeSpecifier__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleTypeSpecifier__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getAlternatives_0_1()); }
(rule__SimpleTypeSpecifier__Alternatives_0_1)
{ after(grammarAccess.getSimpleTypeSpecifierAccess().getAlternatives_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SimpleTypeSpecifier__Group_0_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleTypeSpecifier__Group_0_1_1__0__Impl
	rule__SimpleTypeSpecifier__Group_0_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleTypeSpecifier__Group_0_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getNestedNameSpecifierParserRuleCall_0_1_1_0()); }
	ruleNestedNameSpecifier
{ after(grammarAccess.getSimpleTypeSpecifierAccess().getNestedNameSpecifierParserRuleCall_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleTypeSpecifier__Group_0_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleTypeSpecifier__Group_0_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleTypeSpecifier__Group_0_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getAlternatives_0_1_1_1()); }
(rule__SimpleTypeSpecifier__Alternatives_0_1_1_1)
{ after(grammarAccess.getSimpleTypeSpecifierAccess().getAlternatives_0_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SimpleTypeSpecifier__Group_0_1_1_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleTypeSpecifier__Group_0_1_1_1_1__0__Impl
	rule__SimpleTypeSpecifier__Group_0_1_1_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleTypeSpecifier__Group_0_1_1_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getTemplateKeyword_0_1_1_1_1_0()); }

	'template' 

{ after(grammarAccess.getSimpleTypeSpecifierAccess().getTemplateKeyword_0_1_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleTypeSpecifier__Group_0_1_1_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleTypeSpecifier__Group_0_1_1_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleTypeSpecifier__Group_0_1_1_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTypeSpecifierAccess().getSimpleTemplateIdParserRuleCall_0_1_1_1_1_1()); }
	ruleSimpleTemplateId
{ after(grammarAccess.getSimpleTypeSpecifierAccess().getSimpleTemplateIdParserRuleCall_0_1_1_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DeclarationTypeSpecifier__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclarationTypeSpecifier__Group__0__Impl
	rule__DeclarationTypeSpecifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationTypeSpecifier__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationTypeSpecifierAccess().getDecltypeKeyword_0()); }

	'decltype' 

{ after(grammarAccess.getDeclarationTypeSpecifierAccess().getDecltypeKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DeclarationTypeSpecifier__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclarationTypeSpecifier__Group__1__Impl
	rule__DeclarationTypeSpecifier__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationTypeSpecifier__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationTypeSpecifierAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getDeclarationTypeSpecifierAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DeclarationTypeSpecifier__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclarationTypeSpecifier__Group__2__Impl
	rule__DeclarationTypeSpecifier__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationTypeSpecifier__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationTypeSpecifierAccess().getExpressionParserRuleCall_2()); }
	ruleExpression
{ after(grammarAccess.getDeclarationTypeSpecifierAccess().getExpressionParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DeclarationTypeSpecifier__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclarationTypeSpecifier__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationTypeSpecifier__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationTypeSpecifierAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getDeclarationTypeSpecifierAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__EnumSpecifier__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumSpecifier__Group__0__Impl
	rule__EnumSpecifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumSpecifier__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumSpecifierAccess().getEnumHeadParserRuleCall_0()); }
	ruleEnumHead
{ after(grammarAccess.getEnumSpecifierAccess().getEnumHeadParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumSpecifier__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumSpecifier__Group__1__Impl
	rule__EnumSpecifier__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumSpecifier__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumSpecifierAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getEnumSpecifierAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumSpecifier__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumSpecifier__Group__2__Impl
	rule__EnumSpecifier__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumSpecifier__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumSpecifierAccess().getGroup_2()); }
(rule__EnumSpecifier__Group_2__0)?
{ after(grammarAccess.getEnumSpecifierAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumSpecifier__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumSpecifier__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumSpecifier__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumSpecifierAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getEnumSpecifierAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__EnumSpecifier__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumSpecifier__Group_2__0__Impl
	rule__EnumSpecifier__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumSpecifier__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumSpecifierAccess().getEnumeratorListParserRuleCall_2_0()); }
	ruleEnumeratorList
{ after(grammarAccess.getEnumSpecifierAccess().getEnumeratorListParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumSpecifier__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumSpecifier__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumSpecifier__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumSpecifierAccess().getCommaKeyword_2_1()); }
(
	',' 
)?
{ after(grammarAccess.getEnumSpecifierAccess().getCommaKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EnumHead__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumHead__Group__0__Impl
	rule__EnumHead__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumHead__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumHeadAccess().getEnumKeyParserRuleCall_0()); }
	ruleEnumKey
{ after(grammarAccess.getEnumHeadAccess().getEnumKeyParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumHead__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumHead__Group__1__Impl
	rule__EnumHead__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumHead__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumHeadAccess().getAlternatives_1()); }
(rule__EnumHead__Alternatives_1)
{ after(grammarAccess.getEnumHeadAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumHead__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumHead__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumHead__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumHeadAccess().getEnumBaseParserRuleCall_2()); }
(	ruleEnumBase)?
{ after(grammarAccess.getEnumHeadAccess().getEnumBaseParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__EnumHead__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumHead__Group_1_1__0__Impl
	rule__EnumHead__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumHead__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumHeadAccess().getNestedNameSpecifierParserRuleCall_1_1_0()); }
	ruleNestedNameSpecifier
{ after(grammarAccess.getEnumHeadAccess().getNestedNameSpecifierParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumHead__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumHead__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumHead__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumHeadAccess().getIDTerminalRuleCall_1_1_1()); }
	RULE_ID
{ after(grammarAccess.getEnumHeadAccess().getIDTerminalRuleCall_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EnumKey__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumKey__Group_1__0__Impl
	rule__EnumKey__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumKey__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumKeyAccess().getEnumKeyword_1_0()); }

	'enum' 

{ after(grammarAccess.getEnumKeyAccess().getEnumKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumKey__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumKey__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumKey__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumKeyAccess().getClassKeyword_1_1()); }

	'class' 

{ after(grammarAccess.getEnumKeyAccess().getClassKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EnumKey__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumKey__Group_2__0__Impl
	rule__EnumKey__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumKey__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumKeyAccess().getEnumKeyword_2_0()); }

	'enum' 

{ after(grammarAccess.getEnumKeyAccess().getEnumKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumKey__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumKey__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumKey__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumKeyAccess().getStructKeyword_2_1()); }

	'struct' 

{ after(grammarAccess.getEnumKeyAccess().getStructKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EnumBase__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumBase__Group__0__Impl
	rule__EnumBase__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumBase__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumBaseAccess().getColonKeyword_0()); }

	':' 

{ after(grammarAccess.getEnumBaseAccess().getColonKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumBase__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumBase__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumBase__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getEnumBaseAccess().getTypeSpecifierParserRuleCall_1()); }
(	ruleTypeSpecifier)
{ after(grammarAccess.getEnumBaseAccess().getTypeSpecifierParserRuleCall_1()); }
)
(
{ before(grammarAccess.getEnumBaseAccess().getTypeSpecifierParserRuleCall_1()); }
(	ruleTypeSpecifier)*
{ after(grammarAccess.getEnumBaseAccess().getTypeSpecifierParserRuleCall_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EnumeratorList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumeratorList__Group__0__Impl
	rule__EnumeratorList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumeratorList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumeratorListAccess().getEnumerationDefinitionParserRuleCall_0()); }
	ruleEnumerationDefinition
{ after(grammarAccess.getEnumeratorListAccess().getEnumerationDefinitionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumeratorList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumeratorList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumeratorList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumeratorListAccess().getGroup_1()); }
(rule__EnumeratorList__Group_1__0)*
{ after(grammarAccess.getEnumeratorListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EnumeratorList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumeratorList__Group_1__0__Impl
	rule__EnumeratorList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumeratorList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumeratorListAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getEnumeratorListAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumeratorList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumeratorList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumeratorList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumeratorListAccess().getEnumerationDefinitionParserRuleCall_1_1()); }
	ruleEnumerationDefinition
{ after(grammarAccess.getEnumeratorListAccess().getEnumerationDefinitionParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EnumerationDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationDefinition__Group__0__Impl
	rule__EnumerationDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDefinitionAccess().getEnumeratorParserRuleCall_0()); }
	ruleEnumerator
{ after(grammarAccess.getEnumerationDefinitionAccess().getEnumeratorParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationDefinition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDefinitionAccess().getGroup_1()); }
(rule__EnumerationDefinition__Group_1__0)?
{ after(grammarAccess.getEnumerationDefinitionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__EnumerationDefinition__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationDefinition__Group_1__0__Impl
	rule__EnumerationDefinition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDefinition__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDefinitionAccess().getEqualsSignKeyword_1_0()); }

	'=' 

{ after(grammarAccess.getEnumerationDefinitionAccess().getEqualsSignKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EnumerationDefinition__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EnumerationDefinition__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EnumerationDefinition__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEnumerationDefinitionAccess().getConstantExpressionParserRuleCall_1_1()); }
	ruleConstantExpression
{ after(grammarAccess.getEnumerationDefinitionAccess().getConstantExpressionParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NamespaceDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamespaceDefinition__Group__0__Impl
	rule__NamespaceDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceDefinitionAccess().getInlineKeyword_0()); }
(
	'inline' 
)?
{ after(grammarAccess.getNamespaceDefinitionAccess().getInlineKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamespaceDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamespaceDefinition__Group__1__Impl
	rule__NamespaceDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceDefinitionAccess().getNamespaceKeyword_1()); }

	'namespace' 

{ after(grammarAccess.getNamespaceDefinitionAccess().getNamespaceKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamespaceDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamespaceDefinition__Group__2__Impl
	rule__NamespaceDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceDefinitionAccess().getIDTerminalRuleCall_2()); }
(	RULE_ID)?
{ after(grammarAccess.getNamespaceDefinitionAccess().getIDTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamespaceDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamespaceDefinition__Group__3__Impl
	rule__NamespaceDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceDefinitionAccess().getLeftCurlyBracketKeyword_3()); }

	'{' 

{ after(grammarAccess.getNamespaceDefinitionAccess().getLeftCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamespaceDefinition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamespaceDefinition__Group__4__Impl
	rule__NamespaceDefinition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceDefinition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceDefinitionAccess().getDeclarationParserRuleCall_4()); }
(	ruleDeclaration)*
{ after(grammarAccess.getNamespaceDefinitionAccess().getDeclarationParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamespaceDefinition__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamespaceDefinition__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceDefinition__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceDefinitionAccess().getRightCurlyBracketKeyword_5()); }

	'}' 

{ after(grammarAccess.getNamespaceDefinitionAccess().getRightCurlyBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__NamespaceAliasDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamespaceAliasDefinition__Group__0__Impl
	rule__NamespaceAliasDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceAliasDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceAliasDefinitionAccess().getNamespaceKeyword_0()); }

	'namespace' 

{ after(grammarAccess.getNamespaceAliasDefinitionAccess().getNamespaceKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamespaceAliasDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamespaceAliasDefinition__Group__1__Impl
	rule__NamespaceAliasDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceAliasDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceAliasDefinitionAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getNamespaceAliasDefinitionAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamespaceAliasDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamespaceAliasDefinition__Group__2__Impl
	rule__NamespaceAliasDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceAliasDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceAliasDefinitionAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getNamespaceAliasDefinitionAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamespaceAliasDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamespaceAliasDefinition__Group__3__Impl
	rule__NamespaceAliasDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceAliasDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceAliasDefinitionAccess().getQualifiedNamespaceSpecifierParserRuleCall_3()); }
	ruleQualifiedNamespaceSpecifier
{ after(grammarAccess.getNamespaceAliasDefinitionAccess().getQualifiedNamespaceSpecifierParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NamespaceAliasDefinition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NamespaceAliasDefinition__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NamespaceAliasDefinition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNamespaceAliasDefinitionAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getNamespaceAliasDefinitionAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__QualifiedNamespaceSpecifier__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNamespaceSpecifier__Group__0__Impl
	rule__QualifiedNamespaceSpecifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNamespaceSpecifier__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNamespaceSpecifierAccess().getColonColonKeyword_0()); }
(
	'::' 
)?
{ after(grammarAccess.getQualifiedNamespaceSpecifierAccess().getColonColonKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedNamespaceSpecifier__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNamespaceSpecifier__Group__1__Impl
	rule__QualifiedNamespaceSpecifier__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNamespaceSpecifier__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNamespaceSpecifierAccess().getNestedNameSpecifierParserRuleCall_1()); }
(	ruleNestedNameSpecifier)?
{ after(grammarAccess.getQualifiedNamespaceSpecifierAccess().getNestedNameSpecifierParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedNamespaceSpecifier__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__QualifiedNamespaceSpecifier__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNamespaceSpecifier__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getQualifiedNamespaceSpecifierAccess().getIDTerminalRuleCall_2()); }
	RULE_ID
{ after(grammarAccess.getQualifiedNamespaceSpecifierAccess().getIDTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__UsingDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UsingDeclaration__Group__0__Impl
	rule__UsingDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UsingDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUsingDeclarationAccess().getUsingKeyword_0()); }

	'using' 

{ after(grammarAccess.getUsingDeclarationAccess().getUsingKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UsingDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UsingDeclaration__Group__1__Impl
	rule__UsingDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UsingDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUsingDeclarationAccess().getAlternatives_1()); }
(rule__UsingDeclaration__Alternatives_1)
{ after(grammarAccess.getUsingDeclarationAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UsingDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UsingDeclaration__Group__2__Impl
	rule__UsingDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__UsingDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUsingDeclarationAccess().getUnqualifiedIdParserRuleCall_2()); }
	ruleUnqualifiedId
{ after(grammarAccess.getUsingDeclarationAccess().getUnqualifiedIdParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UsingDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UsingDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UsingDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUsingDeclarationAccess().getSemicolonKeyword_3()); }

	';' 

{ after(grammarAccess.getUsingDeclarationAccess().getSemicolonKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__UsingDeclaration__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UsingDeclaration__Group_1_1__0__Impl
	rule__UsingDeclaration__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UsingDeclaration__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUsingDeclarationAccess().getTypenameKeyword_1_1_0()); }
(
	'typename' 
)?
{ after(grammarAccess.getUsingDeclarationAccess().getTypenameKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UsingDeclaration__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UsingDeclaration__Group_1_1__1__Impl
	rule__UsingDeclaration__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UsingDeclaration__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUsingDeclarationAccess().getColonColonKeyword_1_1_1()); }
(
	'::' 
)?
{ after(grammarAccess.getUsingDeclarationAccess().getColonColonKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__UsingDeclaration__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__UsingDeclaration__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UsingDeclaration__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getUsingDeclarationAccess().getNestedNameSpecifierParserRuleCall_1_1_2()); }
	ruleNestedNameSpecifier
{ after(grammarAccess.getUsingDeclarationAccess().getNestedNameSpecifierParserRuleCall_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__AsmDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AsmDefinition__Group__0__Impl
	rule__AsmDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AsmDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAsmDefinitionAccess().getAsmKeyword_0()); }

	'asm' 

{ after(grammarAccess.getAsmDefinitionAccess().getAsmKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AsmDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AsmDefinition__Group__1__Impl
	rule__AsmDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AsmDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAsmDefinitionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getAsmDefinitionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AsmDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AsmDefinition__Group__2__Impl
	rule__AsmDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AsmDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAsmDefinitionAccess().getSTRING_LITERALTerminalRuleCall_2()); }
	RULE_STRING_LITERAL
{ after(grammarAccess.getAsmDefinitionAccess().getSTRING_LITERALTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AsmDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AsmDefinition__Group__3__Impl
	rule__AsmDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AsmDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAsmDefinitionAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getAsmDefinitionAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AsmDefinition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AsmDefinition__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AsmDefinition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAsmDefinitionAccess().getSemicolonKeyword_4()); }

	';' 

{ after(grammarAccess.getAsmDefinitionAccess().getSemicolonKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__LinkageSpecification__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LinkageSpecification__Group__0__Impl
	rule__LinkageSpecification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LinkageSpecification__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkageSpecificationAccess().getExternKeyword_0()); }

	'extern' 

{ after(grammarAccess.getLinkageSpecificationAccess().getExternKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LinkageSpecification__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LinkageSpecification__Group__1__Impl
	rule__LinkageSpecification__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LinkageSpecification__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkageSpecificationAccess().getSTRING_LITERALTerminalRuleCall_1()); }
	RULE_STRING_LITERAL
{ after(grammarAccess.getLinkageSpecificationAccess().getSTRING_LITERALTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LinkageSpecification__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LinkageSpecification__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LinkageSpecification__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkageSpecificationAccess().getAlternatives_2()); }
(rule__LinkageSpecification__Alternatives_2)
{ after(grammarAccess.getLinkageSpecificationAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LinkageSpecification__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LinkageSpecification__Group_2_1__0__Impl
	rule__LinkageSpecification__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LinkageSpecification__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkageSpecificationAccess().getLeftCurlyBracketKeyword_2_1_0()); }

	'{' 

{ after(grammarAccess.getLinkageSpecificationAccess().getLeftCurlyBracketKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LinkageSpecification__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LinkageSpecification__Group_2_1__1__Impl
	rule__LinkageSpecification__Group_2_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LinkageSpecification__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkageSpecificationAccess().getDeclarationParserRuleCall_2_1_1()); }
(	ruleDeclaration)*
{ after(grammarAccess.getLinkageSpecificationAccess().getDeclarationParserRuleCall_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LinkageSpecification__Group_2_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LinkageSpecification__Group_2_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LinkageSpecification__Group_2_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLinkageSpecificationAccess().getRightCurlyBracketKeyword_2_1_2()); }

	'}' 

{ after(grammarAccess.getLinkageSpecificationAccess().getRightCurlyBracketKeyword_2_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__InitDeclaratorList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InitDeclaratorList__Group__0__Impl
	rule__InitDeclaratorList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InitDeclaratorList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitDeclaratorListAccess().getInitDeclaratorParserRuleCall_0()); }
	ruleInitDeclarator
{ after(grammarAccess.getInitDeclaratorListAccess().getInitDeclaratorParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InitDeclaratorList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InitDeclaratorList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InitDeclaratorList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitDeclaratorListAccess().getGroup_1()); }
(rule__InitDeclaratorList__Group_1__0)*
{ after(grammarAccess.getInitDeclaratorListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InitDeclaratorList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InitDeclaratorList__Group_1__0__Impl
	rule__InitDeclaratorList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InitDeclaratorList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitDeclaratorListAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getInitDeclaratorListAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InitDeclaratorList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InitDeclaratorList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InitDeclaratorList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitDeclaratorListAccess().getInitDeclaratorParserRuleCall_1_1()); }
	ruleInitDeclarator
{ after(grammarAccess.getInitDeclaratorListAccess().getInitDeclaratorParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InitDeclarator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InitDeclarator__Group__0__Impl
	rule__InitDeclarator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InitDeclarator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitDeclaratorAccess().getDeclaratorIdParserRuleCall_0()); }
	ruleDeclaratorId
{ after(grammarAccess.getInitDeclaratorAccess().getDeclaratorIdParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InitDeclarator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InitDeclarator__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InitDeclarator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitDeclaratorAccess().getInitializerParserRuleCall_1()); }
(	ruleInitializer)?
{ after(grammarAccess.getInitDeclaratorAccess().getInitializerParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionDeclarator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclarator__Group__0__Impl
	rule__FunctionDeclarator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclarator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclaratorAccess().getDeclaratorIdParserRuleCall_0()); }
	ruleDeclaratorId
{ after(grammarAccess.getFunctionDeclaratorAccess().getDeclaratorIdParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDeclarator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDeclarator__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDeclarator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDeclaratorAccess().getParametersAndQualifiersParserRuleCall_1()); }
	ruleParametersAndQualifiers
{ after(grammarAccess.getFunctionDeclaratorAccess().getParametersAndQualifiersParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParametersAndQualifiers__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParametersAndQualifiers__Group__0__Impl
	rule__ParametersAndQualifiers__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParametersAndQualifiers__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParametersAndQualifiersAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getParametersAndQualifiersAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParametersAndQualifiers__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParametersAndQualifiers__Group__1__Impl
	rule__ParametersAndQualifiers__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParametersAndQualifiers__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParametersAndQualifiersAccess().getParameterDeclarationClauseParserRuleCall_1()); }
(	ruleParameterDeclarationClause)?
{ after(grammarAccess.getParametersAndQualifiersAccess().getParameterDeclarationClauseParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParametersAndQualifiers__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParametersAndQualifiers__Group__2__Impl
	rule__ParametersAndQualifiers__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ParametersAndQualifiers__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParametersAndQualifiersAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getParametersAndQualifiersAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParametersAndQualifiers__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParametersAndQualifiers__Group__3__Impl
	rule__ParametersAndQualifiers__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ParametersAndQualifiers__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParametersAndQualifiersAccess().getAlternatives_3()); }
(rule__ParametersAndQualifiers__Alternatives_3)?
{ after(grammarAccess.getParametersAndQualifiersAccess().getAlternatives_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParametersAndQualifiers__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParametersAndQualifiers__Group__4__Impl
	rule__ParametersAndQualifiers__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ParametersAndQualifiers__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParametersAndQualifiersAccess().getAlternatives_4()); }
(rule__ParametersAndQualifiers__Alternatives_4)?
{ after(grammarAccess.getParametersAndQualifiersAccess().getAlternatives_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParametersAndQualifiers__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParametersAndQualifiers__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParametersAndQualifiers__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParametersAndQualifiersAccess().getExceptionSpecificationParserRuleCall_5()); }
(	ruleExceptionSpecification)?
{ after(grammarAccess.getParametersAndQualifiersAccess().getExceptionSpecificationParserRuleCall_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__DeclaratorId__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclaratorId__Group__0__Impl
	rule__DeclaratorId__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaratorId__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorIdAccess().getFullStopFullStopFullStopKeyword_0()); }
(
	'...' 
)?
{ after(grammarAccess.getDeclaratorIdAccess().getFullStopFullStopFullStopKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DeclaratorId__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DeclaratorId__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaratorId__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclaratorIdAccess().getIdExpressionParserRuleCall_1()); }
	ruleIdExpression
{ after(grammarAccess.getDeclaratorIdAccess().getIdExpressionParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParameterDeclarationClause__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclarationClause__Group_1__0__Impl
	rule__ParameterDeclarationClause__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclarationClause__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationClauseAccess().getParameterDeclarationListParserRuleCall_1_0()); }
	ruleParameterDeclarationList
{ after(grammarAccess.getParameterDeclarationClauseAccess().getParameterDeclarationListParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterDeclarationClause__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclarationClause__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclarationClause__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationClauseAccess().getGroup_1_1()); }
(rule__ParameterDeclarationClause__Group_1_1__0)?
{ after(grammarAccess.getParameterDeclarationClauseAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParameterDeclarationClause__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclarationClause__Group_1_1__0__Impl
	rule__ParameterDeclarationClause__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclarationClause__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationClauseAccess().getCommaKeyword_1_1_0()); }
(
	',' 
)?
{ after(grammarAccess.getParameterDeclarationClauseAccess().getCommaKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterDeclarationClause__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclarationClause__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclarationClause__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationClauseAccess().getFullStopFullStopFullStopKeyword_1_1_1()); }

	'...' 

{ after(grammarAccess.getParameterDeclarationClauseAccess().getFullStopFullStopFullStopKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParameterDeclarationList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclarationList__Group__0__Impl
	rule__ParameterDeclarationList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclarationList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationListAccess().getParameterDeclarationParserRuleCall_0()); }
	ruleParameterDeclaration
{ after(grammarAccess.getParameterDeclarationListAccess().getParameterDeclarationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterDeclarationList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclarationList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclarationList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationListAccess().getGroup_1()); }
(rule__ParameterDeclarationList__Group_1__0)*
{ after(grammarAccess.getParameterDeclarationListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParameterDeclarationList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclarationList__Group_1__0__Impl
	rule__ParameterDeclarationList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclarationList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationListAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getParameterDeclarationListAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterDeclarationList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclarationList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclarationList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationListAccess().getParameterDeclarationParserRuleCall_1_1()); }
	ruleParameterDeclaration
{ after(grammarAccess.getParameterDeclarationListAccess().getParameterDeclarationParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParameterDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclaration__Group__0__Impl
	rule__ParameterDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getParameterDeclarationAccess().getDeclarationSpecifierParserRuleCall_0()); }
(	ruleDeclarationSpecifier)
{ after(grammarAccess.getParameterDeclarationAccess().getDeclarationSpecifierParserRuleCall_0()); }
)
(
{ before(grammarAccess.getParameterDeclarationAccess().getDeclarationSpecifierParserRuleCall_0()); }
(	ruleDeclarationSpecifier)*
{ after(grammarAccess.getParameterDeclarationAccess().getDeclarationSpecifierParserRuleCall_0()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParameterDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParameterDeclaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParameterDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParameterDeclarationAccess().getInitDeclaratorParserRuleCall_1()); }
	ruleInitDeclarator
{ after(grammarAccess.getParameterDeclarationAccess().getInitDeclaratorParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionBody__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionBody__Group_0__0__Impl
	rule__FunctionBody__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionBody__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionBodyAccess().getCtorInitializerParserRuleCall_0_0()); }
(	ruleCtorInitializer)?
{ after(grammarAccess.getFunctionBodyAccess().getCtorInitializerParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionBody__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionBody__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionBody__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionBodyAccess().getCompoundStatementParserRuleCall_0_1()); }
	ruleCompoundStatement
{ after(grammarAccess.getFunctionBodyAccess().getCompoundStatementParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Initializer__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Initializer__Group_1__0__Impl
	rule__Initializer__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Initializer__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitializerAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getInitializerAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Initializer__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Initializer__Group_1__1__Impl
	rule__Initializer__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Initializer__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitializerAccess().getExpressionListParserRuleCall_1_1()); }
	ruleExpressionList
{ after(grammarAccess.getInitializerAccess().getExpressionListParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Initializer__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Initializer__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Initializer__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitializerAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getInitializerAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BraceOrEqualInitializer__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BraceOrEqualInitializer__Group_0__0__Impl
	rule__BraceOrEqualInitializer__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BraceOrEqualInitializer__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBraceOrEqualInitializerAccess().getEqualsSignKeyword_0_0()); }

	'=' 

{ after(grammarAccess.getBraceOrEqualInitializerAccess().getEqualsSignKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BraceOrEqualInitializer__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BraceOrEqualInitializer__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BraceOrEqualInitializer__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBraceOrEqualInitializerAccess().getInitializerClauseParserRuleCall_0_1()); }
	ruleInitializerClause
{ after(grammarAccess.getBraceOrEqualInitializerAccess().getInitializerClauseParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__InitializerList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InitializerList__Group__0__Impl
	rule__InitializerList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InitializerList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitializerListAccess().getInitializerClauseParserRuleCall_0()); }
	ruleInitializerClause
{ after(grammarAccess.getInitializerListAccess().getInitializerClauseParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InitializerList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InitializerList__Group__1__Impl
	rule__InitializerList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InitializerList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitializerListAccess().getFullStopFullStopFullStopKeyword_1()); }
(
	'...' 
)?
{ after(grammarAccess.getInitializerListAccess().getFullStopFullStopFullStopKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InitializerList__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InitializerList__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InitializerList__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitializerListAccess().getGroup_2()); }
(rule__InitializerList__Group_2__0)*
{ after(grammarAccess.getInitializerListAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__InitializerList__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InitializerList__Group_2__0__Impl
	rule__InitializerList__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InitializerList__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitializerListAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getInitializerListAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InitializerList__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InitializerList__Group_2__1__Impl
	rule__InitializerList__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InitializerList__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitializerListAccess().getInitializerClauseParserRuleCall_2_1()); }
	ruleInitializerClause
{ after(grammarAccess.getInitializerListAccess().getInitializerClauseParserRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InitializerList__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InitializerList__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InitializerList__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInitializerListAccess().getFullStopFullStopFullStopKeyword_2_2()); }
(
	'...' 
)?
{ after(grammarAccess.getInitializerListAccess().getFullStopFullStopFullStopKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BracedInitializerList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BracedInitializerList__Group__0__Impl
	rule__BracedInitializerList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BracedInitializerList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBracedInitializerListAccess().getLeftCurlyBracketKeyword_0()); }

	'{' 

{ after(grammarAccess.getBracedInitializerListAccess().getLeftCurlyBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BracedInitializerList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BracedInitializerList__Group__1__Impl
	rule__BracedInitializerList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BracedInitializerList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBracedInitializerListAccess().getGroup_1()); }
(rule__BracedInitializerList__Group_1__0)?
{ after(grammarAccess.getBracedInitializerListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BracedInitializerList__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BracedInitializerList__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BracedInitializerList__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBracedInitializerListAccess().getRightCurlyBracketKeyword_2()); }

	'}' 

{ after(grammarAccess.getBracedInitializerListAccess().getRightCurlyBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BracedInitializerList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BracedInitializerList__Group_1__0__Impl
	rule__BracedInitializerList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BracedInitializerList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBracedInitializerListAccess().getInitializerListParserRuleCall_1_0()); }
	ruleInitializerList
{ after(grammarAccess.getBracedInitializerListAccess().getInitializerListParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BracedInitializerList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BracedInitializerList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BracedInitializerList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBracedInitializerListAccess().getCommaKeyword_1_1()); }
(
	',' 
)?
{ after(grammarAccess.getBracedInitializerListAccess().getCommaKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ClassSpecifier__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassSpecifier__Group__0__Impl
	rule__ClassSpecifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassSpecifier__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassSpecifierAccess().getClassHeadParserRuleCall_0()); }
	ruleClassHead
{ after(grammarAccess.getClassSpecifierAccess().getClassHeadParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassSpecifier__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassSpecifier__Group__1__Impl
	rule__ClassSpecifier__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassSpecifier__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassSpecifierAccess().getLeftCurlyBracketKeyword_1()); }

	'{' 

{ after(grammarAccess.getClassSpecifierAccess().getLeftCurlyBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassSpecifier__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassSpecifier__Group__2__Impl
	rule__ClassSpecifier__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassSpecifier__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassSpecifierAccess().getMemberSpecificationParserRuleCall_2()); }
(	ruleMemberSpecification)?
{ after(grammarAccess.getClassSpecifierAccess().getMemberSpecificationParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassSpecifier__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassSpecifier__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassSpecifier__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassSpecifierAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getClassSpecifierAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__ClassHead__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassHead__Group__0__Impl
	rule__ClassHead__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassHead__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassHeadAccess().getClassKeyParserRuleCall_0()); }
	ruleClassKey
{ after(grammarAccess.getClassHeadAccess().getClassKeyParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassHead__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassHead__Group__1__Impl
	rule__ClassHead__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassHead__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassHeadAccess().getGroup_1()); }
(rule__ClassHead__Group_1__0)?
{ after(grammarAccess.getClassHeadAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassHead__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassHead__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassHead__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassHeadAccess().getBaseClauseParserRuleCall_2()); }
(	ruleBaseClause)?
{ after(grammarAccess.getClassHeadAccess().getBaseClauseParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ClassHead__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassHead__Group_1__0__Impl
	rule__ClassHead__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassHead__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassHeadAccess().getNestedNameSpecifierParserRuleCall_1_0()); }
(	ruleNestedNameSpecifier)?
{ after(grammarAccess.getClassHeadAccess().getNestedNameSpecifierParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassHead__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassHead__Group_1__1__Impl
	rule__ClassHead__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassHead__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassHeadAccess().getTypeNameParserRuleCall_1_1()); }
	ruleTypeName
{ after(grammarAccess.getClassHeadAccess().getTypeNameParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassHead__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassHead__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassHead__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassHeadAccess().getClassVirtualSpecifierParserRuleCall_1_2()); }
(	ruleClassVirtualSpecifier)*
{ after(grammarAccess.getClassHeadAccess().getClassVirtualSpecifierParserRuleCall_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MemberSpecification__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberSpecification__Group__0__Impl
	rule__MemberSpecification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberSpecification__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberSpecificationAccess().getAlternatives_0()); }
(rule__MemberSpecification__Alternatives_0)
{ after(grammarAccess.getMemberSpecificationAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberSpecification__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberSpecification__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberSpecification__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberSpecificationAccess().getMemberSpecificationParserRuleCall_1()); }
(	ruleMemberSpecification)?
{ after(grammarAccess.getMemberSpecificationAccess().getMemberSpecificationParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MemberSpecification__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberSpecification__Group_0_1__0__Impl
	rule__MemberSpecification__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberSpecification__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberSpecificationAccess().getAccessSpecifierParserRuleCall_0_1_0()); }
	ruleAccessSpecifier
{ after(grammarAccess.getMemberSpecificationAccess().getAccessSpecifierParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberSpecification__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberSpecification__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberSpecification__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberSpecificationAccess().getColonKeyword_0_1_1()); }

	':' 

{ after(grammarAccess.getMemberSpecificationAccess().getColonKeyword_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MemberOrFunctionDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberOrFunctionDeclaration__Group__0__Impl
	rule__MemberOrFunctionDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberOrFunctionDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberOrFunctionDeclarationAccess().getDeclarationSpecifierParserRuleCall_0()); }
(	ruleDeclarationSpecifier)*
{ after(grammarAccess.getMemberOrFunctionDeclarationAccess().getDeclarationSpecifierParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberOrFunctionDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberOrFunctionDeclaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberOrFunctionDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberOrFunctionDeclarationAccess().getAlternatives_1()); }
(rule__MemberOrFunctionDeclaration__Alternatives_1)
{ after(grammarAccess.getMemberOrFunctionDeclarationAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MemberOrFunctionDeclaration__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberOrFunctionDeclaration__Group_1_1__0__Impl
	rule__MemberOrFunctionDeclaration__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberOrFunctionDeclaration__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberOrFunctionDeclarationAccess().getMemberDeclarationSuffixParserRuleCall_1_1_0()); }
	ruleMemberDeclarationSuffix
{ after(grammarAccess.getMemberOrFunctionDeclarationAccess().getMemberDeclarationSuffixParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberOrFunctionDeclaration__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberOrFunctionDeclaration__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberOrFunctionDeclaration__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberOrFunctionDeclarationAccess().getSemicolonKeyword_1_1_1()); }

	';' 

{ after(grammarAccess.getMemberOrFunctionDeclarationAccess().getSemicolonKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MemberDeclaratorList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberDeclaratorList__Group__0__Impl
	rule__MemberDeclaratorList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberDeclaratorList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberDeclaratorListAccess().getMemberDeclaratorParserRuleCall_0()); }
	ruleMemberDeclarator
{ after(grammarAccess.getMemberDeclaratorListAccess().getMemberDeclaratorParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberDeclaratorList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberDeclaratorList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberDeclaratorList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberDeclaratorListAccess().getGroup_1()); }
(rule__MemberDeclaratorList__Group_1__0)*
{ after(grammarAccess.getMemberDeclaratorListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MemberDeclaratorList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberDeclaratorList__Group_1__0__Impl
	rule__MemberDeclaratorList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberDeclaratorList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberDeclaratorListAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getMemberDeclaratorListAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberDeclaratorList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberDeclaratorList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberDeclaratorList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberDeclaratorListAccess().getMemberDeclaratorParserRuleCall_1_1()); }
	ruleMemberDeclarator
{ after(grammarAccess.getMemberDeclaratorListAccess().getMemberDeclaratorParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MemberDeclarator__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberDeclarator__Group__0__Impl
	rule__MemberDeclarator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberDeclarator__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberDeclaratorAccess().getDeclaratorIdParserRuleCall_0()); }
	ruleDeclaratorId
{ after(grammarAccess.getMemberDeclaratorAccess().getDeclaratorIdParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberDeclarator__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberDeclarator__Group__1__Impl
	rule__MemberDeclarator__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberDeclarator__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberDeclaratorAccess().getVirtualSpecifierParserRuleCall_1()); }
(	ruleVirtualSpecifier)*
{ after(grammarAccess.getMemberDeclaratorAccess().getVirtualSpecifierParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MemberDeclarator__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MemberDeclarator__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberDeclarator__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMemberDeclaratorAccess().getAlternatives_2()); }
(rule__MemberDeclarator__Alternatives_2)
{ after(grammarAccess.getMemberDeclaratorAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PureSpecifier__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PureSpecifier__Group__0__Impl
	rule__PureSpecifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PureSpecifier__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPureSpecifierAccess().getEqualsSignKeyword_0()); }

	'=' 

{ after(grammarAccess.getPureSpecifierAccess().getEqualsSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PureSpecifier__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PureSpecifier__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PureSpecifier__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPureSpecifierAccess().getDigitZeroKeyword_1()); }

	'0' 

{ after(grammarAccess.getPureSpecifierAccess().getDigitZeroKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BaseClause__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BaseClause__Group__0__Impl
	rule__BaseClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseClause__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBaseClauseAccess().getColonKeyword_0()); }

	':' 

{ after(grammarAccess.getBaseClauseAccess().getColonKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BaseClause__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BaseClause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseClause__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBaseClauseAccess().getBaseSpecifierListParserRuleCall_1()); }
	ruleBaseSpecifierList
{ after(grammarAccess.getBaseClauseAccess().getBaseSpecifierListParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BaseSpecifierList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BaseSpecifierList__Group__0__Impl
	rule__BaseSpecifierList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseSpecifierList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBaseSpecifierListAccess().getBaseSpecifierParserRuleCall_0()); }
	ruleBaseSpecifier
{ after(grammarAccess.getBaseSpecifierListAccess().getBaseSpecifierParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BaseSpecifierList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BaseSpecifierList__Group__1__Impl
	rule__BaseSpecifierList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseSpecifierList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBaseSpecifierListAccess().getFullStopFullStopFullStopKeyword_1()); }
(
	'...' 
)?
{ after(grammarAccess.getBaseSpecifierListAccess().getFullStopFullStopFullStopKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BaseSpecifierList__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BaseSpecifierList__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseSpecifierList__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBaseSpecifierListAccess().getGroup_2()); }
(rule__BaseSpecifierList__Group_2__0)*
{ after(grammarAccess.getBaseSpecifierListAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BaseSpecifierList__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BaseSpecifierList__Group_2__0__Impl
	rule__BaseSpecifierList__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseSpecifierList__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBaseSpecifierListAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getBaseSpecifierListAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BaseSpecifierList__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BaseSpecifierList__Group_2__1__Impl
	rule__BaseSpecifierList__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseSpecifierList__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBaseSpecifierListAccess().getBaseSpecifierParserRuleCall_2_1()); }
	ruleBaseSpecifier
{ after(grammarAccess.getBaseSpecifierListAccess().getBaseSpecifierParserRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BaseSpecifierList__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BaseSpecifierList__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseSpecifierList__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBaseSpecifierListAccess().getFullStopFullStopFullStopKeyword_2_2()); }
(
	'...' 
)?
{ after(grammarAccess.getBaseSpecifierListAccess().getFullStopFullStopFullStopKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__BaseSpecifier__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BaseSpecifier__Group__0__Impl
	rule__BaseSpecifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseSpecifier__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBaseSpecifierAccess().getAlternatives_0()); }
(rule__BaseSpecifier__Alternatives_0)?
{ after(grammarAccess.getBaseSpecifierAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BaseSpecifier__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BaseSpecifier__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseSpecifier__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBaseSpecifierAccess().getClassOrDeclarationTypeParserRuleCall_1()); }
	ruleClassOrDeclarationType
{ after(grammarAccess.getBaseSpecifierAccess().getClassOrDeclarationTypeParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BaseSpecifier__Group_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BaseSpecifier__Group_0_0__0__Impl
	rule__BaseSpecifier__Group_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseSpecifier__Group_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBaseSpecifierAccess().getVirtualKeyword_0_0_0()); }

	'virtual' 

{ after(grammarAccess.getBaseSpecifierAccess().getVirtualKeyword_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BaseSpecifier__Group_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BaseSpecifier__Group_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseSpecifier__Group_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBaseSpecifierAccess().getAccessSpecifierParserRuleCall_0_0_1()); }
(	ruleAccessSpecifier)?
{ after(grammarAccess.getBaseSpecifierAccess().getAccessSpecifierParserRuleCall_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BaseSpecifier__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BaseSpecifier__Group_0_1__0__Impl
	rule__BaseSpecifier__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseSpecifier__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBaseSpecifierAccess().getAccessSpecifierParserRuleCall_0_1_0()); }
	ruleAccessSpecifier
{ after(grammarAccess.getBaseSpecifierAccess().getAccessSpecifierParserRuleCall_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BaseSpecifier__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BaseSpecifier__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BaseSpecifier__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBaseSpecifierAccess().getVirtualKeyword_0_1_1()); }
(
	'virtual' 
)?
{ after(grammarAccess.getBaseSpecifierAccess().getVirtualKeyword_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ClassOrDeclarationType__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassOrDeclarationType__Group_0__0__Impl
	rule__ClassOrDeclarationType__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassOrDeclarationType__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassOrDeclarationTypeAccess().getColonColonKeyword_0_0()); }
(
	'::' 
)?
{ after(grammarAccess.getClassOrDeclarationTypeAccess().getColonColonKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassOrDeclarationType__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassOrDeclarationType__Group_0__1__Impl
	rule__ClassOrDeclarationType__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassOrDeclarationType__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassOrDeclarationTypeAccess().getNestedNameSpecifierParserRuleCall_0_1()); }
(	ruleNestedNameSpecifier)?
{ after(grammarAccess.getClassOrDeclarationTypeAccess().getNestedNameSpecifierParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ClassOrDeclarationType__Group_0__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ClassOrDeclarationType__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ClassOrDeclarationType__Group_0__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassOrDeclarationTypeAccess().getTypeNameParserRuleCall_0_2()); }
	ruleTypeName
{ after(grammarAccess.getClassOrDeclarationTypeAccess().getTypeNameParserRuleCall_0_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__OperatorFunctionId__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatorFunctionId__Group__0__Impl
	rule__OperatorFunctionId__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorFunctionId__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorFunctionIdAccess().getOperatorKeyword_0()); }

	'operator' 

{ after(grammarAccess.getOperatorFunctionIdAccess().getOperatorKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperatorFunctionId__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatorFunctionId__Group__1__Impl
	rule__OperatorFunctionId__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorFunctionId__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorFunctionIdAccess().getOverloadableOperatorParserRuleCall_1()); }
	ruleOverloadableOperator
{ after(grammarAccess.getOperatorFunctionIdAccess().getOverloadableOperatorParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperatorFunctionId__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatorFunctionId__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorFunctionId__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorFunctionIdAccess().getGroup_2()); }
(rule__OperatorFunctionId__Group_2__0)?
{ after(grammarAccess.getOperatorFunctionIdAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__OperatorFunctionId__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatorFunctionId__Group_2__0__Impl
	rule__OperatorFunctionId__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorFunctionId__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorFunctionIdAccess().getLessThanSignKeyword_2_0()); }

	'<' 

{ after(grammarAccess.getOperatorFunctionIdAccess().getLessThanSignKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperatorFunctionId__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatorFunctionId__Group_2__1__Impl
	rule__OperatorFunctionId__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorFunctionId__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorFunctionIdAccess().getAlternatives_2_1()); }
(rule__OperatorFunctionId__Alternatives_2_1)*
{ after(grammarAccess.getOperatorFunctionIdAccess().getAlternatives_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OperatorFunctionId__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OperatorFunctionId__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OperatorFunctionId__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorFunctionIdAccess().getGreaterThanSignKeyword_2_2()); }

	'>' 

{ after(grammarAccess.getOperatorFunctionIdAccess().getGreaterThanSignKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__OverloadableOperator__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OverloadableOperator__Group_2__0__Impl
	rule__OverloadableOperator__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OverloadableOperator__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOverloadableOperatorAccess().getNewKeyword_2_0()); }

	'new' 

{ after(grammarAccess.getOverloadableOperatorAccess().getNewKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OverloadableOperator__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OverloadableOperator__Group_2__1__Impl
	rule__OverloadableOperator__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OverloadableOperator__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOverloadableOperatorAccess().getLeftSquareBracketKeyword_2_1()); }

	'[' 

{ after(grammarAccess.getOverloadableOperatorAccess().getLeftSquareBracketKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OverloadableOperator__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OverloadableOperator__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OverloadableOperator__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOverloadableOperatorAccess().getRightSquareBracketKeyword_2_2()); }

	']' 

{ after(grammarAccess.getOverloadableOperatorAccess().getRightSquareBracketKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__OverloadableOperator__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OverloadableOperator__Group_3__0__Impl
	rule__OverloadableOperator__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OverloadableOperator__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOverloadableOperatorAccess().getDeleteKeyword_3_0()); }

	'delete' 

{ after(grammarAccess.getOverloadableOperatorAccess().getDeleteKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OverloadableOperator__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OverloadableOperator__Group_3__1__Impl
	rule__OverloadableOperator__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OverloadableOperator__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOverloadableOperatorAccess().getLeftSquareBracketKeyword_3_1()); }

	'[' 

{ after(grammarAccess.getOverloadableOperatorAccess().getLeftSquareBracketKeyword_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OverloadableOperator__Group_3__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OverloadableOperator__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OverloadableOperator__Group_3__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOverloadableOperatorAccess().getRightSquareBracketKeyword_3_2()); }

	']' 

{ after(grammarAccess.getOverloadableOperatorAccess().getRightSquareBracketKeyword_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__LiteralOperatorId__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralOperatorId__Group__0__Impl
	rule__LiteralOperatorId__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralOperatorId__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralOperatorIdAccess().getOperatorKeyword_0()); }

	'operator' 

{ after(grammarAccess.getLiteralOperatorIdAccess().getOperatorKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralOperatorId__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralOperatorId__Group__1__Impl
	rule__LiteralOperatorId__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralOperatorId__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralOperatorIdAccess().getQuotationMarkKeyword_1()); }

	'"' 

{ after(grammarAccess.getLiteralOperatorIdAccess().getQuotationMarkKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__LiteralOperatorId__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__LiteralOperatorId__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LiteralOperatorId__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLiteralOperatorIdAccess().getQuotationMarkKeyword_2()); }

	'"' 

{ after(grammarAccess.getLiteralOperatorIdAccess().getQuotationMarkKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TemplateDeclaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemplateDeclaration__Group__0__Impl
	rule__TemplateDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateDeclaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateDeclarationAccess().getTemplateKeyword_0()); }

	'template' 

{ after(grammarAccess.getTemplateDeclarationAccess().getTemplateKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemplateDeclaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemplateDeclaration__Group__1__Impl
	rule__TemplateDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateDeclaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateDeclarationAccess().getLessThanSignKeyword_1()); }

	'<' 

{ after(grammarAccess.getTemplateDeclarationAccess().getLessThanSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemplateDeclaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemplateDeclaration__Group__2__Impl
	rule__TemplateDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateDeclaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateDeclarationAccess().getTemplateParameterListParserRuleCall_2()); }
	ruleTemplateParameterList
{ after(grammarAccess.getTemplateDeclarationAccess().getTemplateParameterListParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemplateDeclaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemplateDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateDeclaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateDeclarationAccess().getGreaterThanSignKeyword_3()); }

	'>' 

{ after(grammarAccess.getTemplateDeclarationAccess().getGreaterThanSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__TemplateParameterList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemplateParameterList__Group__0__Impl
	rule__TemplateParameterList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateParameterList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateParameterListAccess().getTemplateParameterParserRuleCall_0()); }
	ruleTemplateParameter
{ after(grammarAccess.getTemplateParameterListAccess().getTemplateParameterParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemplateParameterList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemplateParameterList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateParameterList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateParameterListAccess().getGroup_1()); }
(rule__TemplateParameterList__Group_1__0)*
{ after(grammarAccess.getTemplateParameterListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TemplateParameterList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemplateParameterList__Group_1__0__Impl
	rule__TemplateParameterList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateParameterList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateParameterListAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getTemplateParameterListAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemplateParameterList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemplateParameterList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateParameterList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateParameterListAccess().getTemplateParameterParserRuleCall_1_1()); }
	ruleTemplateParameter
{ after(grammarAccess.getTemplateParameterListAccess().getTemplateParameterParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TypeParameter__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameter__Group__0__Impl
	rule__TypeParameter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameter__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParameterAccess().getAlternatives_0()); }
(rule__TypeParameter__Alternatives_0)
{ after(grammarAccess.getTypeParameterAccess().getAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeParameter__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameter__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameter__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParameterAccess().getAlternatives_1()); }
(rule__TypeParameter__Alternatives_1)
{ after(grammarAccess.getTypeParameterAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TypeParameter__Group_1_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameter__Group_1_0__0__Impl
	rule__TypeParameter__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameter__Group_1_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParameterAccess().getFullStopFullStopFullStopKeyword_1_0_0()); }
(
	'...' 
)?
{ after(grammarAccess.getTypeParameterAccess().getFullStopFullStopFullStopKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeParameter__Group_1_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameter__Group_1_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameter__Group_1_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParameterAccess().getIDTerminalRuleCall_1_0_1()); }
(	RULE_ID)?
{ after(grammarAccess.getTypeParameterAccess().getIDTerminalRuleCall_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TypeParameter__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameter__Group_1_1__0__Impl
	rule__TypeParameter__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameter__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParameterAccess().getIDTerminalRuleCall_1_1_0()); }
(	RULE_ID)?
{ after(grammarAccess.getTypeParameterAccess().getIDTerminalRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeParameter__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameter__Group_1_1__1__Impl
	rule__TypeParameter__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameter__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParameterAccess().getEqualsSignKeyword_1_1_1()); }

	'=' 

{ after(grammarAccess.getTypeParameterAccess().getEqualsSignKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypeParameter__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypeParameter__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypeParameter__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypeParameterAccess().getTypeIdParserRuleCall_1_1_2()); }
	ruleTypeId
{ after(grammarAccess.getTypeParameterAccess().getTypeIdParserRuleCall_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SimpleTemplateId__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleTemplateId__Group__0__Impl
	rule__SimpleTemplateId__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleTemplateId__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTemplateIdAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
{ after(grammarAccess.getSimpleTemplateIdAccess().getIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleTemplateId__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleTemplateId__Group__1__Impl
	rule__SimpleTemplateId__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleTemplateId__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTemplateIdAccess().getLessThanSignKeyword_1()); }

	'<' 

{ after(grammarAccess.getSimpleTemplateIdAccess().getLessThanSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleTemplateId__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleTemplateId__Group__2__Impl
	rule__SimpleTemplateId__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleTemplateId__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTemplateIdAccess().getTemplateArgumentListParserRuleCall_2()); }
	ruleTemplateArgumentList
{ after(grammarAccess.getSimpleTemplateIdAccess().getTemplateArgumentListParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleTemplateId__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleTemplateId__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleTemplateId__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleTemplateIdAccess().getGreaterThanSignKeyword_3()); }

	'>' 

{ after(grammarAccess.getSimpleTemplateIdAccess().getGreaterThanSignKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__TemplateArgumentList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemplateArgumentList__Group__0__Impl
	rule__TemplateArgumentList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateArgumentList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateArgumentListAccess().getTemplateArgumentParserRuleCall_0()); }
	ruleTemplateArgument
{ after(grammarAccess.getTemplateArgumentListAccess().getTemplateArgumentParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemplateArgumentList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemplateArgumentList__Group__1__Impl
	rule__TemplateArgumentList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateArgumentList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateArgumentListAccess().getFullStopFullStopFullStopKeyword_1()); }
(
	'...' 
)?
{ after(grammarAccess.getTemplateArgumentListAccess().getFullStopFullStopFullStopKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemplateArgumentList__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemplateArgumentList__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateArgumentList__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateArgumentListAccess().getGroup_2()); }
(rule__TemplateArgumentList__Group_2__0)*
{ after(grammarAccess.getTemplateArgumentListAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TemplateArgumentList__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemplateArgumentList__Group_2__0__Impl
	rule__TemplateArgumentList__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateArgumentList__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateArgumentListAccess().getCommaKeyword_2_0()); }

	',' 

{ after(grammarAccess.getTemplateArgumentListAccess().getCommaKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemplateArgumentList__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemplateArgumentList__Group_2__1__Impl
	rule__TemplateArgumentList__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateArgumentList__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateArgumentListAccess().getTemplateArgumentParserRuleCall_2_1()); }
	ruleTemplateArgument
{ after(grammarAccess.getTemplateArgumentListAccess().getTemplateArgumentParserRuleCall_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TemplateArgumentList__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TemplateArgumentList__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TemplateArgumentList__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTemplateArgumentListAccess().getFullStopFullStopFullStopKeyword_2_2()); }
(
	'...' 
)?
{ after(grammarAccess.getTemplateArgumentListAccess().getFullStopFullStopFullStopKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__TypenameSpecifier__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypenameSpecifier__Group__0__Impl
	rule__TypenameSpecifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypenameSpecifier__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypenameSpecifierAccess().getTypenameKeyword_0()); }

	'typename' 

{ after(grammarAccess.getTypenameSpecifierAccess().getTypenameKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypenameSpecifier__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypenameSpecifier__Group__1__Impl
	rule__TypenameSpecifier__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypenameSpecifier__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypenameSpecifierAccess().getColonColonKeyword_1()); }
(
	'::' 
)?
{ after(grammarAccess.getTypenameSpecifierAccess().getColonColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypenameSpecifier__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypenameSpecifier__Group__2__Impl
	rule__TypenameSpecifier__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TypenameSpecifier__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypenameSpecifierAccess().getNestedNameSpecifierParserRuleCall_2()); }
	ruleNestedNameSpecifier
{ after(grammarAccess.getTypenameSpecifierAccess().getNestedNameSpecifierParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypenameSpecifier__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypenameSpecifier__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypenameSpecifier__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypenameSpecifierAccess().getAlternatives_3()); }
(rule__TypenameSpecifier__Alternatives_3)
{ after(grammarAccess.getTypenameSpecifierAccess().getAlternatives_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__TypenameSpecifier__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypenameSpecifier__Group_3_1__0__Impl
	rule__TypenameSpecifier__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TypenameSpecifier__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypenameSpecifierAccess().getTemplateKeyword_3_1_0()); }
(
	'template' 
)?
{ after(grammarAccess.getTypenameSpecifierAccess().getTemplateKeyword_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypenameSpecifier__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypenameSpecifier__Group_3_1__1__Impl
	rule__TypenameSpecifier__Group_3_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TypenameSpecifier__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypenameSpecifierAccess().getIDTerminalRuleCall_3_1_1()); }
	RULE_ID
{ after(grammarAccess.getTypenameSpecifierAccess().getIDTerminalRuleCall_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypenameSpecifier__Group_3_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypenameSpecifier__Group_3_1__2__Impl
	rule__TypenameSpecifier__Group_3_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TypenameSpecifier__Group_3_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypenameSpecifierAccess().getLessThanSignKeyword_3_1_2()); }

	'<' 

{ after(grammarAccess.getTypenameSpecifierAccess().getLessThanSignKeyword_3_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypenameSpecifier__Group_3_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypenameSpecifier__Group_3_1__3__Impl
	rule__TypenameSpecifier__Group_3_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TypenameSpecifier__Group_3_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypenameSpecifierAccess().getTemplateArgumentListParserRuleCall_3_1_3()); }
	ruleTemplateArgumentList
{ after(grammarAccess.getTypenameSpecifierAccess().getTemplateArgumentListParserRuleCall_3_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TypenameSpecifier__Group_3_1__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TypenameSpecifier__Group_3_1__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TypenameSpecifier__Group_3_1__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTypenameSpecifierAccess().getGreaterThanSignKeyword_3_1_4()); }

	'>' 

{ after(grammarAccess.getTypenameSpecifierAccess().getGreaterThanSignKeyword_3_1_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__TryBlock__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TryBlock__Group__0__Impl
	rule__TryBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TryBlock__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTryBlockAccess().getTryKeyword_0()); }

	'try' 

{ after(grammarAccess.getTryBlockAccess().getTryKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TryBlock__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TryBlock__Group__1__Impl
	rule__TryBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TryBlock__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTryBlockAccess().getCompoundStatementParserRuleCall_1()); }
	ruleCompoundStatement
{ after(grammarAccess.getTryBlockAccess().getCompoundStatementParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TryBlock__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TryBlock__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TryBlock__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getTryBlockAccess().getHandlerParserRuleCall_2()); }
(	ruleHandler)
{ after(grammarAccess.getTryBlockAccess().getHandlerParserRuleCall_2()); }
)
(
{ before(grammarAccess.getTryBlockAccess().getHandlerParserRuleCall_2()); }
(	ruleHandler)*
{ after(grammarAccess.getTryBlockAccess().getHandlerParserRuleCall_2()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}








rule__FunctionTryBlock__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionTryBlock__Group__0__Impl
	rule__FunctionTryBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionTryBlock__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionTryBlockAccess().getTryKeyword_0()); }

	'try' 

{ after(grammarAccess.getFunctionTryBlockAccess().getTryKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionTryBlock__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionTryBlock__Group__1__Impl
	rule__FunctionTryBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionTryBlock__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionTryBlockAccess().getCtorInitializerParserRuleCall_1()); }
(	ruleCtorInitializer)?
{ after(grammarAccess.getFunctionTryBlockAccess().getCtorInitializerParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionTryBlock__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionTryBlock__Group__2__Impl
	rule__FunctionTryBlock__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionTryBlock__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionTryBlockAccess().getCompoundStatementParserRuleCall_2()); }
	ruleCompoundStatement
{ after(grammarAccess.getFunctionTryBlockAccess().getCompoundStatementParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionTryBlock__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionTryBlock__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionTryBlock__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getFunctionTryBlockAccess().getHandlerParserRuleCall_3()); }
(	ruleHandler)
{ after(grammarAccess.getFunctionTryBlockAccess().getHandlerParserRuleCall_3()); }
)
(
{ before(grammarAccess.getFunctionTryBlockAccess().getHandlerParserRuleCall_3()); }
(	ruleHandler)*
{ after(grammarAccess.getFunctionTryBlockAccess().getHandlerParserRuleCall_3()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Handler__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Handler__Group__0__Impl
	rule__Handler__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Handler__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHandlerAccess().getCatchKeyword_0()); }

	'catch' 

{ after(grammarAccess.getHandlerAccess().getCatchKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Handler__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Handler__Group__1__Impl
	rule__Handler__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Handler__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHandlerAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getHandlerAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Handler__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Handler__Group__2__Impl
	rule__Handler__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Handler__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHandlerAccess().getExceptionDeclarationParserRuleCall_2()); }
	ruleExceptionDeclaration
{ after(grammarAccess.getHandlerAccess().getExceptionDeclarationParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Handler__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Handler__Group__3__Impl
	rule__Handler__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Handler__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHandlerAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getHandlerAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Handler__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Handler__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Handler__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHandlerAccess().getCompoundStatementParserRuleCall_4()); }
	ruleCompoundStatement
{ after(grammarAccess.getHandlerAccess().getCompoundStatementParserRuleCall_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__ExceptionDeclaration__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExceptionDeclaration__Group_0__0__Impl
	rule__ExceptionDeclaration__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExceptionDeclaration__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getExceptionDeclarationAccess().getTypeSpecifierParserRuleCall_0_0()); }
(	ruleTypeSpecifier)
{ after(grammarAccess.getExceptionDeclarationAccess().getTypeSpecifierParserRuleCall_0_0()); }
)
(
{ before(grammarAccess.getExceptionDeclarationAccess().getTypeSpecifierParserRuleCall_0_0()); }
(	ruleTypeSpecifier)*
{ after(grammarAccess.getExceptionDeclarationAccess().getTypeSpecifierParserRuleCall_0_0()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExceptionDeclaration__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExceptionDeclaration__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExceptionDeclaration__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExceptionDeclarationAccess().getDeclaratorIdParserRuleCall_0_1()); }
(	ruleDeclaratorId)?
{ after(grammarAccess.getExceptionDeclarationAccess().getDeclaratorIdParserRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__DynamicExceptionSpecification__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DynamicExceptionSpecification__Group__0__Impl
	rule__DynamicExceptionSpecification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DynamicExceptionSpecification__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDynamicExceptionSpecificationAccess().getThrowKeyword_0()); }

	'throw' 

{ after(grammarAccess.getDynamicExceptionSpecificationAccess().getThrowKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DynamicExceptionSpecification__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DynamicExceptionSpecification__Group__1__Impl
	rule__DynamicExceptionSpecification__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DynamicExceptionSpecification__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDynamicExceptionSpecificationAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getDynamicExceptionSpecificationAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DynamicExceptionSpecification__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DynamicExceptionSpecification__Group__2__Impl
	rule__DynamicExceptionSpecification__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__DynamicExceptionSpecification__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDynamicExceptionSpecificationAccess().getTypeIdListParserRuleCall_2()); }
	ruleTypeIdList
{ after(grammarAccess.getDynamicExceptionSpecificationAccess().getTypeIdListParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DynamicExceptionSpecification__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DynamicExceptionSpecification__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DynamicExceptionSpecification__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDynamicExceptionSpecificationAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getDynamicExceptionSpecificationAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__NoexceptSpecification__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NoexceptSpecification__Group__0__Impl
	rule__NoexceptSpecification__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NoexceptSpecification__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNoexceptSpecificationAccess().getNoexceptKeyword_0()); }

	'noexcept' 

{ after(grammarAccess.getNoexceptSpecificationAccess().getNoexceptKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NoexceptSpecification__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NoexceptSpecification__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NoexceptSpecification__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNoexceptSpecificationAccess().getGroup_1()); }
(rule__NoexceptSpecification__Group_1__0)?
{ after(grammarAccess.getNoexceptSpecificationAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NoexceptSpecification__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NoexceptSpecification__Group_1__0__Impl
	rule__NoexceptSpecification__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NoexceptSpecification__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNoexceptSpecificationAccess().getLeftParenthesisKeyword_1_0()); }

	'(' 

{ after(grammarAccess.getNoexceptSpecificationAccess().getLeftParenthesisKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NoexceptSpecification__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NoexceptSpecification__Group_1__1__Impl
	rule__NoexceptSpecification__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NoexceptSpecification__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNoexceptSpecificationAccess().getConstantExpressionParserRuleCall_1_1()); }
	ruleConstantExpression
{ after(grammarAccess.getNoexceptSpecificationAccess().getConstantExpressionParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NoexceptSpecification__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NoexceptSpecification__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NoexceptSpecification__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNoexceptSpecificationAccess().getRightParenthesisKeyword_1_2()); }

	')' 

{ after(grammarAccess.getNoexceptSpecificationAccess().getRightParenthesisKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ExpressionList__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionList__Group__0__Impl
	rule__ExpressionList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getExpressionParserRuleCall_0()); }
	ruleExpression
{ after(grammarAccess.getExpressionListAccess().getExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionList__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getGroup_1()); }
(rule__ExpressionList__Group_1__0)*
{ after(grammarAccess.getExpressionListAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ExpressionList__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionList__Group_1__0__Impl
	rule__ExpressionList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getCommaKeyword_1_0()); }

	',' 

{ after(grammarAccess.getExpressionListAccess().getCommaKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionList__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionList__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionListAccess().getExpressionParserRuleCall_1_1()); }
	ruleExpression
{ after(grammarAccess.getExpressionListAccess().getExpressionParserRuleCall_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}







rule__Test__ElementsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestAccess().getElementsDeclarationParserRuleCall_0()); }
	ruleDeclaration{ after(grammarAccess.getTestAccess().getElementsDeclarationParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


fragment RULE_HEX_QUAD : RULE_HEXADECIMAL_DIGIT RULE_HEXADECIMAL_DIGIT RULE_HEXADECIMAL_DIGIT RULE_HEXADECIMAL_DIGIT;

fragment RULE_UNIVERSAL_CHARACTER_NAME : ('\\u' RULE_HEX_QUAD|'\\U' RULE_HEX_QUAD RULE_HEX_QUAD);

RULE_KEYWORD : ('alignas'|'alignof'|'asm'|'auto'|'bool'|'break'|'case'|'catch'|'char'|'char16_t'|'char32_t'|'class'|'const'|'constexpr'|'const_cast'|'continue'|'decltype'|'default'|'delete'|'do'|'double'|'dynamic_cast'|'else'|'enum'|'explicit'|'export'|'extern'|'false'|'float'|'for'|'friend'|'goto'|'if'|'inline'|'int'|'long'|'mutable'|'namespace'|'new'|'noexcept'|'nullptr'|'operator'|'private'|'protected'|'public'|'register'|'reinterpret_cast'|'return'|'short'|'signed'|'sizeof'|'static'|'static_assert'|'static_cast'|'struct'|'switch'|'template'|'this'|'thread_local'|'throw'|'true'|'try'|'typedef'|'typeid'|'typename'|'union'|'unsigned'|'using'|'virtual'|'void'|'volatile'|'wchar_t'|'while');

RULE_PREPROCESSING_OP_OR_PUNC : ('{'|'}'|'['|']'|'#'|'##'|'('|')'|'<:'|':>'|'<%'|'%>'|'%:'|'%:%:'|';'|':'|'...'|'new'|'delete'|'?'|'::'|'.'|'.*'|'+'|'-'|'*'|'/'|'%'|'^'|'&'|'|'|'~'|'!'|'='|'<'|'>'|'+='|'-='|'*='|'/='|'%='|'^='|'&='|'|='|'<<'|'>>'|'<<='|'>>='|'=='|'!='|'<='|'>='|'&&'|'||'|'++'|'--'|','|'->*'|'->'|'and'|'and_eq'|'bitand'|'bitor'|'compl'|'not'|'not_eq'|'or'|'or_eq'|'xor'|'xor_eq');

RULE_ID : (RULE_NONDIGIT|RULE_UNIVERSAL_CHARACTER_NAME) (RULE_DIGIT|RULE_NONDIGIT|RULE_UNIVERSAL_CHARACTER_NAME)*;

fragment RULE_NONDIGIT : ('a'..'z'|'A'..'Z'|'_');

fragment RULE_DIGIT : '0'..'9';

RULE_INT : (RULE_DECIMAL_LITERAL|RULE_OCTAL_LITERAL|RULE_HEXADECIMAL_LITERAL) RULE_INTEGER_SUFFIX?;

fragment RULE_DECIMAL_LITERAL : '1'..'9' RULE_DIGIT*;

fragment RULE_OCTAL_LITERAL : '0' RULE_OCTAL_DIGIT*;

fragment RULE_HEXADECIMAL_LITERAL : ('0x'|'0X') RULE_HEXADECIMAL_DIGIT+;

fragment RULE_OCTAL_DIGIT : '0'..'7';

fragment RULE_HEXADECIMAL_DIGIT : ('0'..'9'|'A'..'F');

fragment RULE_INTEGER_SUFFIX : (('u'|'U') ('l'|'L'|'ll'|'LL')?|('l'|'L'|'ll'|'LL') ('u'|'U')?);

RULE_CHARACTER_LITERAL : ('u'|'U'|'L')? '\'' RULE_C_CHAR+ '\'';

fragment RULE_C_CHAR : (~(('\''|'\\'|'\n'))|RULE_ESCAPE_SEQUENCE|RULE_UNIVERSAL_CHARACTER_NAME);

fragment RULE_ESCAPE_SEQUENCE : (RULE_SIMPLE_ESCAPE_SEQUENCE|RULE_OCTAL_ESCAPE_SEQUENCE|RULE_HEXADECIMAL_ESCAPE_SEQUENCE);

fragment RULE_SIMPLE_ESCAPE_SEQUENCE : '\\' ('\''|'"'|'?'|'\\'|'a'|'b'|'f'|'n'|'r'|'t'|'v');

fragment RULE_OCTAL_ESCAPE_SEQUENCE : '\\' RULE_OCTAL_DIGIT RULE_OCTAL_DIGIT RULE_OCTAL_DIGIT;

fragment RULE_HEXADECIMAL_ESCAPE_SEQUENCE : '\\x' RULE_HEXADECIMAL_DIGIT+;

RULE_FLOATING_LITERAL : (RULE_FRACTIONAL_CONSTANT RULE_EXPONENT_PART?|RULE_DIGIT+ RULE_EXPONENT_PART) ('f'|'l'|'F'|'L')?;

fragment RULE_FRACTIONAL_CONSTANT : (RULE_DIGIT* '.' RULE_DIGIT+|RULE_DIGIT+ '.');

fragment RULE_EXPONENT_PART : ('e'|'E') ('+'|'-')? RULE_DIGIT+;

RULE_STRING_LITERAL : RULE_ENC_PREFIX? '"' RULE_SCHAR+ '"';

fragment RULE_ENC_PREFIX : ('u8'|'u'|'U'|'L');

fragment RULE_SCHAR : (~(('"'|'\\'|'\n'))|RULE_ESCAPE_SEQUENCE|RULE_UNIVERSAL_CHARACTER_NAME);

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


