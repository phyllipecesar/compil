/*
* generated by Xtext
*/
package org.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.services.Cpp2GrammarAccess;

public class Cpp2Parser extends AbstractContentAssistParser {
	
	@Inject
	private Cpp2GrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.ui.contentassist.antlr.internal.InternalCpp2Parser createParser() {
		org.ui.contentassist.antlr.internal.InternalCpp2Parser result = new org.ui.contentassist.antlr.internal.InternalCpp2Parser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTokenAccess().getAlternatives(), "rule__Token__Alternatives");
					put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
					put(grammarAccess.getLiteralAccess().getAlternatives_4_0(), "rule__Literal__Alternatives_4_0");
					put(grammarAccess.getDeclarationStatementAccess().getAlternatives(), "rule__DeclarationStatement__Alternatives");
					put(grammarAccess.getDeclarationAccess().getAlternatives(), "rule__Declaration__Alternatives");
					put(grammarAccess.getBlockDeclarationAccess().getAlternatives(), "rule__BlockDeclaration__Alternatives");
					put(grammarAccess.getSimpleOrFunctionDeclarationAccess().getAlternatives_1(), "rule__SimpleOrFunctionDeclaration__Alternatives_1");
					put(grammarAccess.getFunctionDeclarationSuffixAccess().getAlternatives_1(), "rule__FunctionDeclarationSuffix__Alternatives_1");
					put(grammarAccess.getDeclarationSpecifierAccess().getAlternatives(), "rule__DeclarationSpecifier__Alternatives");
					put(grammarAccess.getStorageClassSpecifierAccess().getAlternatives(), "rule__StorageClassSpecifier__Alternatives");
					put(grammarAccess.getFunctionSpecifierAccess().getAlternatives(), "rule__FunctionSpecifier__Alternatives");
					put(grammarAccess.getTypeSpecifierAccess().getAlternatives(), "rule__TypeSpecifier__Alternatives");
					put(grammarAccess.getTrailingTypeSpecifierAccess().getAlternatives(), "rule__TrailingTypeSpecifier__Alternatives");
					put(grammarAccess.getSimpleTypeSpecifierAccess().getAlternatives(), "rule__SimpleTypeSpecifier__Alternatives");
					put(grammarAccess.getSimpleTypeSpecifierAccess().getAlternatives_0_1(), "rule__SimpleTypeSpecifier__Alternatives_0_1");
					put(grammarAccess.getSimpleTypeSpecifierAccess().getAlternatives_0_1_1_1(), "rule__SimpleTypeSpecifier__Alternatives_0_1_1_1");
					put(grammarAccess.getTypeNameAccess().getAlternatives(), "rule__TypeName__Alternatives");
					put(grammarAccess.getEnumHeadAccess().getAlternatives_1(), "rule__EnumHead__Alternatives_1");
					put(grammarAccess.getEnumKeyAccess().getAlternatives(), "rule__EnumKey__Alternatives");
					put(grammarAccess.getUsingDeclarationAccess().getAlternatives_1(), "rule__UsingDeclaration__Alternatives_1");
					put(grammarAccess.getLinkageSpecificationAccess().getAlternatives_2(), "rule__LinkageSpecification__Alternatives_2");
					put(grammarAccess.getParametersAndQualifiersAccess().getAlternatives_3(), "rule__ParametersAndQualifiers__Alternatives_3");
					put(grammarAccess.getParametersAndQualifiersAccess().getAlternatives_4(), "rule__ParametersAndQualifiers__Alternatives_4");
					put(grammarAccess.getParameterDeclarationClauseAccess().getAlternatives(), "rule__ParameterDeclarationClause__Alternatives");
					put(grammarAccess.getFunctionBodyAccess().getAlternatives(), "rule__FunctionBody__Alternatives");
					put(grammarAccess.getInitializerAccess().getAlternatives(), "rule__Initializer__Alternatives");
					put(grammarAccess.getBraceOrEqualInitializerAccess().getAlternatives(), "rule__BraceOrEqualInitializer__Alternatives");
					put(grammarAccess.getInitializerClauseAccess().getAlternatives(), "rule__InitializerClause__Alternatives");
					put(grammarAccess.getClassVirtualSpecifierAccess().getAlternatives(), "rule__ClassVirtualSpecifier__Alternatives");
					put(grammarAccess.getClassKeyAccess().getAlternatives(), "rule__ClassKey__Alternatives");
					put(grammarAccess.getMemberSpecificationAccess().getAlternatives_0(), "rule__MemberSpecification__Alternatives_0");
					put(grammarAccess.getMemberDeclarationAccess().getAlternatives(), "rule__MemberDeclaration__Alternatives");
					put(grammarAccess.getMemberOrFunctionDeclarationAccess().getAlternatives_1(), "rule__MemberOrFunctionDeclaration__Alternatives_1");
					put(grammarAccess.getMemberDeclaratorAccess().getAlternatives_2(), "rule__MemberDeclarator__Alternatives_2");
					put(grammarAccess.getVirtualSpecifierAccess().getAlternatives(), "rule__VirtualSpecifier__Alternatives");
					put(grammarAccess.getBaseSpecifierAccess().getAlternatives_0(), "rule__BaseSpecifier__Alternatives_0");
					put(grammarAccess.getClassOrDeclarationTypeAccess().getAlternatives(), "rule__ClassOrDeclarationType__Alternatives");
					put(grammarAccess.getAccessSpecifierAccess().getAlternatives(), "rule__AccessSpecifier__Alternatives");
					put(grammarAccess.getOperatorFunctionIdAccess().getAlternatives_2_1(), "rule__OperatorFunctionId__Alternatives_2_1");
					put(grammarAccess.getOverloadableOperatorAccess().getAlternatives(), "rule__OverloadableOperator__Alternatives");
					put(grammarAccess.getTemplateParameterAccess().getAlternatives(), "rule__TemplateParameter__Alternatives");
					put(grammarAccess.getTypeParameterAccess().getAlternatives_0(), "rule__TypeParameter__Alternatives_0");
					put(grammarAccess.getTypeParameterAccess().getAlternatives_1(), "rule__TypeParameter__Alternatives_1");
					put(grammarAccess.getTemplateIdAccess().getAlternatives(), "rule__TemplateId__Alternatives");
					put(grammarAccess.getTemplateIdAccess().getAlternatives_1_0(), "rule__TemplateId__Alternatives_1_0");
					put(grammarAccess.getTemplateArgumentAccess().getAlternatives(), "rule__TemplateArgument__Alternatives");
					put(grammarAccess.getTypenameSpecifierAccess().getAlternatives_3(), "rule__TypenameSpecifier__Alternatives_3");
					put(grammarAccess.getExceptionDeclarationAccess().getAlternatives(), "rule__ExceptionDeclaration__Alternatives");
					put(grammarAccess.getExceptionSpecificationAccess().getAlternatives(), "rule__ExceptionSpecification__Alternatives");
					put(grammarAccess.getTokenAccess().getGroup_2(), "rule__Token__Group_2__0");
					put(grammarAccess.getLiteralAccess().getGroup_4(), "rule__Literal__Group_4__0");
					put(grammarAccess.getAliasDeclarationAccess().getGroup(), "rule__AliasDeclaration__Group__0");
					put(grammarAccess.getSimpleDeclarationAccess().getGroup(), "rule__SimpleDeclaration__Group__0");
					put(grammarAccess.getSimpleOrFunctionDeclarationAccess().getGroup(), "rule__SimpleOrFunctionDeclaration__Group__0");
					put(grammarAccess.getSimpleDeclarationSuffixAccess().getGroup(), "rule__SimpleDeclarationSuffix__Group__0");
					put(grammarAccess.getFunctionDeclarationSuffixAccess().getGroup(), "rule__FunctionDeclarationSuffix__Group__0");
					put(grammarAccess.getFunctionDeclarationSuffixAccess().getGroup_1_1(), "rule__FunctionDeclarationSuffix__Group_1_1__0");
					put(grammarAccess.getFunctionDeclarationSuffixAccess().getGroup_1_2(), "rule__FunctionDeclarationSuffix__Group_1_2__0");
					put(grammarAccess.getStaticAssertDeclarationAccess().getGroup(), "rule__StaticAssertDeclaration__Group__0");
					put(grammarAccess.getSimpleTypeSpecifierAccess().getGroup_0(), "rule__SimpleTypeSpecifier__Group_0__0");
					put(grammarAccess.getSimpleTypeSpecifierAccess().getGroup_0_1_1(), "rule__SimpleTypeSpecifier__Group_0_1_1__0");
					put(grammarAccess.getSimpleTypeSpecifierAccess().getGroup_0_1_1_1_1(), "rule__SimpleTypeSpecifier__Group_0_1_1_1_1__0");
					put(grammarAccess.getDeclarationTypeSpecifierAccess().getGroup(), "rule__DeclarationTypeSpecifier__Group__0");
					put(grammarAccess.getEnumSpecifierAccess().getGroup(), "rule__EnumSpecifier__Group__0");
					put(grammarAccess.getEnumSpecifierAccess().getGroup_2(), "rule__EnumSpecifier__Group_2__0");
					put(grammarAccess.getEnumHeadAccess().getGroup(), "rule__EnumHead__Group__0");
					put(grammarAccess.getEnumHeadAccess().getGroup_1_1(), "rule__EnumHead__Group_1_1__0");
					put(grammarAccess.getEnumKeyAccess().getGroup_1(), "rule__EnumKey__Group_1__0");
					put(grammarAccess.getEnumKeyAccess().getGroup_2(), "rule__EnumKey__Group_2__0");
					put(grammarAccess.getEnumBaseAccess().getGroup(), "rule__EnumBase__Group__0");
					put(grammarAccess.getEnumeratorListAccess().getGroup(), "rule__EnumeratorList__Group__0");
					put(grammarAccess.getEnumeratorListAccess().getGroup_1(), "rule__EnumeratorList__Group_1__0");
					put(grammarAccess.getEnumerationDefinitionAccess().getGroup(), "rule__EnumerationDefinition__Group__0");
					put(grammarAccess.getEnumerationDefinitionAccess().getGroup_1(), "rule__EnumerationDefinition__Group_1__0");
					put(grammarAccess.getNamespaceDefinitionAccess().getGroup(), "rule__NamespaceDefinition__Group__0");
					put(grammarAccess.getNamespaceAliasDefinitionAccess().getGroup(), "rule__NamespaceAliasDefinition__Group__0");
					put(grammarAccess.getQualifiedNamespaceSpecifierAccess().getGroup(), "rule__QualifiedNamespaceSpecifier__Group__0");
					put(grammarAccess.getUsingDeclarationAccess().getGroup(), "rule__UsingDeclaration__Group__0");
					put(grammarAccess.getUsingDeclarationAccess().getGroup_1_1(), "rule__UsingDeclaration__Group_1_1__0");
					put(grammarAccess.getUsingDirectiveAccess().getGroup(), "rule__UsingDirective__Group__0");
					put(grammarAccess.getAsmDefinitionAccess().getGroup(), "rule__AsmDefinition__Group__0");
					put(grammarAccess.getLinkageSpecificationAccess().getGroup(), "rule__LinkageSpecification__Group__0");
					put(grammarAccess.getLinkageSpecificationAccess().getGroup_2_1(), "rule__LinkageSpecification__Group_2_1__0");
					put(grammarAccess.getInitDeclaratorListAccess().getGroup(), "rule__InitDeclaratorList__Group__0");
					put(grammarAccess.getInitDeclaratorListAccess().getGroup_1(), "rule__InitDeclaratorList__Group_1__0");
					put(grammarAccess.getInitDeclaratorAccess().getGroup(), "rule__InitDeclarator__Group__0");
					put(grammarAccess.getFunctionDeclaratorAccess().getGroup(), "rule__FunctionDeclarator__Group__0");
					put(grammarAccess.getParametersAndQualifiersAccess().getGroup(), "rule__ParametersAndQualifiers__Group__0");
					put(grammarAccess.getDeclaratorIdAccess().getGroup(), "rule__DeclaratorId__Group__0");
					put(grammarAccess.getParameterDeclarationClauseAccess().getGroup_1(), "rule__ParameterDeclarationClause__Group_1__0");
					put(grammarAccess.getParameterDeclarationClauseAccess().getGroup_1_1(), "rule__ParameterDeclarationClause__Group_1_1__0");
					put(grammarAccess.getParameterDeclarationListAccess().getGroup(), "rule__ParameterDeclarationList__Group__0");
					put(grammarAccess.getParameterDeclarationListAccess().getGroup_1(), "rule__ParameterDeclarationList__Group_1__0");
					put(grammarAccess.getParameterDeclarationAccess().getGroup(), "rule__ParameterDeclaration__Group__0");
					put(grammarAccess.getFunctionBodyAccess().getGroup_0(), "rule__FunctionBody__Group_0__0");
					put(grammarAccess.getInitializerAccess().getGroup_1(), "rule__Initializer__Group_1__0");
					put(grammarAccess.getBraceOrEqualInitializerAccess().getGroup_0(), "rule__BraceOrEqualInitializer__Group_0__0");
					put(grammarAccess.getInitializerListAccess().getGroup(), "rule__InitializerList__Group__0");
					put(grammarAccess.getInitializerListAccess().getGroup_2(), "rule__InitializerList__Group_2__0");
					put(grammarAccess.getBracedInitializerListAccess().getGroup(), "rule__BracedInitializerList__Group__0");
					put(grammarAccess.getBracedInitializerListAccess().getGroup_1(), "rule__BracedInitializerList__Group_1__0");
					put(grammarAccess.getClassSpecifierAccess().getGroup(), "rule__ClassSpecifier__Group__0");
					put(grammarAccess.getClassHeadAccess().getGroup(), "rule__ClassHead__Group__0");
					put(grammarAccess.getClassHeadAccess().getGroup_1(), "rule__ClassHead__Group_1__0");
					put(grammarAccess.getMemberSpecificationAccess().getGroup(), "rule__MemberSpecification__Group__0");
					put(grammarAccess.getMemberSpecificationAccess().getGroup_0_1(), "rule__MemberSpecification__Group_0_1__0");
					put(grammarAccess.getMemberOrFunctionDeclarationAccess().getGroup(), "rule__MemberOrFunctionDeclaration__Group__0");
					put(grammarAccess.getMemberOrFunctionDeclarationAccess().getGroup_1_1(), "rule__MemberOrFunctionDeclaration__Group_1_1__0");
					put(grammarAccess.getMemberDeclaratorListAccess().getGroup(), "rule__MemberDeclaratorList__Group__0");
					put(grammarAccess.getMemberDeclaratorListAccess().getGroup_1(), "rule__MemberDeclaratorList__Group_1__0");
					put(grammarAccess.getMemberDeclaratorAccess().getGroup(), "rule__MemberDeclarator__Group__0");
					put(grammarAccess.getPureSpecifierAccess().getGroup(), "rule__PureSpecifier__Group__0");
					put(grammarAccess.getBaseClauseAccess().getGroup(), "rule__BaseClause__Group__0");
					put(grammarAccess.getBaseSpecifierListAccess().getGroup(), "rule__BaseSpecifierList__Group__0");
					put(grammarAccess.getBaseSpecifierListAccess().getGroup_2(), "rule__BaseSpecifierList__Group_2__0");
					put(grammarAccess.getBaseSpecifierAccess().getGroup(), "rule__BaseSpecifier__Group__0");
					put(grammarAccess.getBaseSpecifierAccess().getGroup_0_0(), "rule__BaseSpecifier__Group_0_0__0");
					put(grammarAccess.getBaseSpecifierAccess().getGroup_0_1(), "rule__BaseSpecifier__Group_0_1__0");
					put(grammarAccess.getClassOrDeclarationTypeAccess().getGroup_0(), "rule__ClassOrDeclarationType__Group_0__0");
					put(grammarAccess.getOperatorFunctionIdAccess().getGroup(), "rule__OperatorFunctionId__Group__0");
					put(grammarAccess.getOperatorFunctionIdAccess().getGroup_2(), "rule__OperatorFunctionId__Group_2__0");
					put(grammarAccess.getOverloadableOperatorAccess().getGroup_2(), "rule__OverloadableOperator__Group_2__0");
					put(grammarAccess.getOverloadableOperatorAccess().getGroup_3(), "rule__OverloadableOperator__Group_3__0");
					put(grammarAccess.getLiteralOperatorIdAccess().getGroup(), "rule__LiteralOperatorId__Group__0");
					put(grammarAccess.getTemplateDeclarationAccess().getGroup(), "rule__TemplateDeclaration__Group__0");
					put(grammarAccess.getTemplateParameterListAccess().getGroup(), "rule__TemplateParameterList__Group__0");
					put(grammarAccess.getTemplateParameterListAccess().getGroup_1(), "rule__TemplateParameterList__Group_1__0");
					put(grammarAccess.getTypeParameterAccess().getGroup(), "rule__TypeParameter__Group__0");
					put(grammarAccess.getTypeParameterAccess().getGroup_1_0(), "rule__TypeParameter__Group_1_0__0");
					put(grammarAccess.getTypeParameterAccess().getGroup_1_1(), "rule__TypeParameter__Group_1_1__0");
					put(grammarAccess.getSimpleTemplateIdAccess().getGroup(), "rule__SimpleTemplateId__Group__0");
					put(grammarAccess.getTemplateIdAccess().getGroup_1(), "rule__TemplateId__Group_1__0");
					put(grammarAccess.getTemplateArgumentListAccess().getGroup(), "rule__TemplateArgumentList__Group__0");
					put(grammarAccess.getTemplateArgumentListAccess().getGroup_2(), "rule__TemplateArgumentList__Group_2__0");
					put(grammarAccess.getTypenameSpecifierAccess().getGroup(), "rule__TypenameSpecifier__Group__0");
					put(grammarAccess.getTypenameSpecifierAccess().getGroup_3_1(), "rule__TypenameSpecifier__Group_3_1__0");
					put(grammarAccess.getTryBlockAccess().getGroup(), "rule__TryBlock__Group__0");
					put(grammarAccess.getFunctionTryBlockAccess().getGroup(), "rule__FunctionTryBlock__Group__0");
					put(grammarAccess.getHandlerAccess().getGroup(), "rule__Handler__Group__0");
					put(grammarAccess.getExceptionDeclarationAccess().getGroup_0(), "rule__ExceptionDeclaration__Group_0__0");
					put(grammarAccess.getThrowExpressionAccess().getGroup(), "rule__ThrowExpression__Group__0");
					put(grammarAccess.getDynamicExceptionSpecificationAccess().getGroup(), "rule__DynamicExceptionSpecification__Group__0");
					put(grammarAccess.getNoexceptSpecificationAccess().getGroup(), "rule__NoexceptSpecification__Group__0");
					put(grammarAccess.getNoexceptSpecificationAccess().getGroup_1(), "rule__NoexceptSpecification__Group_1__0");
					put(grammarAccess.getExpressionListAccess().getGroup(), "rule__ExpressionList__Group__0");
					put(grammarAccess.getExpressionListAccess().getGroup_1(), "rule__ExpressionList__Group_1__0");
					put(grammarAccess.getTestAccess().getElementsAssignment(), "rule__Test__ElementsAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.ui.contentassist.antlr.internal.InternalCpp2Parser typedParser = (org.ui.contentassist.antlr.internal.InternalCpp2Parser) parser;
			typedParser.entryRuleTest();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public Cpp2GrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(Cpp2GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
