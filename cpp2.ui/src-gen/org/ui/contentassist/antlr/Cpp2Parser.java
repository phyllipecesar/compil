/*
* generated by Xtext
*/
package org.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.services.Cpp2GrammarAccess;

public class Cpp2Parser extends AbstractContentAssistParser {
	
	@Inject
	private Cpp2GrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.ui.contentassist.antlr.internal.InternalCpp2Parser createParser() {
		org.ui.contentassist.antlr.internal.InternalCpp2Parser result = new org.ui.contentassist.antlr.internal.InternalCpp2Parser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getPreProcessingTokenAccess().getAlternatives(), "rule__PreProcessingToken__Alternatives");
					put(grammarAccess.getTokenAccess().getAlternatives(), "rule__Token__Alternatives");
					put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
					put(grammarAccess.getLiteralAccess().getAlternatives_4_0(), "rule__Literal__Alternatives_4_0");
					put(grammarAccess.getUsingDeclarationAccess().getAlternatives(), "rule__UsingDeclaration__Alternatives");
					put(grammarAccess.getLinkageSpecificationAccess().getAlternatives_2(), "rule__LinkageSpecification__Alternatives_2");
					put(grammarAccess.getAttributeSpecifierAccess().getAlternatives(), "rule__AttributeSpecifier__Alternatives");
					put(grammarAccess.getAlignmentSpecifierAccess().getAlternatives(), "rule__AlignmentSpecifier__Alternatives");
					put(grammarAccess.getDeclaratorAccess().getAlternatives(), "rule__Declarator__Alternatives");
					put(grammarAccess.get_NoptrDeclaratorAccess().getAlternatives(), "rule___NoptrDeclarator__Alternatives");
					put(grammarAccess.get__NoptrDeclaratorAccess().getAlternatives(), "rule____NoptrDeclarator__Alternatives");
					put(grammarAccess.getParametersAndQualifiersAccess().getAlternatives_4(), "rule__ParametersAndQualifiers__Alternatives_4");
					put(grammarAccess.getParametersAndQualifiersAccess().getAlternatives_5(), "rule__ParametersAndQualifiers__Alternatives_5");
					put(grammarAccess.getPtrOperatorAccess().getAlternatives(), "rule__PtrOperator__Alternatives");
					put(grammarAccess.getPtrOperatorAccess().getAlternatives_0_2(), "rule__PtrOperator__Alternatives_0_2");
					put(grammarAccess.getPtrOperatorAccess().getAlternatives_3_4(), "rule__PtrOperator__Alternatives_3_4");
					put(grammarAccess.getDeclaratorIdAccess().getAlternatives(), "rule__DeclaratorId__Alternatives");
					put(grammarAccess.getOverloadableOperatorAccess().getAlternatives(), "rule__OverloadableOperator__Alternatives");
					put(grammarAccess.getTemplateParameterAccess().getAlternatives(), "rule__TemplateParameter__Alternatives");
					put(grammarAccess.getTypeParameterAccess().getAlternatives(), "rule__TypeParameter__Alternatives");
					put(grammarAccess.getTypeParameterAccess().getAlternatives_0_1(), "rule__TypeParameter__Alternatives_0_1");
					put(grammarAccess.getTypeParameterAccess().getAlternatives_1_1(), "rule__TypeParameter__Alternatives_1_1");
					put(grammarAccess.getTypeParameterAccess().getAlternatives_2_5(), "rule__TypeParameter__Alternatives_2_5");
					put(grammarAccess.getTemplateIdAccess().getAlternatives(), "rule__TemplateId__Alternatives");
					put(grammarAccess.getTemplateArgumentAccess().getAlternatives(), "rule__TemplateArgument__Alternatives");
					put(grammarAccess.getTypenameSpecifierAccess().getAlternatives_3(), "rule__TypenameSpecifier__Alternatives_3");
					put(grammarAccess.getExceptionDeclarationAccess().getAlternatives(), "rule__ExceptionDeclaration__Alternatives");
					put(grammarAccess.getExceptionDeclarationAccess().getAlternatives_0_2(), "rule__ExceptionDeclaration__Alternatives_0_2");
					put(grammarAccess.getExceptionSpecificationAccess().getAlternatives(), "rule__ExceptionSpecification__Alternatives");
					put(grammarAccess.getTokenAccess().getGroup_2(), "rule__Token__Group_2__0");
					put(grammarAccess.getLiteralAccess().getGroup_4(), "rule__Literal__Group_4__0");
					put(grammarAccess.getNamespaceDefinitionAccess().getGroup(), "rule__NamespaceDefinition__Group__0");
					put(grammarAccess.getNamespaceAliasDefinitionAccess().getGroup(), "rule__NamespaceAliasDefinition__Group__0");
					put(grammarAccess.getQualifiedNamespaceSpecifierAccess().getGroup(), "rule__QualifiedNamespaceSpecifier__Group__0");
					put(grammarAccess.getUsingDeclarationAccess().getGroup_0(), "rule__UsingDeclaration__Group_0__0");
					put(grammarAccess.getUsingDeclarationAccess().getGroup_1(), "rule__UsingDeclaration__Group_1__0");
					put(grammarAccess.getUsingDirectiveAccess().getGroup(), "rule__UsingDirective__Group__0");
					put(grammarAccess.getAsmDefinitionAccess().getGroup(), "rule__AsmDefinition__Group__0");
					put(grammarAccess.getLinkageSpecificationAccess().getGroup(), "rule__LinkageSpecification__Group__0");
					put(grammarAccess.getLinkageSpecificationAccess().getGroup_2_1(), "rule__LinkageSpecification__Group_2_1__0");
					put(grammarAccess.getAttributeSpecifierAccess().getGroup_0(), "rule__AttributeSpecifier__Group_0__0");
					put(grammarAccess.getAlignmentSpecifierAccess().getGroup_0(), "rule__AlignmentSpecifier__Group_0__0");
					put(grammarAccess.getAlignmentSpecifierAccess().getGroup_1(), "rule__AlignmentSpecifier__Group_1__0");
					put(grammarAccess.getAttributeListAccess().getGroup(), "rule__AttributeList__Group__0");
					put(grammarAccess.getAttributeListAccess().getGroup_0(), "rule__AttributeList__Group_0__0");
					put(grammarAccess.getAttributeListAccess().getGroup_1(), "rule__AttributeList__Group_1__0");
					put(grammarAccess.getAttributeListAccess().getGroup_1_1(), "rule__AttributeList__Group_1_1__0");
					put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
					put(grammarAccess.getAttributeTokenAccess().getGroup(), "rule__AttributeToken__Group__0");
					put(grammarAccess.getAttributeTokenAccess().getGroup_0(), "rule__AttributeToken__Group_0__0");
					put(grammarAccess.getAttributeArgumentClauseAccess().getGroup(), "rule__AttributeArgumentClause__Group__0");
					put(grammarAccess.getInitDeclaratorListAccess().getGroup(), "rule__InitDeclaratorList__Group__0");
					put(grammarAccess.getInitDeclaratorListAccess().getGroup_1(), "rule__InitDeclaratorList__Group_1__0");
					put(grammarAccess.getInitDeclaratorAccess().getGroup(), "rule__InitDeclarator__Group__0");
					put(grammarAccess.getDeclaratorAccess().getGroup_0(), "rule__Declarator__Group_0__0");
					put(grammarAccess.getDeclaratorAccess().getGroup_1(), "rule__Declarator__Group_1__0");
					put(grammarAccess.getDeclaratorAccess().getGroup_1_1(), "rule__Declarator__Group_1_1__0");
					put(grammarAccess.getPtrDeclaratorAccess().getGroup(), "rule__PtrDeclarator__Group__0");
					put(grammarAccess.getNoptrDeclaratorAccess().getGroup(), "rule__NoptrDeclarator__Group__0");
					put(grammarAccess.get_NoptrDeclaratorAccess().getGroup_0(), "rule___NoptrDeclarator__Group_0__0");
					put(grammarAccess.get_NoptrDeclaratorAccess().getGroup_1(), "rule___NoptrDeclarator__Group_1__0");
					put(grammarAccess.get__NoptrDeclaratorAccess().getGroup_1(), "rule____NoptrDeclarator__Group_1__0");
					put(grammarAccess.getParametersAndQualifiersAccess().getGroup(), "rule__ParametersAndQualifiers__Group__0");
					put(grammarAccess.getTrailingReturnTypeAccess().getGroup(), "rule__TrailingReturnType__Group__0");
					put(grammarAccess.getPtrOperatorAccess().getGroup_0(), "rule__PtrOperator__Group_0__0");
					put(grammarAccess.getPtrOperatorAccess().getGroup_1(), "rule__PtrOperator__Group_1__0");
					put(grammarAccess.getPtrOperatorAccess().getGroup_2(), "rule__PtrOperator__Group_2__0");
					put(grammarAccess.getPtrOperatorAccess().getGroup_3(), "rule__PtrOperator__Group_3__0");
					put(grammarAccess.getDeclaratorIdAccess().getGroup_0(), "rule__DeclaratorId__Group_0__0");
					put(grammarAccess.getDeclaratorIdAccess().getGroup_1(), "rule__DeclaratorId__Group_1__0");
					put(grammarAccess.getOperatorFunctionIdAccess().getGroup(), "rule__OperatorFunctionId__Group__0");
					put(grammarAccess.getOperatorFunctionIdAccess().getGroup_2(), "rule__OperatorFunctionId__Group_2__0");
					put(grammarAccess.getOverloadableOperatorAccess().getGroup_2(), "rule__OverloadableOperator__Group_2__0");
					put(grammarAccess.getOverloadableOperatorAccess().getGroup_3(), "rule__OverloadableOperator__Group_3__0");
					put(grammarAccess.getLiteralOperatorIdAccess().getGroup(), "rule__LiteralOperatorId__Group__0");
					put(grammarAccess.getTemplateDeclarationAccess().getGroup(), "rule__TemplateDeclaration__Group__0");
					put(grammarAccess.getTemplateParameterListAccess().getGroup(), "rule__TemplateParameterList__Group__0");
					put(grammarAccess.getTemplateParameterListAccess().getGroup_1(), "rule__TemplateParameterList__Group_1__0");
					put(grammarAccess.getTypeParameterAccess().getGroup_0(), "rule__TypeParameter__Group_0__0");
					put(grammarAccess.getTypeParameterAccess().getGroup_0_1_0(), "rule__TypeParameter__Group_0_1_0__0");
					put(grammarAccess.getTypeParameterAccess().getGroup_0_1_1(), "rule__TypeParameter__Group_0_1_1__0");
					put(grammarAccess.getTypeParameterAccess().getGroup_1(), "rule__TypeParameter__Group_1__0");
					put(grammarAccess.getTypeParameterAccess().getGroup_1_1_0(), "rule__TypeParameter__Group_1_1_0__0");
					put(grammarAccess.getTypeParameterAccess().getGroup_1_1_1(), "rule__TypeParameter__Group_1_1_1__0");
					put(grammarAccess.getTypeParameterAccess().getGroup_2(), "rule__TypeParameter__Group_2__0");
					put(grammarAccess.getTypeParameterAccess().getGroup_2_5_0(), "rule__TypeParameter__Group_2_5_0__0");
					put(grammarAccess.getTypeParameterAccess().getGroup_2_5_1(), "rule__TypeParameter__Group_2_5_1__0");
					put(grammarAccess.getSimpleTemplateIdAccess().getGroup(), "rule__SimpleTemplateId__Group__0");
					put(grammarAccess.getTemplateIdAccess().getGroup_1(), "rule__TemplateId__Group_1__0");
					put(grammarAccess.getTemplateIdAccess().getGroup_2(), "rule__TemplateId__Group_2__0");
					put(grammarAccess.getTemplateArgumentListAccess().getGroup(), "rule__TemplateArgumentList__Group__0");
					put(grammarAccess.getTemplateArgumentListAccess().getGroup_2(), "rule__TemplateArgumentList__Group_2__0");
					put(grammarAccess.getTypenameSpecifierAccess().getGroup(), "rule__TypenameSpecifier__Group__0");
					put(grammarAccess.getTypenameSpecifierAccess().getGroup_3_1(), "rule__TypenameSpecifier__Group_3_1__0");
					put(grammarAccess.getExplicitInstantiationAccess().getGroup(), "rule__ExplicitInstantiation__Group__0");
					put(grammarAccess.getExplicitSpecializationAccess().getGroup(), "rule__ExplicitSpecialization__Group__0");
					put(grammarAccess.getTryBlockAccess().getGroup(), "rule__TryBlock__Group__0");
					put(grammarAccess.getFunctionTryBlockAccess().getGroup(), "rule__FunctionTryBlock__Group__0");
					put(grammarAccess.getHandlerAccess().getGroup(), "rule__Handler__Group__0");
					put(grammarAccess.getExceptionDeclarationAccess().getGroup_0(), "rule__ExceptionDeclaration__Group_0__0");
					put(grammarAccess.getThrowExpressionAccess().getGroup(), "rule__ThrowExpression__Group__0");
					put(grammarAccess.getDynamicExceptionSpecificationAccess().getGroup(), "rule__DynamicExceptionSpecification__Group__0");
					put(grammarAccess.getNoexceptSpecificationAccess().getGroup(), "rule__NoexceptSpecification__Group__0");
					put(grammarAccess.getNoexceptSpecificationAccess().getGroup_1(), "rule__NoexceptSpecification__Group_1__0");
					put(grammarAccess.getTestAccess().getElementsAssignment(), "rule__Test__ElementsAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.ui.contentassist.antlr.internal.InternalCpp2Parser typedParser = (org.ui.contentassist.antlr.internal.InternalCpp2Parser) parser;
			typedParser.entryRuleTest();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public Cpp2GrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(Cpp2GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
