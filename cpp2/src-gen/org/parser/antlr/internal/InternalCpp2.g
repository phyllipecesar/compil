/*
* generated by Xtext
*/
grammar InternalCpp2;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.services.Cpp2GrammarAccess;

}

@parser::members {

 	private Cpp2GrammarAccess grammarAccess;
 	
    public InternalCpp2Parser(TokenStream input, Cpp2GrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Test";	
   	}
   	
   	@Override
   	protected Cpp2GrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleTest
entryRuleTest returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTestRule()); }
	 iv_ruleTest=ruleTest 
	 { $current=$iv_ruleTest.current; } 
	 EOF 
;

// Rule Test
ruleTest returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getTestAccess().getElementsTokenParserRuleCall_0()); 
	    }
		lv_elements_0_0=ruleToken		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTestRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_0_0, 
        		"Token");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;







// Entry rule entryRuleToken
entryRuleToken returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTokenRule()); } 
	 iv_ruleToken=ruleToken 
	 { $current=$iv_ruleToken.current.getText(); }  
	 EOF 
;

// Rule Token
ruleToken returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_KEYWORD_0=RULE_KEYWORD    {
		$current.merge(this_KEYWORD_0);
    }

    { 
    newLeafNode(this_KEYWORD_0, grammarAccess.getTokenAccess().getKEYWORDTerminalRuleCall_0()); 
    }

    |
    { 
        newCompositeNode(grammarAccess.getTokenAccess().getLiteralParserRuleCall_1()); 
    }
    this_Literal_1=ruleLiteral    {
		$current.merge(this_Literal_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |(    this_PREPROCESSING_OP_OR_PUNC_2=RULE_PREPROCESSING_OP_OR_PUNC    {
		$current.merge(this_PREPROCESSING_OP_OR_PUNC_2);
    }

    { 
    newLeafNode(this_PREPROCESSING_OP_OR_PUNC_2, grammarAccess.getTokenAccess().getPREPROCESSING_OP_OR_PUNCTerminalRuleCall_2_0()); 
    }
    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    newLeafNode(this_ID_3, grammarAccess.getTokenAccess().getIDTerminalRuleCall_2_1()); 
    }
))
    ;





// Entry rule entryRuleLiteral
entryRuleLiteral returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralRule()); } 
	 iv_ruleLiteral=ruleLiteral 
	 { $current=$iv_ruleLiteral.current.getText(); }  
	 EOF 
;

// Rule Literal
ruleLiteral returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getLiteralAccess().getINTTerminalRuleCall_0()); 
    }

    |    this_CHARACTER_LITERAL_1=RULE_CHARACTER_LITERAL    {
		$current.merge(this_CHARACTER_LITERAL_1);
    }

    { 
    newLeafNode(this_CHARACTER_LITERAL_1, grammarAccess.getLiteralAccess().getCHARACTER_LITERALTerminalRuleCall_1()); 
    }

    |    this_FLOATING_LITERAL_2=RULE_FLOATING_LITERAL    {
		$current.merge(this_FLOATING_LITERAL_2);
    }

    { 
    newLeafNode(this_FLOATING_LITERAL_2, grammarAccess.getLiteralAccess().getFLOATING_LITERALTerminalRuleCall_2()); 
    }

    |    this_STRING_LITERAL_3=RULE_STRING_LITERAL    {
		$current.merge(this_STRING_LITERAL_3);
    }

    { 
    newLeafNode(this_STRING_LITERAL_3, grammarAccess.getLiteralAccess().getSTRING_LITERALTerminalRuleCall_3()); 
    }

    |((
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLiteralAccess().getTrueKeyword_4_0_0()); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLiteralAccess().getFalseKeyword_4_0_1()); 
    }
)
	kw='nullptr' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLiteralAccess().getNullptrKeyword_4_1()); 
    }
))
    ;





// Entry rule entryRuleOperatorFunctionId
entryRuleOperatorFunctionId returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperatorFunctionIdRule()); } 
	 iv_ruleOperatorFunctionId=ruleOperatorFunctionId 
	 { $current=$iv_ruleOperatorFunctionId.current.getText(); }  
	 EOF 
;

// Rule OperatorFunctionId
ruleOperatorFunctionId returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='operator' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorFunctionIdAccess().getOperatorKeyword_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getOperatorFunctionIdAccess().getOverloadableOperatorParserRuleCall_1()); 
    }
    this_OverloadableOperator_1=ruleOverloadableOperator    {
		$current.merge(this_OverloadableOperator_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorFunctionIdAccess().getLessThanSignKeyword_2_0()); 
    }
(
    { 
        newCompositeNode(grammarAccess.getOperatorFunctionIdAccess().getTemplateArgumentParserRuleCall_2_1()); 
    }
    this_TemplateArgument_3=ruleTemplateArgument    {
		$current.merge(this_TemplateArgument_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOperatorFunctionIdAccess().getGreaterThanSignKeyword_2_2()); 
    }
)?)
    ;





// Entry rule entryRuleOverloadableOperator
entryRuleOverloadableOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOverloadableOperatorRule()); } 
	 iv_ruleOverloadableOperator=ruleOverloadableOperator 
	 { $current=$iv_ruleOverloadableOperator.current.getText(); }  
	 EOF 
;

// Rule OverloadableOperator
ruleOverloadableOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='new' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getNewKeyword_0()); 
    }

    |
	kw='delete' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getDeleteKeyword_1()); 
    }

    |(
	kw='new' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getNewKeyword_2_0()); 
    }

	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getLeftSquareBracketKeyword_2_1()); 
    }

	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getRightSquareBracketKeyword_2_2()); 
    }
)
    |(
	kw='delete' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getDeleteKeyword_3_0()); 
    }

	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getLeftSquareBracketKeyword_3_1()); 
    }

	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getRightSquareBracketKeyword_3_2()); 
    }
)
    |
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getPlusSignKeyword_4()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getHyphenMinusKeyword_5()); 
    }

    |
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getAsteriskKeyword_6()); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getSolidusKeyword_7()); 
    }

    |
	kw='%' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getPercentSignKeyword_8()); 
    }

    |
	kw='^' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getCircumflexAccentKeyword_9()); 
    }

    |
	kw='&' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getAmpersandKeyword_10()); 
    }

    |
	kw='|' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getVerticalLineKeyword_11()); 
    }

    |
	kw='~' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getTildeKeyword_12()); 
    }

    |
	kw='!' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getExclamationMarkKeyword_13()); 
    }

    |
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getEqualsSignKeyword_14()); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getLessThanSignKeyword_15()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getGreaterThanSignKeyword_16()); 
    }

    |
	kw='+=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getPlusSignEqualsSignKeyword_17()); 
    }

    |
	kw='-=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getHyphenMinusEqualsSignKeyword_18()); 
    }

    |
	kw='*=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getAsteriskEqualsSignKeyword_19()); 
    }

    |
	kw='/=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getSolidusEqualsSignKeyword_20()); 
    }

    |
	kw='%=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getPercentSignEqualsSignKeyword_21()); 
    }

    |
	kw='^=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getCircumflexAccentEqualsSignKeyword_22()); 
    }

    |
	kw='&=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getAmpersandEqualsSignKeyword_23()); 
    }

    |
	kw='|=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getVerticalLineEqualsSignKeyword_24()); 
    }

    |
	kw='<<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getLessThanSignLessThanSignKeyword_25()); 
    }

    |
	kw='>>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getGreaterThanSignGreaterThanSignKeyword_26()); 
    }

    |
	kw='>>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getGreaterThanSignGreaterThanSignEqualsSignKeyword_27()); 
    }

    |
	kw='<<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getLessThanSignLessThanSignEqualsSignKeyword_28()); 
    }

    |
	kw='==' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getEqualsSignEqualsSignKeyword_29()); 
    }

    |
	kw='!=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getExclamationMarkEqualsSignKeyword_30()); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getLessThanSignEqualsSignKeyword_31()); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getGreaterThanSignEqualsSignKeyword_32()); 
    }

    |
	kw='&&' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getAmpersandAmpersandKeyword_33()); 
    }

    |
	kw='||' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getVerticalLineVerticalLineKeyword_34()); 
    }

    |
	kw='++' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getPlusSignPlusSignKeyword_35()); 
    }

    |
	kw='--' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getHyphenMinusHyphenMinusKeyword_36()); 
    }

    |
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getCommaKeyword_37()); 
    }

    |
	kw='->*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getHyphenMinusGreaterThanSignAsteriskKeyword_38()); 
    }

    |
	kw='->' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getHyphenMinusGreaterThanSignKeyword_39()); 
    }

    |
	kw='()' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getLeftParenthesisRightParenthesisKeyword_40()); 
    }

    |
	kw='[]' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOverloadableOperatorAccess().getLeftSquareBracketRightSquareBracketKeyword_41()); 
    }
)
    ;





// Entry rule entryRuleLiteralOperatorId
entryRuleLiteralOperatorId returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLiteralOperatorIdRule()); } 
	 iv_ruleLiteralOperatorId=ruleLiteralOperatorId 
	 { $current=$iv_ruleLiteralOperatorId.current.getText(); }  
	 EOF 
;

// Rule LiteralOperatorId
ruleLiteralOperatorId returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='operator' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLiteralOperatorIdAccess().getOperatorKeyword_0()); 
    }

	kw='"' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLiteralOperatorIdAccess().getQuotationMarkKeyword_1()); 
    }

	kw='"' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLiteralOperatorIdAccess().getQuotationMarkKeyword_2()); 
    }
)
    ;







// Entry rule entryRuleTemplateParameterList
entryRuleTemplateParameterList returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTemplateParameterListRule()); } 
	 iv_ruleTemplateParameterList=ruleTemplateParameterList 
	 { $current=$iv_ruleTemplateParameterList.current.getText(); }  
	 EOF 
;

// Rule TemplateParameterList
ruleTemplateParameterList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTemplateParameterListAccess().getTemplateParameterParserRuleCall_0()); 
    }
    this_TemplateParameter_0=ruleTemplateParameter    {
		$current.merge(this_TemplateParameter_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTemplateParameterListAccess().getCommaKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getTemplateParameterListAccess().getTemplateParameterParserRuleCall_1_1()); 
    }
    this_TemplateParameter_2=ruleTemplateParameter    {
		$current.merge(this_TemplateParameter_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleTemplateParameter
entryRuleTemplateParameter returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTemplateParameterRule()); } 
	 iv_ruleTemplateParameter=ruleTemplateParameter 
	 { $current=$iv_ruleTemplateParameter.current.getText(); }  
	 EOF 
;

// Rule TemplateParameter
ruleTemplateParameter returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTemplateParameterAccess().getTypeParameterParserRuleCall_0()); 
    }
    this_TypeParameter_0=ruleTypeParameter    {
		$current.merge(this_TypeParameter_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTemplateParameterAccess().getParameterDeclarationParserRuleCall_1()); 
    }
    this_ParameterDeclaration_1=ruleParameterDeclaration    {
		$current.merge(this_ParameterDeclaration_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleTypeParameter
entryRuleTypeParameter returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeParameterRule()); } 
	 iv_ruleTypeParameter=ruleTypeParameter 
	 { $current=$iv_ruleTypeParameter.current.getText(); }  
	 EOF 
;

// Rule TypeParameter
ruleTypeParameter returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='class' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeParameterAccess().getClassKeyword_0_0()); 
    }
(((
	kw='...' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeParameterAccess().getFullStopFullStopFullStopKeyword_0_1_0_0()); 
    }
)?(    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getTypeParameterAccess().getIDTerminalRuleCall_0_1_0_1()); 
    }
)?)
    |((    this_ID_3=RULE_ID    {
		$current.merge(this_ID_3);
    }

    { 
    newLeafNode(this_ID_3, grammarAccess.getTypeParameterAccess().getIDTerminalRuleCall_0_1_1_0()); 
    }
)?
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeParameterAccess().getEqualsSignKeyword_0_1_1_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getTypeParameterAccess().getTypeIdParserRuleCall_0_1_1_2()); 
    }
    this_TypeId_5=ruleTypeId    {
		$current.merge(this_TypeId_5);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)))
    |(
	kw='typename' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeParameterAccess().getTypenameKeyword_1_0()); 
    }
(((
	kw='...' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeParameterAccess().getFullStopFullStopFullStopKeyword_1_1_0_0()); 
    }
)?(    this_ID_8=RULE_ID    {
		$current.merge(this_ID_8);
    }

    { 
    newLeafNode(this_ID_8, grammarAccess.getTypeParameterAccess().getIDTerminalRuleCall_1_1_0_1()); 
    }
)?)
    |((    this_ID_9=RULE_ID    {
		$current.merge(this_ID_9);
    }

    { 
    newLeafNode(this_ID_9, grammarAccess.getTypeParameterAccess().getIDTerminalRuleCall_1_1_1_0()); 
    }
)?
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeParameterAccess().getEqualsSignKeyword_1_1_1_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getTypeParameterAccess().getTypeIdParserRuleCall_1_1_1_2()); 
    }
    this_TypeId_11=ruleTypeId    {
		$current.merge(this_TypeId_11);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)))
    |(
	kw='template' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeParameterAccess().getTemplateKeyword_2_0()); 
    }

	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeParameterAccess().getLessThanSignKeyword_2_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getTypeParameterAccess().getTemplateParameterListParserRuleCall_2_2()); 
    }
    this_TemplateParameterList_14=ruleTemplateParameterList    {
		$current.merge(this_TemplateParameterList_14);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeParameterAccess().getGreaterThanSignKeyword_2_3()); 
    }

	kw='class' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeParameterAccess().getClassKeyword_2_4()); 
    }
(((
	kw='...' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeParameterAccess().getFullStopFullStopFullStopKeyword_2_5_0_0()); 
    }
)?(    this_ID_18=RULE_ID    {
		$current.merge(this_ID_18);
    }

    { 
    newLeafNode(this_ID_18, grammarAccess.getTypeParameterAccess().getIDTerminalRuleCall_2_5_0_1()); 
    }
)?)
    |((    this_ID_19=RULE_ID    {
		$current.merge(this_ID_19);
    }

    { 
    newLeafNode(this_ID_19, grammarAccess.getTypeParameterAccess().getIDTerminalRuleCall_2_5_1_0()); 
    }
)?
	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeParameterAccess().getEqualsSignKeyword_2_5_1_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getTypeParameterAccess().getIdExpressionParserRuleCall_2_5_1_2()); 
    }
    this_IdExpression_21=ruleIdExpression    {
		$current.merge(this_IdExpression_21);
    }

    { 
        afterParserOrEnumRuleCall();
    }
))))
    ;





// Entry rule entryRuleSimpleTemplateId
entryRuleSimpleTemplateId returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimpleTemplateIdRule()); } 
	 iv_ruleSimpleTemplateId=ruleSimpleTemplateId 
	 { $current=$iv_ruleSimpleTemplateId.current.getText(); }  
	 EOF 
;

// Rule SimpleTemplateId
ruleSimpleTemplateId returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getSimpleTemplateIdAccess().getIDTerminalRuleCall_0()); 
    }

	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpleTemplateIdAccess().getLessThanSignKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getSimpleTemplateIdAccess().getTemplateArgumentListParserRuleCall_2()); 
    }
    this_TemplateArgumentList_2=ruleTemplateArgumentList    {
		$current.merge(this_TemplateArgumentList_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSimpleTemplateIdAccess().getGreaterThanSignKeyword_3()); 
    }
)
    ;







// Entry rule entryRuleTemplateArgumentList
entryRuleTemplateArgumentList returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTemplateArgumentListRule()); } 
	 iv_ruleTemplateArgumentList=ruleTemplateArgumentList 
	 { $current=$iv_ruleTemplateArgumentList.current.getText(); }  
	 EOF 
;

// Rule TemplateArgumentList
ruleTemplateArgumentList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTemplateArgumentListAccess().getTemplateArgumentParserRuleCall_0()); 
    }
    this_TemplateArgument_0=ruleTemplateArgument    {
		$current.merge(this_TemplateArgument_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='...' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTemplateArgumentListAccess().getFullStopFullStopFullStopKeyword_1()); 
    }
)?(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTemplateArgumentListAccess().getCommaKeyword_2_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getTemplateArgumentListAccess().getTemplateArgumentParserRuleCall_2_1()); 
    }
    this_TemplateArgument_3=ruleTemplateArgument    {
		$current.merge(this_TemplateArgument_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='...' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTemplateArgumentListAccess().getFullStopFullStopFullStopKeyword_2_2()); 
    }
)?)*)
    ;





// Entry rule entryRuleTemplateArgument
entryRuleTemplateArgument returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTemplateArgumentRule()); } 
	 iv_ruleTemplateArgument=ruleTemplateArgument 
	 { $current=$iv_ruleTemplateArgument.current.getText(); }  
	 EOF 
;

// Rule TemplateArgument
ruleTemplateArgument returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTemplateArgumentAccess().getConstantExpressionParserRuleCall_0()); 
    }
    this_ConstantExpression_0=ruleConstantExpression    {
		$current.merge(this_ConstantExpression_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTemplateArgumentAccess().getTypeIdParserRuleCall_1()); 
    }
    this_TypeId_1=ruleTypeId    {
		$current.merge(this_TypeId_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getTemplateArgumentAccess().getIdExpressionParserRuleCall_2()); 
    }
    this_IdExpression_2=ruleIdExpression    {
		$current.merge(this_IdExpression_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;















// Entry rule entryRuleHandler
entryRuleHandler returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getHandlerRule()); } 
	 iv_ruleHandler=ruleHandler 
	 { $current=$iv_ruleHandler.current.getText(); }  
	 EOF 
;

// Rule Handler
ruleHandler returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='catch' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getHandlerAccess().getCatchKeyword_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getHandlerAccess().getLeftParenthesisKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getHandlerAccess().getExceptionDeclarationParserRuleCall_2()); 
    }
    this_ExceptionDeclaration_2=ruleExceptionDeclaration    {
		$current.merge(this_ExceptionDeclaration_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getHandlerAccess().getRightParenthesisKeyword_3()); 
    }

    { 
        newCompositeNode(grammarAccess.getHandlerAccess().getCompoundStatementParserRuleCall_4()); 
    }
    this_CompoundStatement_4=ruleCompoundStatement    {
		$current.merge(this_CompoundStatement_4);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleExceptionDeclaration
entryRuleExceptionDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getExceptionDeclarationRule()); } 
	 iv_ruleExceptionDeclaration=ruleExceptionDeclaration 
	 { $current=$iv_ruleExceptionDeclaration.current.getText(); }  
	 EOF 
;

// Rule ExceptionDeclaration
ruleExceptionDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    { 
        newCompositeNode(grammarAccess.getExceptionDeclarationAccess().getAttributeSpecifierParserRuleCall_0_0()); 
    }
    this_AttributeSpecifier_0=ruleAttributeSpecifier    {
		$current.merge(this_AttributeSpecifier_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*(
    { 
        newCompositeNode(grammarAccess.getExceptionDeclarationAccess().getTypeSpecifierParserRuleCall_0_1()); 
    }
    this_TypeSpecifier_1=ruleTypeSpecifier    {
		$current.merge(this_TypeSpecifier_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)+(
    { 
        newCompositeNode(grammarAccess.getExceptionDeclarationAccess().getDeclaratorParserRuleCall_0_2_0()); 
    }
    this_Declarator_2=ruleDeclarator    {
		$current.merge(this_Declarator_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |(
    { 
        newCompositeNode(grammarAccess.getExceptionDeclarationAccess().getAbstractDeclaratorParserRuleCall_0_2_1()); 
    }
    this_AbstractDeclarator_3=ruleAbstractDeclarator    {
		$current.merge(this_AbstractDeclarator_3);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)?))
    |
	kw='...' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExceptionDeclarationAccess().getFullStopFullStopFullStopKeyword_1()); 
    }
)
    ;









// Entry rule entryRuleDynamicExceptionSpecification
entryRuleDynamicExceptionSpecification returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDynamicExceptionSpecificationRule()); } 
	 iv_ruleDynamicExceptionSpecification=ruleDynamicExceptionSpecification 
	 { $current=$iv_ruleDynamicExceptionSpecification.current.getText(); }  
	 EOF 
;

// Rule DynamicExceptionSpecification
ruleDynamicExceptionSpecification returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='throw' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDynamicExceptionSpecificationAccess().getThrowKeyword_0()); 
    }

	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDynamicExceptionSpecificationAccess().getLeftParenthesisKeyword_1()); 
    }

    { 
        newCompositeNode(grammarAccess.getDynamicExceptionSpecificationAccess().getTypeIdListParserRuleCall_2()); 
    }
    this_TypeIdList_2=ruleTypeIdList    {
		$current.merge(this_TypeIdList_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDynamicExceptionSpecificationAccess().getRightParenthesisKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleNoexceptSpecification
entryRuleNoexceptSpecification returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNoexceptSpecificationRule()); } 
	 iv_ruleNoexceptSpecification=ruleNoexceptSpecification 
	 { $current=$iv_ruleNoexceptSpecification.current.getText(); }  
	 EOF 
;

// Rule NoexceptSpecification
ruleNoexceptSpecification returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='noexcept' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNoexceptSpecificationAccess().getNoexceptKeyword_0()); 
    }
(
	kw='(' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNoexceptSpecificationAccess().getLeftParenthesisKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getNoexceptSpecificationAccess().getConstantExpressionParserRuleCall_1_1()); 
    }
    this_ConstantExpression_2=ruleConstantExpression    {
		$current.merge(this_ConstantExpression_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw=')' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNoexceptSpecificationAccess().getRightParenthesisKeyword_1_2()); 
    }
)?)
    ;





// Entry rule entryRuleConstantExpression
entryRuleConstantExpression returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstantExpressionRule()); } 
	 iv_ruleConstantExpression=ruleConstantExpression 
	 { $current=$iv_ruleConstantExpression.current.getText(); }  
	 EOF 
;

// Rule ConstantExpression
ruleConstantExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='DUMMY1' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConstantExpressionAccess().getDUMMY1Keyword()); 
    }

    ;





// Entry rule entryRuleTypeId
entryRuleTypeId returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeIdRule()); } 
	 iv_ruleTypeId=ruleTypeId 
	 { $current=$iv_ruleTypeId.current.getText(); }  
	 EOF 
;

// Rule TypeId
ruleTypeId returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='DUMMY2' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeIdAccess().getDUMMY2Keyword()); 
    }

    ;





// Entry rule entryRuleIdExpression
entryRuleIdExpression returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdExpressionRule()); } 
	 iv_ruleIdExpression=ruleIdExpression 
	 { $current=$iv_ruleIdExpression.current.getText(); }  
	 EOF 
;

// Rule IdExpression
ruleIdExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='DUMMY3' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIdExpressionAccess().getDUMMY3Keyword()); 
    }

    ;





// Entry rule entryRuleParameterDeclaration
entryRuleParameterDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterDeclarationRule()); } 
	 iv_ruleParameterDeclaration=ruleParameterDeclaration 
	 { $current=$iv_ruleParameterDeclaration.current.getText(); }  
	 EOF 
;

// Rule ParameterDeclaration
ruleParameterDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='DUMMY4' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getParameterDeclarationAccess().getDUMMY4Keyword()); 
    }

    ;





// Entry rule entryRuleDeclaration
entryRuleDeclaration returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclarationRule()); } 
	 iv_ruleDeclaration=ruleDeclaration 
	 { $current=$iv_ruleDeclaration.current.getText(); }  
	 EOF 
;

// Rule Declaration
ruleDeclaration returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='DUMMY5' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDeclarationAccess().getDUMMY5Keyword()); 
    }

    ;





// Entry rule entryRuleNestedNameSpecifier
entryRuleNestedNameSpecifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNestedNameSpecifierRule()); } 
	 iv_ruleNestedNameSpecifier=ruleNestedNameSpecifier 
	 { $current=$iv_ruleNestedNameSpecifier.current.getText(); }  
	 EOF 
;

// Rule NestedNameSpecifier
ruleNestedNameSpecifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='DUMMY6' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNestedNameSpecifierAccess().getDUMMY6Keyword()); 
    }

    ;





// Entry rule entryRuleAssignmentExpression
entryRuleAssignmentExpression returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAssignmentExpressionRule()); } 
	 iv_ruleAssignmentExpression=ruleAssignmentExpression 
	 { $current=$iv_ruleAssignmentExpression.current.getText(); }  
	 EOF 
;

// Rule AssignmentExpression
ruleAssignmentExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='DUMMY7' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAssignmentExpressionAccess().getDUMMY7Keyword()); 
    }

    ;





// Entry rule entryRuleAttributeSpecifier
entryRuleAttributeSpecifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeSpecifierRule()); } 
	 iv_ruleAttributeSpecifier=ruleAttributeSpecifier 
	 { $current=$iv_ruleAttributeSpecifier.current.getText(); }  
	 EOF 
;

// Rule AttributeSpecifier
ruleAttributeSpecifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='DUMMY8' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAttributeSpecifierAccess().getDUMMY8Keyword()); 
    }

    ;





// Entry rule entryRuleTypeSpecifier
entryRuleTypeSpecifier returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeSpecifierRule()); } 
	 iv_ruleTypeSpecifier=ruleTypeSpecifier 
	 { $current=$iv_ruleTypeSpecifier.current.getText(); }  
	 EOF 
;

// Rule TypeSpecifier
ruleTypeSpecifier returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='DUMMY9' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeSpecifierAccess().getDUMMY9Keyword()); 
    }

    ;





// Entry rule entryRuleDeclarator
entryRuleDeclarator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDeclaratorRule()); } 
	 iv_ruleDeclarator=ruleDeclarator 
	 { $current=$iv_ruleDeclarator.current.getText(); }  
	 EOF 
;

// Rule Declarator
ruleDeclarator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='DUMMY10' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDeclaratorAccess().getDUMMY10Keyword()); 
    }

    ;





// Entry rule entryRuleAbstractDeclarator
entryRuleAbstractDeclarator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractDeclaratorRule()); } 
	 iv_ruleAbstractDeclarator=ruleAbstractDeclarator 
	 { $current=$iv_ruleAbstractDeclarator.current.getText(); }  
	 EOF 
;

// Rule AbstractDeclarator
ruleAbstractDeclarator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='DUMMY11' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getAbstractDeclaratorAccess().getDUMMY11Keyword()); 
    }

    ;





// Entry rule entryRuleCompoundStatement
entryRuleCompoundStatement returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCompoundStatementRule()); } 
	 iv_ruleCompoundStatement=ruleCompoundStatement 
	 { $current=$iv_ruleCompoundStatement.current.getText(); }  
	 EOF 
;

// Rule CompoundStatement
ruleCompoundStatement returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='DUMMY12' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCompoundStatementAccess().getDUMMY12Keyword()); 
    }

    ;





// Entry rule entryRuleCtorInitializer
entryRuleCtorInitializer returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCtorInitializerRule()); } 
	 iv_ruleCtorInitializer=ruleCtorInitializer 
	 { $current=$iv_ruleCtorInitializer.current.getText(); }  
	 EOF 
;

// Rule CtorInitializer
ruleCtorInitializer returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='DUMMY13' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCtorInitializerAccess().getDUMMY13Keyword()); 
    }

    ;





// Entry rule entryRuleTypeIdList
entryRuleTypeIdList returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getTypeIdListRule()); } 
	 iv_ruleTypeIdList=ruleTypeIdList 
	 { $current=$iv_ruleTypeIdList.current.getText(); }  
	 EOF 
;

// Rule TypeIdList
ruleTypeIdList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='DUMMY14' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTypeIdListAccess().getDUMMY14Keyword()); 
    }

    ;





fragment RULE_HEX_QUAD : RULE_HEXADECIMAL_DIGIT RULE_HEXADECIMAL_DIGIT RULE_HEXADECIMAL_DIGIT RULE_HEXADECIMAL_DIGIT;

fragment RULE_UNIVERSAL_CHARACTER_NAME : ('\\u' RULE_HEX_QUAD|'\\U' RULE_HEX_QUAD RULE_HEX_QUAD);

RULE_HEADER_NAME : ('<' RULE_H_CHAR+ '>'|'"' RULE_Q_CHAR+ '"');

fragment RULE_H_CHAR : ~(('\n'|'>'));

fragment RULE_Q_CHAR : ~(('\n'|'"'));

RULE_DIGIT : '0'..'9';

RULE_NONDIGIT : ('a'..'z'|'A'..'Z'|'_');

RULE_KEYWORD : ('alignas'|'alignof'|'asm'|'auto'|'bool'|'break'|'case'|'catch'|'char'|'char16_t'|'char32_t'|'class'|'const'|'constexpr'|'const_cast'|'continue'|'decltype'|'default'|'delete'|'do'|'double'|'dynamic_cast'|'else'|'enum'|'explicit'|'export'|'extern'|'false'|'float'|'for'|'friend'|'goto'|'if'|'inline'|'int'|'long'|'mutable'|'namespace'|'new'|'noexcept'|'nullptr'|'operator'|'private'|'protected'|'public'|'register'|'reinterpret_cast'|'return'|'short'|'signed'|'sizeof'|'static'|'static_assert'|'static_cast'|'struct'|'switch'|'template'|'this'|'thread_local'|'throw'|'true'|'try'|'typedef'|'typeid'|'typename'|'union'|'unsigned'|'using'|'virtual'|'void'|'volatile'|'wchar_t'|'while');

RULE_PREPROCESSING_OP_OR_PUNC : ('{'|'}'|'['|']'|'#'|'##'|'('|')'|'<:'|':>'|'<%'|'%>'|'%:'|'%:%:'|';'|':'|'...'|'new'|'delete'|'?'|'::'|'.'|'.*'|'+'|'-'|'*'|'/'|'%'|'^'|'&'|'|'|'~'|'!'|'='|'<'|'>'|'+='|'-='|'*='|'/='|'%='|'^='|'&='|'|='|'<<'|'>>'|'<<='|'>>='|'=='|'!='|'<='|'>='|'&&'|'||'|'++'|'--'|','|'->*'|'->'|'and'|'and_eq'|'bitand'|'bitor'|'compl'|'not'|'not_eq'|'or'|'or_eq'|'xor'|'xor_eq');

RULE_INT : (RULE_DECIMAL_LITERAL|RULE_OCTAL_LITERAL|RULE_HEXADECIMAL_LITERAL) RULE_INTEGER_SUFFIX?;

fragment RULE_DECIMAL_LITERAL : '1'..'9' RULE_DIGIT*;

fragment RULE_OCTAL_LITERAL : '0' RULE_OCTAL_DIGIT*;

fragment RULE_HEXADECIMAL_LITERAL : ('0x'|'0X') RULE_HEXADECIMAL_DIGIT+;

fragment RULE_OCTAL_DIGIT : '0'..'7';

fragment RULE_HEXADECIMAL_DIGIT : ('0'..'9'|'A'..'F');

fragment RULE_INTEGER_SUFFIX : (('u'|'U') ('l'|'L'|'ll'|'LL')?|('l'|'L'|'ll'|'LL') ('u'|'U')?);

RULE_CHARACTER_LITERAL : ('u'|'U'|'L')? '\'' RULE_C_CHAR+ '\'';

fragment RULE_C_CHAR : (~(('\''|'\\'|'\n'))|RULE_ESCAPE_SEQUENCE|RULE_UNIVERSAL_CHARACTER_NAME);

fragment RULE_ESCAPE_SEQUENCE : (RULE_SIMPLE_ESCAPE_SEQUENCE|RULE_OCTAL_ESCAPE_SEQUENCE|RULE_HEXADECIMAL_ESCAPE_SEQUENCE);

fragment RULE_SIMPLE_ESCAPE_SEQUENCE : '\\' ('\''|'"'|'?'|'\\'|'a'|'b'|'f'|'n'|'r'|'t'|'v');

fragment RULE_OCTAL_ESCAPE_SEQUENCE : '\\' RULE_OCTAL_DIGIT RULE_OCTAL_DIGIT RULE_OCTAL_DIGIT;

fragment RULE_HEXADECIMAL_ESCAPE_SEQUENCE : '\\x' RULE_HEXADECIMAL_DIGIT+;

RULE_FLOATING_LITERAL : (RULE_FRACTIONAL_CONSTANT RULE_EXPONENT_PART?|RULE_DIGIT+ RULE_EXPONENT_PART) ('f'|'l'|'F'|'L')?;

fragment RULE_FRACTIONAL_CONSTANT : (RULE_DIGIT* '.' RULE_DIGIT+|RULE_DIGIT+ '.');

fragment RULE_EXPONENT_PART : ('e'|'E') ('+'|'-')? RULE_DIGIT+;

RULE_STRING_LITERAL : RULE_ENC_PREFIX? '"' RULE_SCHAR+ '"';

fragment RULE_ENC_PREFIX : ('u8'|'u'|'U'|'L');

fragment RULE_SCHAR : (~(('"'|'\\'|'\n'))|RULE_ESCAPE_SEQUENCE|RULE_UNIVERSAL_CHARACTER_NAME);

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


