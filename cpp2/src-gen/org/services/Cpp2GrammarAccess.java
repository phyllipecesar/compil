/*
* generated by Xtext
*/
package org.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class Cpp2GrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class TestElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Test");
		private final Assignment cElementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cElementsTokenParserRuleCall_0 = (RuleCall)cElementsAssignment.eContents().get(0);
		
		////	(elements+=PreProcessingToken)*
		//Test:
		//	elements+=Token*;
		public ParserRule getRule() { return rule; }

		//elements+=Token*
		public Assignment getElementsAssignment() { return cElementsAssignment; }

		//Token
		public RuleCall getElementsTokenParserRuleCall_0() { return cElementsTokenParserRuleCall_0; }
	}

	public class PreProcessingTokenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PreProcessingToken");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHEADER_NAMETerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Alternatives cAlternatives_2_0 = (Alternatives)cGroup_2.eContents().get(0);
		private final RuleCall cDIGITTerminalRuleCall_2_0_0 = (RuleCall)cAlternatives_2_0.eContents().get(0);
		private final Group cGroup_2_0_1 = (Group)cAlternatives_2_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2_0_1_0 = (Keyword)cGroup_2_0_1.eContents().get(0);
		private final RuleCall cDIGITTerminalRuleCall_2_0_1_1 = (RuleCall)cGroup_2_0_1.eContents().get(1);
		private final Alternatives cAlternatives_2_1 = (Alternatives)cGroup_2.eContents().get(1);
		private final RuleCall cDIGITTerminalRuleCall_2_1_0 = (RuleCall)cAlternatives_2_1.eContents().get(0);
		private final RuleCall cNONDIGITTerminalRuleCall_2_1_1 = (RuleCall)cAlternatives_2_1.eContents().get(1);
		private final Group cGroup_2_1_2 = (Group)cAlternatives_2_1.eContents().get(2);
		private final Alternatives cAlternatives_2_1_2_0 = (Alternatives)cGroup_2_1_2.eContents().get(0);
		private final Keyword cEKeyword_2_1_2_0_0 = (Keyword)cAlternatives_2_1_2_0.eContents().get(0);
		private final Keyword cEKeyword_2_1_2_0_1 = (Keyword)cAlternatives_2_1_2_0.eContents().get(1);
		private final Alternatives cAlternatives_2_1_2_1 = (Alternatives)cGroup_2_1_2.eContents().get(1);
		private final Keyword cPlusSignKeyword_2_1_2_1_0 = (Keyword)cAlternatives_2_1_2_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2_1_2_1_1 = (Keyword)cAlternatives_2_1_2_1.eContents().get(1);
		private final Keyword cFullStopKeyword_2_1_3 = (Keyword)cAlternatives_2_1.eContents().get(3);
		private final RuleCall cCHARACTER_LITERALTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cSTRING_LITERALTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cPREPROCESSING_OP_OR_PUNCTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//// lex.pptoken
		//// each non-white-space character that cannot be one of the above [ambiguity!!!]
		//PreProcessingToken:
		//	HEADER_NAME | ID | (DIGIT | "." DIGIT) (DIGIT | NONDIGIT | ("e" | "E") ("+" | "-") | ".")* | CHARACTER_LITERAL |
		//	STRING_LITERAL | PREPROCESSING_OP_OR_PUNC;
		public ParserRule getRule() { return rule; }

		//HEADER_NAME | ID | (DIGIT | "." DIGIT) (DIGIT | NONDIGIT | ("e" | "E") ("+" | "-") | ".")* | CHARACTER_LITERAL |
		//STRING_LITERAL | PREPROCESSING_OP_OR_PUNC
		public Alternatives getAlternatives() { return cAlternatives; }

		//HEADER_NAME
		public RuleCall getHEADER_NAMETerminalRuleCall_0() { return cHEADER_NAMETerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }

		//(DIGIT | "." DIGIT) (DIGIT | NONDIGIT | ("e" | "E") ("+" | "-") | ".")*
		public Group getGroup_2() { return cGroup_2; }

		//DIGIT | "." DIGIT
		public Alternatives getAlternatives_2_0() { return cAlternatives_2_0; }

		//DIGIT
		public RuleCall getDIGITTerminalRuleCall_2_0_0() { return cDIGITTerminalRuleCall_2_0_0; }

		//"." DIGIT
		public Group getGroup_2_0_1() { return cGroup_2_0_1; }

		//"."
		public Keyword getFullStopKeyword_2_0_1_0() { return cFullStopKeyword_2_0_1_0; }

		//DIGIT
		public RuleCall getDIGITTerminalRuleCall_2_0_1_1() { return cDIGITTerminalRuleCall_2_0_1_1; }

		//(DIGIT | NONDIGIT | ("e" | "E") ("+" | "-") | ".")*
		public Alternatives getAlternatives_2_1() { return cAlternatives_2_1; }

		//DIGIT
		public RuleCall getDIGITTerminalRuleCall_2_1_0() { return cDIGITTerminalRuleCall_2_1_0; }

		//NONDIGIT
		public RuleCall getNONDIGITTerminalRuleCall_2_1_1() { return cNONDIGITTerminalRuleCall_2_1_1; }

		//("e" | "E") ("+" | "-")
		public Group getGroup_2_1_2() { return cGroup_2_1_2; }

		//"e" | "E"
		public Alternatives getAlternatives_2_1_2_0() { return cAlternatives_2_1_2_0; }

		//"e"
		public Keyword getEKeyword_2_1_2_0_0() { return cEKeyword_2_1_2_0_0; }

		//"E"
		public Keyword getEKeyword_2_1_2_0_1() { return cEKeyword_2_1_2_0_1; }

		//"+" | "-"
		public Alternatives getAlternatives_2_1_2_1() { return cAlternatives_2_1_2_1; }

		//"+"
		public Keyword getPlusSignKeyword_2_1_2_1_0() { return cPlusSignKeyword_2_1_2_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_2_1_2_1_1() { return cHyphenMinusKeyword_2_1_2_1_1; }

		//"."
		public Keyword getFullStopKeyword_2_1_3() { return cFullStopKeyword_2_1_3; }

		//CHARACTER_LITERAL
		public RuleCall getCHARACTER_LITERALTerminalRuleCall_3() { return cCHARACTER_LITERALTerminalRuleCall_3; }

		//STRING_LITERAL
		public RuleCall getSTRING_LITERALTerminalRuleCall_4() { return cSTRING_LITERALTerminalRuleCall_4; }

		//PREPROCESSING_OP_OR_PUNC
		public RuleCall getPREPROCESSING_OP_OR_PUNCTerminalRuleCall_5() { return cPREPROCESSING_OP_OR_PUNCTerminalRuleCall_5; }
	}

	public class TokenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Token");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cKEYWORDTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cPREPROCESSING_OP_OR_PUNCTerminalRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		
		//// lex.token
		//Token:
		//	KEYWORD | Literal | PREPROCESSING_OP_OR_PUNC ID;
		public ParserRule getRule() { return rule; }

		//KEYWORD | Literal | PREPROCESSING_OP_OR_PUNC ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//KEYWORD
		public RuleCall getKEYWORDTerminalRuleCall_0() { return cKEYWORDTerminalRuleCall_0; }

		//Literal
		public RuleCall getLiteralParserRuleCall_1() { return cLiteralParserRuleCall_1; }

		//PREPROCESSING_OP_OR_PUNC ID
		public Group getGroup_2() { return cGroup_2; }

		//PREPROCESSING_OP_OR_PUNC
		public RuleCall getPREPROCESSING_OP_OR_PUNCTerminalRuleCall_2_0() { return cPREPROCESSING_OP_OR_PUNCTerminalRuleCall_2_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_2_1() { return cIDTerminalRuleCall_2_1; }
	}

	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCHARACTER_LITERALTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFLOATING_LITERALTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSTRING_LITERALTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final Alternatives cAlternatives_4 = (Alternatives)cAlternatives.eContents().get(4);
		private final Keyword cTrueKeyword_4_0 = (Keyword)cAlternatives_4.eContents().get(0);
		private final Keyword cFalseKeyword_4_1 = (Keyword)cAlternatives_4.eContents().get(1);
		
		//// lex.literal.kinds
		////POINTER_LITERAL
		////USER_DEFINED_LITERAL
		//Literal:
		//	INT | CHARACTER_LITERAL | FLOATING_LITERAL | STRING_LITERAL | ("true" | "false");
		public ParserRule getRule() { return rule; }

		//INT | CHARACTER_LITERAL | FLOATING_LITERAL | STRING_LITERAL | ("true" | "false")
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//CHARACTER_LITERAL
		public RuleCall getCHARACTER_LITERALTerminalRuleCall_1() { return cCHARACTER_LITERALTerminalRuleCall_1; }

		//FLOATING_LITERAL
		public RuleCall getFLOATING_LITERALTerminalRuleCall_2() { return cFLOATING_LITERALTerminalRuleCall_2; }

		//STRING_LITERAL
		public RuleCall getSTRING_LITERALTerminalRuleCall_3() { return cSTRING_LITERALTerminalRuleCall_3; }

		//"true" | "false"
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//"true"
		public Keyword getTrueKeyword_4_0() { return cTrueKeyword_4_0; }

		//"false"
		public Keyword getFalseKeyword_4_1() { return cFalseKeyword_4_1; }
	}
	
	
	private TestElements pTest;
	private TerminalRule tHEX_QUAD;
	private TerminalRule tUNIVERSAL_CHARACTER_NAME;
	private PreProcessingTokenElements pPreProcessingToken;
	private TokenElements pToken;
	private TerminalRule tHEADER_NAME;
	private TerminalRule tH_CHAR;
	private TerminalRule tQ_CHAR;
	private TerminalRule tDIGIT;
	private TerminalRule tNONDIGIT;
	private TerminalRule tKEYWORD;
	private TerminalRule tPREPROCESSING_OP_OR_PUNC;
	private LiteralElements pLiteral;
	private TerminalRule tINT;
	private TerminalRule tDECIMAL_LITERAL;
	private TerminalRule tOCTAL_LITERAL;
	private TerminalRule tHEXADECIMAL_LITERAL;
	private TerminalRule tOCTAL_DIGIT;
	private TerminalRule tHEXADECIMAL_DIGIT;
	private TerminalRule tINTEGER_SUFFIX;
	private TerminalRule tCHARACTER_LITERAL;
	private TerminalRule tC_CHAR;
	private TerminalRule tESCAPE_SEQUENCE;
	private TerminalRule tSIMPLE_ESCAPE_SEQUENCE;
	private TerminalRule tOCTAL_ESCAPE_SEQUENCE;
	private TerminalRule tHEXADECIMAL_ESCAPE_SEQUENCE;
	private TerminalRule tFLOATING_LITERAL;
	private TerminalRule tFRACTIONAL_CONSTANT;
	private TerminalRule tEXPONENT_PART;
	private TerminalRule tSTRING_LITERAL;
	private TerminalRule tENC_PREFIX;
	private TerminalRule tSCHAR;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public Cpp2GrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.Cpp2".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////	(elements+=PreProcessingToken)*
	//Test:
	//	elements+=Token*;
	public TestElements getTestAccess() {
		return (pTest != null) ? pTest : (pTest = new TestElements());
	}
	
	public ParserRule getTestRule() {
		return getTestAccess().getRule();
	}

	//// lex.charset
	//terminal fragment HEX_QUAD:
	//	HEXADECIMAL_DIGIT HEXADECIMAL_DIGIT HEXADECIMAL_DIGIT HEXADECIMAL_DIGIT;
	public TerminalRule getHEX_QUADRule() {
		return (tHEX_QUAD != null) ? tHEX_QUAD : (tHEX_QUAD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEX_QUAD"));
	} 

	//terminal fragment UNIVERSAL_CHARACTER_NAME:
	//	"\\u" HEX_QUAD | "\\U" HEX_QUAD HEX_QUAD;
	public TerminalRule getUNIVERSAL_CHARACTER_NAMERule() {
		return (tUNIVERSAL_CHARACTER_NAME != null) ? tUNIVERSAL_CHARACTER_NAME : (tUNIVERSAL_CHARACTER_NAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UNIVERSAL_CHARACTER_NAME"));
	} 

	//// lex.pptoken
	//// each non-white-space character that cannot be one of the above [ambiguity!!!]
	//PreProcessingToken:
	//	HEADER_NAME | ID | (DIGIT | "." DIGIT) (DIGIT | NONDIGIT | ("e" | "E") ("+" | "-") | ".")* | CHARACTER_LITERAL |
	//	STRING_LITERAL | PREPROCESSING_OP_OR_PUNC;
	public PreProcessingTokenElements getPreProcessingTokenAccess() {
		return (pPreProcessingToken != null) ? pPreProcessingToken : (pPreProcessingToken = new PreProcessingTokenElements());
	}
	
	public ParserRule getPreProcessingTokenRule() {
		return getPreProcessingTokenAccess().getRule();
	}

	//// lex.token
	//Token:
	//	KEYWORD | Literal | PREPROCESSING_OP_OR_PUNC ID;
	public TokenElements getTokenAccess() {
		return (pToken != null) ? pToken : (pToken = new TokenElements());
	}
	
	public ParserRule getTokenRule() {
		return getTokenAccess().getRule();
	}

	//// lex.header
	//terminal HEADER_NAME:
	//	"<" H_CHAR+ ">" | "\"" Q_CHAR+ "\"";
	public TerminalRule getHEADER_NAMERule() {
		return (tHEADER_NAME != null) ? tHEADER_NAME : (tHEADER_NAME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEADER_NAME"));
	} 

	//terminal fragment H_CHAR:
	//	!("\n" | ">");
	public TerminalRule getH_CHARRule() {
		return (tH_CHAR != null) ? tH_CHAR : (tH_CHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "H_CHAR"));
	} 

	//terminal fragment Q_CHAR:
	//	!("\n" | "\"");
	public TerminalRule getQ_CHARRule() {
		return (tQ_CHAR != null) ? tQ_CHAR : (tQ_CHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "Q_CHAR"));
	} 

	//// lex.name
	//terminal DIGIT:
	//	"0".."9";
	public TerminalRule getDIGITRule() {
		return (tDIGIT != null) ? tDIGIT : (tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DIGIT"));
	} 

	//terminal NONDIGIT:
	//	"a".."z" | "A".."Z" | "_";
	public TerminalRule getNONDIGITRule() {
		return (tNONDIGIT != null) ? tNONDIGIT : (tNONDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NONDIGIT"));
	} 

	//// lex.key
	//terminal KEYWORD:
	//	"alignas" | "alignof" | "asm" | "auto" | "bool" | "break" | "case" | "catch" | "char" | "char16_t" | "char32_t" |
	//	"class" | "const" | "constexpr" | "const_cast" | "continue" | "decltype" | "default" | "delete" | "do" | "double" |
	//	"dynamic_cast" | "else" | "enum" | "explicit" | "export" | "extern" | "false" | "float" | "for" | "friend" | "goto" |
	//	"if" | "inline" | "int" | "long" | "mutable" | "namespace" | "new" | "noexcept" | "nullptr" | "operator" | "private"
	//	| "protected" | "public" | "register" | "reinterpret_cast" | "return" | "short" | "signed" | "sizeof" | "static" |
	//	"static_assert" | "static_cast" | "struct" | "switch" | "template" | "this" | "thread_local" | "throw" | "true" |
	//	"try" | "typedef" | "typeid" | "typename" | "union" | "unsigned" | "using" | "virtual" | "void" | "volatile" |
	//	"wchar_t" | "while";
	public TerminalRule getKEYWORDRule() {
		return (tKEYWORD != null) ? tKEYWORD : (tKEYWORD = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "KEYWORD"));
	} 

	//// lex.operators
	//terminal PREPROCESSING_OP_OR_PUNC:
	//	"{" | "}" | "[" | "]" | "#" | "##" | "(" | ")" | "<:" | ":>" | "<%" | "%>" | "%:" | "%:%:" | ";" | ":" | "..." |
	//	"new" | "delete" | "?" | "::" | "." | ".*" | "+" | "-" | "*" | "/" | "%" | "^" | "&" | "|" | "~" | "!" | "=" | "<" |
	//	">" | "+=" | "-=" | "*=" | "/=" | "%=" | "^=" | "&=" | "|=" | "<<" | ">>" | "<<=" | ">>=" | "==" | "!=" | "<=" | ">="
	//	| "&&" | "||" | "++" | "--" | "," | "->*" | "->" | "and" | "and_eq" | "bitand" | "bitor" | "compl" | "not" | "not_eq"
	//	| "or" | "or_eq" | "xor" | "xor_eq";
	public TerminalRule getPREPROCESSING_OP_OR_PUNCRule() {
		return (tPREPROCESSING_OP_OR_PUNC != null) ? tPREPROCESSING_OP_OR_PUNC : (tPREPROCESSING_OP_OR_PUNC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "PREPROCESSING_OP_OR_PUNC"));
	} 

	//// lex.literal.kinds
	////POINTER_LITERAL
	////USER_DEFINED_LITERAL
	//Literal:
	//	INT | CHARACTER_LITERAL | FLOATING_LITERAL | STRING_LITERAL | ("true" | "false");
	public LiteralElements getLiteralAccess() {
		return (pLiteral != null) ? pLiteral : (pLiteral = new LiteralElements());
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}

	//// lex.icon
	//terminal INT returns ecore::EInt:
	//	(DECIMAL_LITERAL | OCTAL_LITERAL | HEXADECIMAL_LITERAL) INTEGER_SUFFIX?;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal fragment DECIMAL_LITERAL:
	//	"1".."9" DIGIT*;
	public TerminalRule getDECIMAL_LITERALRule() {
		return (tDECIMAL_LITERAL != null) ? tDECIMAL_LITERAL : (tDECIMAL_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DECIMAL_LITERAL"));
	} 

	//terminal fragment OCTAL_LITERAL:
	//	"0" OCTAL_DIGIT*;
	public TerminalRule getOCTAL_LITERALRule() {
		return (tOCTAL_LITERAL != null) ? tOCTAL_LITERAL : (tOCTAL_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OCTAL_LITERAL"));
	} 

	//terminal fragment HEXADECIMAL_LITERAL:
	//	("0x" | "0X") HEXADECIMAL_DIGIT+;
	public TerminalRule getHEXADECIMAL_LITERALRule() {
		return (tHEXADECIMAL_LITERAL != null) ? tHEXADECIMAL_LITERAL : (tHEXADECIMAL_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEXADECIMAL_LITERAL"));
	} 

	//terminal fragment OCTAL_DIGIT:
	//	"0".."7";
	public TerminalRule getOCTAL_DIGITRule() {
		return (tOCTAL_DIGIT != null) ? tOCTAL_DIGIT : (tOCTAL_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OCTAL_DIGIT"));
	} 

	//terminal fragment HEXADECIMAL_DIGIT:
	//	"0".."9" | "A".."F";
	public TerminalRule getHEXADECIMAL_DIGITRule() {
		return (tHEXADECIMAL_DIGIT != null) ? tHEXADECIMAL_DIGIT : (tHEXADECIMAL_DIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEXADECIMAL_DIGIT"));
	} 

	//terminal fragment INTEGER_SUFFIX:
	//	("u" | "U") ("l" | "L" | "ll" | "LL")? | ("l" | "L" | "ll" | "LL") ("u" | "U")?;
	public TerminalRule getINTEGER_SUFFIXRule() {
		return (tINTEGER_SUFFIX != null) ? tINTEGER_SUFFIX : (tINTEGER_SUFFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INTEGER_SUFFIX"));
	} 

	//// lex.ccon
	//terminal CHARACTER_LITERAL:
	//	("u" | "U" | "L")? "\'" C_CHAR+ "\'";
	public TerminalRule getCHARACTER_LITERALRule() {
		return (tCHARACTER_LITERAL != null) ? tCHARACTER_LITERAL : (tCHARACTER_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "CHARACTER_LITERAL"));
	} 

	//terminal fragment C_CHAR:
	//	!("\'" | "\\" | "\n") | ESCAPE_SEQUENCE | UNIVERSAL_CHARACTER_NAME;
	public TerminalRule getC_CHARRule() {
		return (tC_CHAR != null) ? tC_CHAR : (tC_CHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "C_CHAR"));
	} 

	//terminal fragment ESCAPE_SEQUENCE:
	//	SIMPLE_ESCAPE_SEQUENCE | OCTAL_ESCAPE_SEQUENCE | HEXADECIMAL_ESCAPE_SEQUENCE;
	public TerminalRule getESCAPE_SEQUENCERule() {
		return (tESCAPE_SEQUENCE != null) ? tESCAPE_SEQUENCE : (tESCAPE_SEQUENCE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ESCAPE_SEQUENCE"));
	} 

	//terminal fragment SIMPLE_ESCAPE_SEQUENCE:
	//	"\\" ("\'" | "\"" | "?" | "\\" | "a" | "b" | "f" | "n" | "r" | "t" | "v");
	public TerminalRule getSIMPLE_ESCAPE_SEQUENCERule() {
		return (tSIMPLE_ESCAPE_SEQUENCE != null) ? tSIMPLE_ESCAPE_SEQUENCE : (tSIMPLE_ESCAPE_SEQUENCE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SIMPLE_ESCAPE_SEQUENCE"));
	} 

	//terminal fragment OCTAL_ESCAPE_SEQUENCE:
	//	"\\" OCTAL_DIGIT OCTAL_DIGIT OCTAL_DIGIT;
	public TerminalRule getOCTAL_ESCAPE_SEQUENCERule() {
		return (tOCTAL_ESCAPE_SEQUENCE != null) ? tOCTAL_ESCAPE_SEQUENCE : (tOCTAL_ESCAPE_SEQUENCE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OCTAL_ESCAPE_SEQUENCE"));
	} 

	//terminal fragment HEXADECIMAL_ESCAPE_SEQUENCE:
	//	"\\x" HEXADECIMAL_DIGIT+;
	public TerminalRule getHEXADECIMAL_ESCAPE_SEQUENCERule() {
		return (tHEXADECIMAL_ESCAPE_SEQUENCE != null) ? tHEXADECIMAL_ESCAPE_SEQUENCE : (tHEXADECIMAL_ESCAPE_SEQUENCE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEXADECIMAL_ESCAPE_SEQUENCE"));
	} 

	//// lex.fcon
	//terminal FLOATING_LITERAL:
	//	(FRACTIONAL_CONSTANT EXPONENT_PART? | DIGIT+ EXPONENT_PART) ("f" | "l" | "F" | "L")?;
	public TerminalRule getFLOATING_LITERALRule() {
		return (tFLOATING_LITERAL != null) ? tFLOATING_LITERAL : (tFLOATING_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOATING_LITERAL"));
	} 

	//terminal fragment FRACTIONAL_CONSTANT:
	//	DIGIT* "." DIGIT+ | DIGIT+ ".";
	public TerminalRule getFRACTIONAL_CONSTANTRule() {
		return (tFRACTIONAL_CONSTANT != null) ? tFRACTIONAL_CONSTANT : (tFRACTIONAL_CONSTANT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FRACTIONAL_CONSTANT"));
	} 

	//terminal fragment EXPONENT_PART:
	//	("e" | "E") ("+" | "-")? DIGIT+;
	public TerminalRule getEXPONENT_PARTRule() {
		return (tEXPONENT_PART != null) ? tEXPONENT_PART : (tEXPONENT_PART = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXPONENT_PART"));
	} 

	//// lex.string
	//terminal STRING_LITERAL:
	//	ENC_PREFIX? "\"" SCHAR+ "\"";
	public TerminalRule getSTRING_LITERALRule() {
		return (tSTRING_LITERAL != null) ? tSTRING_LITERAL : (tSTRING_LITERAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING_LITERAL"));
	} 

	//terminal fragment ENC_PREFIX:
	//	"u8" | "u" | "U" | "L";
	public TerminalRule getENC_PREFIXRule() {
		return (tENC_PREFIX != null) ? tENC_PREFIX : (tENC_PREFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ENC_PREFIX"));
	} 

	//terminal fragment SCHAR:
	//	!("\"" | "\\" | "\n") | ESCAPE_SEQUENCE | UNIVERSAL_CHARACTER_NAME;
	public TerminalRule getSCHARRule() {
		return (tSCHAR != null) ? tSCHAR : (tSCHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SCHAR"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
