// class
ClassName :
	ID | SimpleTemplateId
;

Class

// lex.expr.prim.general
PrimaryExpression :
	Literal |
	this |
	'(' Expression ')' |
	IdExpression |
	LambdaExpression |
;

IdExpression :
	UnqualifiedId | QualifiedId
;

UnqualifiedId :
	OperatorFunctionId |
	ConversionFunctionID |
	LiteralOperatorId |
	'~' ClassName |
	'~' DeclarationTypeSpecifier |
	TemplateId |
	ID
;

// dlc.type.simple
TypeName :
	ClassName |
	EnumName |
	TypedefName |
	SimpleTemblateId
;

DeclarationTypeSpecifier :
	'decltype' '(' Expression ')'
;

// over.literal
LiteralOperatorId :
	'operator' '\"\"' ID
;



















/*
TranslationUnit : {TranslationUnit}
	(declarations += Declaration)*
;


Declaration :
	BlockDeclaration 
 	//FunctionDefinition |
 	//TemplateDeclaration |
 	//ExplicitInstantiation |
 	//ExplicitSpecialization |
 	//LinkageSpecification |
 	//NamespaceDefinition
;

BlockDeclaration :
	SimpleDeclaration
 	//AsmDefinition |
 	//NamespaceAliasDefinition |
 	//UsingDeclaration |
 	//UsingDirective
;

SimpleDeclaration:
	{SimpleDeclaration}	(declSpecifierSeq=DeclSpecifierSeq)?
	(initDeclaratorList=InitDeclaratorList)? ';';

*/